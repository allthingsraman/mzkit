Imports CompMs.Common.Components
Imports CompMs.Common.DataObj.Property
Imports CompMs.Common.Enum
Imports CompMs.Common.FormulaGenerator.DataObj
Imports CompMs.Common.Interfaces
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Runtime.InteropServices


Public NotInheritable Class LipidMsmsCharacterizationUtility
    Private Sub New()
    End Sub

    ' 
    Public Shared Function returnAnnotationResult(ByVal lipidHeader As String, ByVal lbmClass As LbmClass, ByVal hydrogenString As String, ByVal theoreticalMz As Double, ByVal adduct As AdductIon, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal candidates As List(Of LipidMolecule), ByVal acylCountInMolecule As Integer) As LipidMolecule
        If candidates Is Nothing OrElse candidates.Count = 0 Then
            Dim annotationlevel = 1
            If acylCountInMolecule = 1 Then annotationlevel = 2
            Dim result = getLipidAnnotaionAsSubLevel(lipidHeader, lbmClass, hydrogenString, totalCarbon, totalDoubleBond, totalOxidized, annotationlevel)
            result.Adduct = adduct
            result.Mz = CSng(theoreticalMz)
            Return result
        Else
            Dim result = candidates.OrderByDescending(Function(n) n.Score).ToList()(0)
            result.Adduct = adduct
            result.Mz = CSng(theoreticalMz)
            Return result
        End If
    End Function

    Public Shared Function isDiagnosticFragmentExist(ByVal spectrum As List(Of SpectrumPeak), ByVal ms2Tolerance As Double, ByVal diagnosticMz As Double, ByVal threshold As Double) As Boolean
        For i = 0 To spectrum.Count - 1
            Dim mz = spectrum(i).Mass
            Dim intensity = spectrum(i).Intensity ' should be normalized by max intensity to 100

            If intensity > threshold AndAlso Math.Abs(mz - diagnosticMz) < ms2Tolerance Then
                Return True
            End If
        Next
        Return False
    End Function

    Public Shared Function isFragment1GreaterThanFragment2(ByVal spectrum As List(Of SpectrumPeak), ByVal ms2Tolerance As Double, ByVal fragment1 As Double, ByVal fragment2 As Double) As Boolean
        Dim frag1intensity = 0.0
        Dim frag2intensity = 0.0
        For i = 0 To spectrum.Count - 1
            Dim mz = spectrum(i).Mass
            Dim intensity = spectrum(i).Intensity ' should be normalized by max intensity to 100

            If intensity > frag1intensity AndAlso Math.Abs(mz - fragment1) < ms2Tolerance Then
                frag1intensity = intensity
            End If

            If intensity > frag2intensity AndAlso Math.Abs(mz - fragment2) < ms2Tolerance Then
                frag2intensity = intensity
            End If
        Next
        If frag1intensity > frag2intensity Then
            Return True
        Else
            Return False
        End If
    End Function

    Public Shared Function isPeakFoundWithACritetion(ByVal spectrum As List(Of SpectrumPeak), ByVal beginMz As Double, ByVal endMz As Double, ByVal threshold As Double) As Boolean
        For i = 0 To spectrum.Count - 1
            Dim mz = spectrum(i).Mass
            Dim intensity = spectrum(i).Intensity ' should be normalized by max intensity to 100

            If intensity > threshold AndAlso beginMz <= mz AndAlso mz <= endMz Then
                Return True
            End If
        Next
        Return False
    End Function


    Public Shared Function getCeramideMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal score As Double) As LipidMolecule 'd: 2*OH, t: 3*OH

        Dim hydroxyString1 = hydroxyString
        Select Case hydroxyString
            Case "m"
                hydroxyString1 = ";O"
            Case "d"
                hydroxyString1 = ";O2"
            Case "t"
                hydroxyString1 = ";O3"
        End Select

        Dim totalCarbon = sphCarbon + acylCarbon
        Dim totalDB = sphDouble + acylDouble
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & hydroxyString1
        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & hydroxyString1
        Dim acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString()
        Dim chainString = sphChainString & "/" & acylChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString
}
    End Function

    Public Shared Function getNacylphospholipidMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double) As LipidMolecule
        Dim lipidHeader = ""
        If lbmClass = lbmClass.LNAPE Then
            lipidHeader = "LPE-N"
        ElseIf lbmClass = lbmClass.LNAPS Then
            lipidHeader = "LPS-N"
        End If
        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidHeader & " (FA)" & totalString

        Dim sn1ChainString = sn1Carbon.ToString() & ":" & sn1Double.ToString()
        Dim sn2ChainString = sn2Carbon.ToString() & ":" & sn2Double.ToString()
        Dim lipidName = lipidHeader & " (FA " & sn2ChainString & ")" & sn1ChainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = sn1ChainString,
.Sn2CarbonCount = sn2Carbon,
.Sn2DoubleBondCount = sn2Double,
.Sn2AcylChainString = sn2ChainString
}
    End Function


    Public Shared Function getPhospholipidMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        'finally, acyl name ordering is determined by double bond count and acyl length
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)

        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim chainString = sn1ChainString & "_" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function
    Public Shared Function getEtherPhospholipidMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double, ByVal chainSuffix As String) As LipidMolecule
        Dim chainPrefix = chainSuffix
        Select Case chainSuffix
            Case "e"
                chainPrefix = "O-"
            Case "p"
                chainPrefix = "P-"
        End Select
        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & chainPrefix & totalString

        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)

        Dim sn1ChainString = chainPrefix & sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim chainString = sn1ChainString & "_" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function

    Public Shared Function getEtherOxPxMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn1Oxydized As Integer, ByVal sn2Oxydized As Integer, ByVal score As Double, ByVal chainSuffix As String) As LipidMolecule
        Dim chainPrefix = chainSuffix
        Select Case chainSuffix
            Case "e"
                chainPrefix = "O-"
            Case "p"
                chainPrefix = "P-"
        End Select

        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalOxidized = sn1Oxydized + sn2Oxydized
        Dim totalDB = sn1Double + sn2Double
        Dim totalOxidizedString = If(totalOxidized > 1, ";O" & totalOxidized.ToString(), ";O")
        Dim totalString = chainPrefix & totalCarbon.ToString() & ":" & totalDB.ToString() & totalOxidizedString
        Dim totalName = lipidClass & " " & totalString
        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double, sn1Oxydized},
            New Integer() {sn2Carbon, sn2Double, sn2Oxydized}
        }
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn1OxydizedCount = acyls(0)(2)

        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn2OxydizedCount = acyls(1)(2)

        Dim sn1OxydizedString = ""
        Dim sn2OxydizedString = ""

        If sn1OxydizedCount <> 0 Then
            sn1OxydizedString = If(sn1OxydizedCount > 1, ";O" & sn1OxydizedCount.ToString(), ";O")
        End If
        If sn2OxydizedCount <> 0 Then
            sn2OxydizedString = If(sn2OxydizedCount > 1, ";O" & sn2OxydizedCount.ToString(), ";O")
        End If

        Dim sn1ChainString = chainPrefix & sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString() & sn1OxydizedString
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString() & sn2OxydizedString
        Dim chainString = sn1ChainString & "_" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function


    Public Shared Function getOxydizedPhospholipidMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn1Oxydized As Integer, ByVal sn2Oxydized As Integer, ByVal score As Double) As LipidMolecule
        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalOxidized = sn1Oxydized + sn2Oxydized
        Dim totalOxidizedString = If(totalOxidized > 1, ";O" & totalOxidized.ToString(), ";O")
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & totalOxidizedString
        Dim totalName = lipidClass & " " & totalString
        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double, sn1Oxydized},
            New Integer() {sn2Carbon, sn2Double, sn2Oxydized}
        }
        If sn1Oxydized = 0 Then
            acyls = acyls.OrderBy(Function(n) n(2)).ThenBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()
        Else
            acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()
        End If

        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn1OxydizedCount = acyls(0)(2)

        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn2OxydizedCount = acyls(1)(2)

        Dim sn1OxydizedString = ""
        Dim sn2OxydizedString = ""

        If sn1OxydizedCount <> 0 Then
            sn1OxydizedString = If(sn1OxydizedCount = 1, ";O", ";O" & sn1OxydizedCount.ToString())
        End If
        If sn2OxydizedCount <> 0 Then
            sn2OxydizedString = If(sn2OxydizedCount = 1, ";O", ";O" & sn2OxydizedCount.ToString())
        End If

        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString() & sn1OxydizedString
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString() & sn2OxydizedString
        Dim chainString = sn1ChainString & "_" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function
    Public Shared Function getOxydizedPhospholipidMoleculeObjAsLevel1(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal totalCarbon As Integer, ByVal totalDB As Integer, ByVal totalOxidized As Integer, ByVal score As Double) As LipidMolecule
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString
        Dim totalOxidizedString = If(totalOxidized > 1, ";O" & totalOxidized.ToString(), ";O")
        Dim chainString = totalString & totalOxidizedString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score
}
    End Function

    Public Shared Function getSingleacylchainMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon
        Dim totalDB = sn1Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double}
        }
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)

        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim chainString = sn1ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString
}
    End Function

    Public Shared Function getSingleacyloxMoleculeObjAsLevel1(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal totalOxidized As Integer, ByVal score As Double) As LipidMolecule
        Dim totalString = sn1Carbon.ToString() & ":" & sn1Double.ToString()
        'var totalName = lipidClass + " " + totalString + "+" + totalOxidized + "O";
        Dim totalOxidizedString = If(totalOxidized > 1, ";O" & totalOxidized.ToString(), ";O")
        Dim totalName = lipidClass & " " & totalString & totalOxidizedString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.LipidName = totalName,
.TotalCarbonCount = sn1Carbon,
.TotalDoubleBondCount = sn1Double,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = totalString,
.TotalOxidizedCount = totalOxidized
}
    End Function

    Public Shared Function getSingleacylchainwithsuffixMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal score As Double, ByVal chainSuffix As String) As LipidMolecule

        Dim totalCarbon = sn1Carbon
        Dim totalDB = sn1Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()

        Dim totalName = lipidClass & " " & totalString & chainSuffix

        Dim lipidName = totalName

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = totalString
}
    End Function

    Public Shared Function getTriacylglycerolMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn3Carbon As Integer, ByVal sn3Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double},
            New Integer() {sn3Carbon, sn3Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn3CarbonCount = acyls(2)(0)
        Dim sn3DbCount = acyls(2)(1)

        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()
        Dim chainString = sn1ChainString & "_" & sn2ChainString & "_" & sn3ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString
}
    End Function
    'add MT
    Public Shared Function getEthertagMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn3Carbon As Integer, ByVal sn3Double As Integer, ByVal score As Double) As LipidMolecule
        Dim etherPrefix = "O-"
        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double
        Dim totalString = etherPrefix & totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString
        Dim sn2Carbon2 = sn2Carbon
        Dim sn2Double2 = sn2Double
        Dim sn3Carbon2 = sn3Carbon
        Dim sn3Double2 = sn3Double

        If sn2Carbon > sn3Carbon OrElse sn2Double > sn3Double Then
            sn2Carbon2 = sn3Carbon
            sn2Double2 = sn3Double
            sn3Carbon2 = sn2Carbon
            sn3Double2 = sn2Double
        End If

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon2, sn2Double2},
            New Integer() {sn3Carbon2, sn3Double2}
        }

        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn3CarbonCount = acyls(2)(0)
        Dim sn3DbCount = acyls(2)(1)

        Dim sn1ChainString = etherPrefix & sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()
        Dim chainString = sn1ChainString & "_" & sn2ChainString & "_" & sn3ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString
}
    End Function



    Public Shared Function getEsterceramideMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal esterCarbon As Integer, ByVal esterDouble As Integer, ByVal score As Double) As LipidMolecule 'd: 2*OH, t: 3*OH   Cer-EOS, EODS, EBDS, Hexcer-EOS
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        'var totalCarbon = sphCarbon + acylCarbon + esterCarbon;
        'var totalDB = sphDouble + acylDouble + esterDouble;
        'var totalString = totalCarbon + ":" + totalDB;
        'var totalName = lipidClass + " " + hydroxyString + totalString;
        'var sphChainString = hydroxyString.ToString() + sphCarbon.ToString() + ":" + sphDouble;
        'var acylChainString = acylCarbon + ":" + acylDouble;
        'var esterChainString = esterCarbon + ":" + esterDouble;

        ' standerd output

        Dim totalCarbon = sphCarbon + acylCarbon + esterCarbon
        Dim totalDB = sphDouble + acylDouble + (esterDouble + 1)
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + 2).ToString()

        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & ";O" & sphHydroxyCount.ToString()
        Dim acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString() & ";O"
        If lbmClass = lbmClass.Cer_EBDS Then
            acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString() & "(3OH)"
        End If
        Dim esterChainString = "(FA " & esterCarbon.ToString() & ":" & esterDouble.ToString() & ")"

        Dim chainString = sphChainString & "/" & acylChainString & esterChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString,
.Sn3CarbonCount = esterCarbon,
.Sn3DoubleBondCount = esterDouble,
.Sn3AcylChainString = esterChainString
}
    End Function

    Public Shared Function getEsterceramideMoleculeObjAsLevel2_0(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal cerCarbon As Integer, ByVal cerDouble As Integer, ByVal esterCarbon As Integer, ByVal esterDouble As Integer, ByVal score As Double) As LipidMolecule 'd: 2*OH, t: 3*OH
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim hydroxyString1 = hydroxyString

        Dim totalCarbon = cerCarbon + esterCarbon
        Dim totalDB = cerDouble + (esterDouble + 1)
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + 2).ToString()

        Dim cerChainString = cerCarbon.ToString() & ":" & cerDouble.ToString() & ";O" & (sphHydroxyCount + 1).ToString()
        Dim esterChainString = "(FA " & esterCarbon.ToString() & ":" & esterDouble.ToString() & ")"

        Dim chainString = cerChainString & esterChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = cerCarbon,
.Sn1DoubleBondCount = cerDouble,
.Sn1AcylChainString = cerChainString,
.Sn3CarbonCount = esterCarbon,
.Sn3DoubleBondCount = esterDouble,
.Sn3AcylChainString = esterChainString
}
    End Function

    Public Shared Function getEsterceramideMoleculeObjAsLevel2_1(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal score As Double) As LipidMolecule 'd: 2*OH, t: 3*OH
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim totalCarbon = sphCarbon + acylCarbon
        Dim totalDB = sphDouble + acylDouble
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + 2).ToString()

        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & ";O" & sphHydroxyCount.ToString()
        Dim acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString() & ";O2"

        Dim chainString = sphChainString & "/" & acylChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString
}
    End Function


    Public Shared Function getAcylhexceramideMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal esterCarbon As Integer, ByVal esterDouble As Integer, ByVal score As Double, ByVal acylOxidizedCount As Integer) As LipidMolecule 'd: 2*OH, t: 3*OH    AHexCer (O-16:0)18:1;O2/24:0;O
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim acylOxString = If(acylOxidizedCount > 1, ";O" & acylOxidizedCount.ToString(), If(acylOxidizedCount = 1, ";O", ""))
        Dim totalCarbon = sphCarbon + acylCarbon + esterCarbon
        Dim totalDB = sphDouble + acylDouble + esterDouble
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + acylOxidizedCount).ToString()

        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & ";O" & sphHydroxyCount.ToString()
        Dim acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString() & acylOxString
        Dim esterChainString = "(O-" & esterCarbon.ToString() & ":" & esterDouble.ToString() & ")"

        Dim chainString = esterChainString & sphChainString & "/" & acylChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString,
.Sn3CarbonCount = esterCarbon,
.Sn3DoubleBondCount = esterDouble,
.Sn3AcylChainString = esterChainString
}
    End Function

    Public Shared Function getAcylhexceramideMoleculeObjAsLevel2_0(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal ceramideCarbon As Integer, ByVal ceramideDouble As Integer, ByVal esterCarbon As Integer, ByVal esterDouble As Integer, ByVal score As Double, ByVal acylOxidizedCount As Integer) As LipidMolecule 'd: 2*OH, t: 3*OH  AHexCer (O-16:0)42:1;O3
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim totalCarbon = ceramideCarbon + esterCarbon
        Dim totalDB = ceramideDouble + esterDouble
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + acylOxidizedCount).ToString()
        Dim ceramideString = ceramideCarbon.ToString() & ":" & ceramideDouble.ToString() & ";O" & (sphHydroxyCount + acylOxidizedCount).ToString()
        Dim esterChainString = "(O-" & esterCarbon.ToString() & ":" & esterDouble.ToString() & ")"

        'var chainString = esterChainString + "/" + ceramideString;
        Dim chainString = esterChainString & ceramideString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = ceramideCarbon,
.Sn1DoubleBondCount = ceramideDouble,
.Sn1AcylChainString = ceramideString,
.Sn2CarbonCount = esterCarbon,
.Sn2DoubleBondCount = esterDouble,
.Sn2AcylChainString = esterChainString
}
    End Function

    Public Shared Function getAcylhexceramideMoleculeObjAsLevel2_1(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal score As Double, ByVal acylOxidizedCount As Integer) As LipidMolecule 'd: 2*OH, t: 3*OH    AHexCer 58:1;O3
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim acylOxString = If(acylOxidizedCount > 1, ";O" & acylOxidizedCount.ToString(), If(acylOxidizedCount = 1, ";O", ""))
        Dim totalCarbon = sphCarbon + acylCarbon
        Dim totalDB = sphDouble + acylDouble
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + acylOxidizedCount).ToString()
        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & ";O" & sphHydroxyCount.ToString()
        Dim acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString() & acylOxString

        Dim chainString = sphChainString & "/" & acylChainString
        Dim lipidName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + acylOxidizedCount).ToString() ' 

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 1,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString
}
    End Function

    Public Shared Function getAsmMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal esterCarbon As Integer, ByVal esterDouble As Integer, ByVal score As Double) As LipidMolecule 'd: 2*OH, t: 3*OH   ASM neg
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim hydroxyString1 = hydroxyString

        Dim totalCarbon = sphCarbon + acylCarbon + esterCarbon
        Dim totalDB = sphDouble + acylDouble + esterDouble
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + 1).ToString()

        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & ";O" & sphHydroxyCount.ToString()
        Dim acylChainString = acylCarbon.ToString() & ":" & acylDouble.ToString()
        Dim esterChainString = "(FA " & esterCarbon.ToString() & ":" & esterDouble.ToString() & ")"
        Dim chainString = sphChainString & "/" & acylChainString & esterChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString,
.Sn3CarbonCount = esterCarbon,
.Sn3DoubleBondCount = esterDouble,
.Sn3AcylChainString = esterChainString
}
    End Function

    Public Shared Function getAsmMoleculeObjAsLevel2_0(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal cerCarbon As Integer, ByVal cerDouble As Integer, ByVal esterCarbon As Integer, ByVal esterDouble As Integer, ByVal score As Double) As LipidMolecule 'd: 2*OH, t: 3*OH   ASM neg
        Dim sphHydroxyCount = 0
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
            Case "d"
                sphHydroxyCount = 2
            Case "t"
                sphHydroxyCount = 3
        End Select

        Dim hydroxyString1 = hydroxyString

        Dim totalCarbon = cerCarbon + esterCarbon
        Dim totalDB = cerDouble + (esterDouble + 1)
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString & ";O" & (sphHydroxyCount + 1).ToString()

        Dim cerChainString = cerCarbon.ToString() & ":" & cerDouble.ToString() & ";O" & sphHydroxyCount.ToString()
        Dim esterChainString = "(FA " & esterCarbon.ToString() & ":" & esterDouble.ToString() & ")"

        Dim chainString = cerChainString & esterChainString
        Dim lipidName = lipidClass & " " & chainString


        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = cerCarbon,
.Sn1DoubleBondCount = cerDouble,
.Sn1AcylChainString = cerChainString,
.Sn3CarbonCount = esterCarbon,
.Sn3DoubleBondCount = esterDouble,
.Sn3AcylChainString = esterChainString
}
    End Function


    Public Shared Function getAcylglycerolMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn3Carbon As Integer, ByVal sn3Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn2Carbon, sn2Double},
            New Integer() {sn3Carbon, sn3Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn2CarbonCount = acyls(0)(0)
        Dim sn2DbCount = acyls(0)(1)
        Dim sn3CarbonCount = acyls(1)(0)
        Dim sn3DbCount = acyls(1)(1)

        Dim sn1ChainString = sn1Carbon.ToString() & ":" & sn1Double.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()
        Dim chainString = sn1ChainString & "/" & sn2ChainString & "_" & sn3ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString
}
    End Function

    Public Shared Function getAdggaMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn3Carbon As Integer, ByVal sn3Double As Integer, ByVal score As Double) As LipidMolecule
        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn2Carbon, sn2Double},
            New Integer() {sn3Carbon, sn3Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn2CarbonCount = acyls(0)(0)
        Dim sn2DbCount = acyls(0)(1)
        Dim sn3CarbonCount = acyls(1)(0)
        Dim sn3DbCount = acyls(1)(1)

        Dim sn1ChainString = "(O-" & sn1Carbon.ToString() & ":" & sn1Double.ToString() & ")"
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()
        Dim chainString = sn1ChainString & sn2ChainString & "_" & sn3ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString
}
    End Function



    Public Shared Function getDiacylglycerolMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim chainString = sn1ChainString & "_" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function

    Public Shared Function getCardiolipinMoleculeObjAsLevel2_0(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1_2Carbon As Integer, ByVal sn1_2Double As Integer, ByVal sn3_4Carbon As Integer, ByVal sn3_4Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1_2Carbon + sn3_4Carbon
        Dim totalDB = sn1_2Double + sn3_4Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1_2Carbon, sn1_2Double},
            New Integer() {sn3_4Carbon, sn3_4Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)


        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim chainString = sn1ChainString & "_" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function

    Public Shared Function getCardiolipinMoleculeObjAsLevel2_1(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn2Carbon As Integer, ByVal sn3Carbon As Integer, ByVal sn4Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Double As Integer, ByVal sn3Double As Integer, ByVal sn4Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon + sn4Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double + sn4Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double},
            New Integer() {sn3Carbon, sn3Double},
            New Integer() {sn4Carbon, sn4Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn3CarbonCount = acyls(2)(0)
        Dim sn3DbCount = acyls(2)(1)
        Dim sn4CarbonCount = acyls(3)(0)
        Dim sn4DbCount = acyls(3)(1)



        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()
        Dim sn4ChainString = sn4CarbonCount.ToString() & ":" & sn4DbCount.ToString()

        Dim chainString = sn1ChainString & "_" & sn2ChainString & "_" & sn3ChainString & "_" & sn4ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString,
.sn4CarbonCount = sn4CarbonCount,
.Sn4DoubleBondCount = sn4DbCount,
.Sn4AcylChainString = sn4ChainString

}
        End Function
    Public Shared Function getCardiolipinMoleculeObjAsLevel2_2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn2Carbon As Integer, ByVal sn3Carbon As Integer, ByVal sn4Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Double As Integer, ByVal sn3Double As Integer, ByVal sn4Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon + sn4Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double + sn4Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim acyls2 = New List(Of Integer())() From {
            New Integer() {sn3Carbon, sn3Double},
            New Integer() {sn4Carbon, sn4Double}
        }
        acyls2 = acyls2.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim acyls3 = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double, sn2Carbon, sn2Double},
            New Integer() {sn3Carbon, sn3Double, sn4Carbon, sn4Double}
        }
        acyls3 = acyls3.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn1CarbonCount = acyls3(0)(0)
        Dim sn1DbCount = acyls3(0)(1)
        Dim sn2CarbonCount = acyls3(0)(2)
        Dim sn2DbCount = acyls3(0)(3)

        Dim sn3CarbonCount = acyls3(1)(0)
        Dim sn3DbCount = acyls3(1)(1)
        Dim sn4CarbonCount = acyls3(1)(2)
        Dim sn4DbCount = acyls3(1)(3)


        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()

        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()
        Dim sn4ChainString = sn4CarbonCount.ToString() & ":" & sn4DbCount.ToString()

        'var chainString = sn1ChainString + "-" + sn2ChainString + "-" + sn3ChainString + "-" + sn4ChainString;
        Dim chainString = sn1ChainString & "_" & sn2ChainString & "_" & sn3ChainString & "_" & sn4ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString,
.sn4CarbonCount = sn4CarbonCount,
.Sn4DoubleBondCount = sn4DbCount,
.Sn4AcylChainString = sn4ChainString

}
        End Function

    Public Shared Function getLysocardiolipinMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn2Carbon As Integer, ByVal sn3Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Double As Integer, ByVal sn3Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn2Carbon, sn2Double},
            New Integer() {sn3Carbon, sn3Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()
        Dim sn2CarbonCount = acyls(0)(0)
        Dim sn2DbCount = acyls(0)(1)
        Dim sn3CarbonCount = acyls(1)(0)
        Dim sn3DbCount = acyls(1)(1)


        Dim sn1ChainString = sn1Carbon.ToString() & ":" & sn1Double.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString()

        'var chainString = sn1ChainString + "/" + sn2ChainString + "-" + sn3ChainString;
        Dim chainString = sn1ChainString & "/" & sn2ChainString & "_" & sn3ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString

}
        End Function

    Public Shared Function getFahfaMoleculeObjAsLevel2_0(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & ";O"
        Dim totalName = lipidClass & " " & totalString

        '
        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        'acyls = acyls.OrderBy(n => n[1]).ThenBy(n => n[0]).ToList();
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)


        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString() & ";O"
        Dim chainString = sn1ChainString & "/" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function

    Public Shared Function getFahfamideMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal surfix As String, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double + 1
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & ";O2"
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)


        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString() & ";O"
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim chainString = sn1ChainString & "(FA " & sn2ChainString & ")"
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString
}
    End Function

    Public Shared Function getSteroidalEtherMoleculeObj(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal steroidString As String, ByVal steroidalModificationClass As String, ByVal totalCarbon As Integer, ByVal totalDB As Integer) As LipidMolecule
        Dim totalString = String.Empty
        Dim annotationLevel = 2

        Select Case steroidalModificationClass
            Case "ester"
                totalString = steroidString & "/" & totalCarbon.ToString() & ":" & totalDB.ToString()
            Case "AHex"
                totalString = steroidString & ";O;Hex;FA " & totalCarbon.ToString() & ":" & totalDB.ToString()
        End Select
        Dim totalName = lipidClass & " " & totalString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.annotationLevel = annotationLevel,
.SublevelLipidName = totalName,
.LipidName = totalName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString
}

    End Function

    Public Shared Function getWaxEsterObjAsLevel2_0(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon
        Dim totalDB = sn1Double + sn2Double
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString()
        Dim totalName = lipidClass & " " & totalString

        '

        Dim sn1ChainString = sn1Carbon.ToString() & ":" & sn1Double.ToString()
        Dim sn2ChainString = sn2Carbon.ToString() & ":" & sn2Double.ToString()
        Dim chainString = sn1ChainString & "/" & sn2ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sn1Carbon,
.Sn1DoubleBondCount = sn1Double,
.Sn1AcylChainString = sn1ChainString,
.Sn2CarbonCount = sn2Carbon,
.Sn2DoubleBondCount = sn2Double,
.Sn2AcylChainString = sn2ChainString
}
    End Function

    ' Cer-Ax, Cer-Bx etc
    Public Shared Function getCeramideoxMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal sphCarbon As Integer, ByVal sphDouble As Integer, ByVal acylCarbon As Integer, ByVal acylDouble As Integer, ByVal acylOxidized As Integer, ByVal score As Double) As LipidMolecule
        Dim sphHydroxyCount = 0
        Dim sphHydroxyString = ""
        Select Case hydroxyString
            Case "m"
                sphHydroxyCount = 1
                sphHydroxyString = ";O"
            Case "d"
                sphHydroxyCount = 2
                sphHydroxyString = ";O2"
            Case "t"
                sphHydroxyCount = 3
                sphHydroxyString = ";O3"
        End Select
        Dim acylHydroxyString = If(acylOxidized > 1, ";O" & acylOxidized.ToString(), ";O")
        Dim lbmClassString = lbmClass.ToString()
        If lbmClassString.Contains("_A") Then
            acylHydroxyString = "(2OH)"
        ElseIf lbmClassString.Contains("_B") OrElse lbmClassString.Contains("_EB") Then
            acylHydroxyString = "(3OH)"

        End If

        Dim totalCarbon = sphCarbon + acylCarbon
        Dim totalDB = sphDouble + acylDouble

        Dim totalString = If(acylOxidized = 0, totalCarbon.ToString() & ":" & totalDB.ToString() & sphHydroxyString, totalCarbon.ToString() & ":" & totalDB.ToString() & ";O" & (sphHydroxyCount + acylOxidized).ToString())

        Dim totalName = lipidClass & " " & totalString

        Dim sphChainString = sphCarbon.ToString() & ":" & sphDouble.ToString() & sphHydroxyString
        Dim acylChainString = If(acylOxidized = 0, acylCarbon.ToString() & ":" & acylDouble.ToString(), acylCarbon.ToString() & ":" & acylDouble.ToString() & acylHydroxyString)
        Dim chainString = sphChainString & "/" & acylChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = sphCarbon,
.Sn1DoubleBondCount = sphDouble,
.Sn1AcylChainString = sphChainString,
.Sn2CarbonCount = acylCarbon,
.Sn2DoubleBondCount = acylDouble,
.Sn2AcylChainString = acylChainString
}
    End Function

    Public Shared Function getAlphaOxfaMoleculeObjAsLevel1(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal totalCarbon As Integer, ByVal totalDB As Integer, ByVal totalOxidized As Integer, ByVal score As Double) As LipidMolecule
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & "(2OH)"
        Dim totalName = lipidClass & " " & totalString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.LipidName = totalName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.Sn1CarbonCount = totalCarbon,
.Sn1DoubleBondCount = totalDB,
.Sn1AcylChainString = totalString,
.TotalOxidizedCount = totalOxidized
}

    End Function

    Public Shared Function getOxTriacylglycerolMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn3Carbon As Integer, ByVal sn3Double As Integer, ByVal totalOxidized As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double
        Dim totalOxidizedString = If(totalOxidized > 1, ";O" & totalOxidized.ToString(), ";O")
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & totalOxidizedString
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn3CarbonCount = sn3Carbon
        Dim sn3DbCount = sn3Double

        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString() & totalOxidizedString
        Dim chainString = sn1ChainString & "_" & sn2ChainString & "_" & sn3ChainString
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString
}
    End Function

    Public Shared Function getFahfaTriacylglycerolMoleculeObjAsLevel2(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal sn1Carbon As Integer, ByVal sn1Double As Integer, ByVal sn2Carbon As Integer, ByVal sn2Double As Integer, ByVal sn3Carbon As Integer, ByVal sn3Double As Integer, ByVal sn4Carbon As Integer, ByVal sn4Double As Integer, ByVal totalOxidized As Integer, ByVal score As Double) As LipidMolecule

        Dim totalCarbon = sn1Carbon + sn2Carbon + sn3Carbon + sn4Carbon
        Dim totalDB = sn1Double + sn2Double + sn3Double + sn4Double + 1
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & ";O2"
        Dim totalName = lipidClass & " " & totalString

        Dim acyls = New List(Of Integer())() From {
            New Integer() {sn1Carbon, sn1Double},
            New Integer() {sn2Carbon, sn2Double}
        }
        acyls = acyls.OrderBy(Function(n) n(1)).ThenBy(Function(n) n(0)).ToList()

        Dim sn1CarbonCount = acyls(0)(0)
        Dim sn1DbCount = acyls(0)(1)
        Dim sn2CarbonCount = acyls(1)(0)
        Dim sn2DbCount = acyls(1)(1)
        Dim sn3CarbonCount = sn3Carbon
        Dim sn3DbCount = sn3Double
        Dim sn4CarbonCount = sn4Carbon
        Dim sn4DbCount = sn4Double


        Dim sn1ChainString = sn1CarbonCount.ToString() & ":" & sn1DbCount.ToString()
        Dim sn2ChainString = sn2CarbonCount.ToString() & ":" & sn2DbCount.ToString()
        Dim sn3ChainString = sn3CarbonCount.ToString() & ":" & sn3DbCount.ToString() & ";O"
        Dim sn4ChainString = sn4CarbonCount.ToString() & ":" & sn4DbCount.ToString()

        Dim chainString = sn1ChainString & "_" & sn2ChainString & "_" & sn3ChainString & "(FA " & sn4ChainString & ")"
        Dim lipidName = lipidClass & " " & chainString

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = totalName,
.lipidName = lipidName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalChainString = totalString,
.score = score,
.sn1CarbonCount = sn1CarbonCount,
.Sn1DoubleBondCount = sn1DbCount,
.Sn1AcylChainString = sn1ChainString,
.sn2CarbonCount = sn2CarbonCount,
.Sn2DoubleBondCount = sn2DbCount,
.Sn2AcylChainString = sn2ChainString,
.sn3CarbonCount = sn3CarbonCount,
.Sn3DoubleBondCount = sn3DbCount,
.Sn3AcylChainString = sn3ChainString,
.sn4CarbonCount = sn4CarbonCount,
.Sn4DoubleBondCount = sn4DbCount,
.Sn4AcylChainString = sn4ChainString
}
    End Function



    Public Shared Function getLipidAnnotaionAsSubLevel(ByVal lipidClass As String, ByVal lbmClass As LbmClass, ByVal hydroxyString As String, ByVal totalCarbon As Integer, ByVal totalDB As Integer, ByVal totalOxygen As Integer, ByVal annotationLevel As Integer) As LipidMolecule 'd: 2*OH, t: 3*OH, string.empty: 0*OH


        Dim totalOxygenString = If(totalOxygen = 0, String.Empty, If(totalOxygen = 1, ";O", ";O" & totalOxygen.ToString()))
        Dim totalString = totalCarbon.ToString() & ":" & totalDB.ToString() & hydroxyString & totalOxygenString

        Select Case hydroxyString
            Case "e"
                totalString = "O-" & totalCarbon.ToString() & ":" & totalDB.ToString() & totalOxygenString
            Case "p"
                totalString = "P-" & totalCarbon.ToString() & ":" & totalDB.ToString() & totalOxygenString
            Case "m"
                totalString = If(totalOxygen = 0, totalCarbon.ToString() & ":" & totalDB.ToString() & ";O", totalCarbon.ToString() & ":" & totalDB.ToString() & ";O" & (totalOxygen + 1).ToString())
            Case "d"
                totalString = If(totalOxygen = 0, totalCarbon.ToString() & ":" & totalDB.ToString() & ";O2", totalCarbon.ToString() & ":" & totalDB.ToString() & ";O" & (totalOxygen + 2).ToString())
            Case "t"
                totalString = If(totalOxygen = 0, totalCarbon.ToString() & ":" & totalDB.ToString() & ";O3", totalCarbon.ToString() & ":" & totalDB.ToString() & ";O" & (totalOxygen + 3).ToString())
        End Select

        Dim totalName = lipidClass & " " & totalString
        If lipidClass.StartsWith("SE ") OrElse lbmClass.ToString().EndsWith("CAE") Then
            totalName = lipidClass & "/" & totalString
        End If
        If lipidClass.StartsWith("CE") AndAlso Equals(totalString, "0:0") Then
            totalName = "Cholesterol"
        End If

        Return New LipidMolecule() With {
.lipidClass = lbmClass,
.annotationLevel = annotationLevel,
.SublevelLipidName = totalName,
.LipidName = totalName,
.TotalCarbonCount = totalCarbon,
.TotalDoubleBondCount = totalDB,
.TotalOxidizedCount = totalOxygen,
.TotalChainString = totalString
}
    End Function
    Public Shared Function returnAnnotationNoChainResult(ByVal lipidHeader As String, ByVal lbmClass As LbmClass, ByVal hydrogenString As String, ByVal theoreticalMz As Double, ByVal adduct As AdductIon, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal candidates As List(Of LipidMolecule), ByVal acylCountInMolecule As Integer) As LipidMolecule
        Return New LipidMolecule() With {
.LipidClass = lbmClass,
.AnnotationLevel = 2,
.SublevelLipidName = lipidHeader,
.LipidName = lipidHeader,
.adduct = adduct,
.Mz = theoreticalMz
}
    End Function



    Public Shared Sub countFragmentExistence(ByVal spectrum As List(Of SpectrumPeak), ByVal queries As List(Of SpectrumPeak), ByVal ms2Tolerance As Double, <Out> ByRef foundCount As Integer, <Out> ByRef averageIntensity As Double)
        foundCount = 0
        averageIntensity = 0.0
        For Each query In queries
            For Each peak In spectrum
                Dim mz = peak.Mass
                Dim intensity = peak.Intensity ' relative intensity
                If query.Intensity < intensity AndAlso Math.Abs(query.Mass - mz) < ms2Tolerance Then
                    foundCount += 1
                    averageIntensity += intensity
                    Exit For
                End If
            Next
        Next
        averageIntensity /= queries.Count
    End Sub

    Public Shared Function acylCainMass(ByVal carbon As Integer, ByVal dbBond As Integer) As Double
        Dim hydrogenMass = (carbon * 2 - 1 - dbBond * 2) * MassDiffDictionary.HydrogenMass
        Return CarbonMass * carbon + hydrogenMass + OxygenMass
    End Function

    Private Const Electron As Double = 0.00054858026
    Public Shared Function fattyacidProductIon(ByVal carbon As Integer, ByVal dbBond As Integer) As Double
        Dim hydrogenMass = (carbon * 2 - 1 - dbBond * 2) * MassDiffDictionary.HydrogenMass
        Return CarbonMass * carbon + hydrogenMass + OxygenMass * 2.0 + Electron
    End Function
    Public Shared Function SphingoChainMass(ByVal carbon As Integer, ByVal dbBond As Integer) As Double
        Dim hydrogenMass = (carbon * 2 - dbBond * 2) * MassDiffDictionary.HydrogenMass
        Return CarbonMass * carbon + hydrogenMass + OxygenMass * 2 + NitrogenMass
    End Function
End Class

Public NotInheritable Class LipidMsmsCharacterization
    Private Sub New()
    End Sub

    Private Const Electron As Double = 0.00054858026
    Private Const Proton As Double = 1.00727641974
    Private Const H2O As Double = 18.010564684
    Private Const Sugar162 As Double = 162.052823422
    Private Const Na As Double = 22.98977

    ' spectrum should be centroided, purified by absolute- and relative abundance cut off values
    ' spectrum must be ordered by intensity
    ' spectrum should be ObservableColllection<double[]> 0: m/z, 1: intensity
    Public Shared Function JudgeIfPhosphatidylcholine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum

        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = 184.07332
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' for eieio
                Dim PEHeaderLoss = theoreticalMz - 141.019094261
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeaderLoss, 5.0)
                If isClassIonFound2 AndAlso LipidMsmsCharacterizationUtility.isFragment1GreaterThanFragment2(spectrum, ms2Tolerance, PEHeaderLoss, diagnosticMz) Then
                    Return Nothing
                End If

                'var PEspecific = MassDiffDictionary.CarbonMass * 5
                '    + MassDiffDictionary.HydrogenMass * 12
                '    + MassDiffDictionary.NitrogenMass
                '    + MassDiffDictionary.OxygenMass * 4
                '    + MassDiffDictionary.PhosphorusMass
                '    + Proton;
                'var PEHeader = 141.019094261 + Proton;
                'var isClassIonFound3 = isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEspecific, 1.0);
                'var isClassIonFound4 = isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeader, 3.0);
                'if (isClassIonFound2 && isClassIonFound3) return null;
                'if (isClassIonFound4) return null;

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        'if (sn1Carbon < 10 || sn2Carbon < 10) continue;
                        If sn1Double > 6 OrElse sn2Double > 6 Then Continue For

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PC", LbmClass.PC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PC", LbmClass.PC, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.PC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
                'addMT
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 5.0
                Dim diagnosticMz = 184.07332
                ' seek [M+Na -C5H14NO4P]+
                Dim diagnosticMz2 = theoreticalMz - 183.06604
                ' seek [M+Na -C3H9N]+
                Dim diagnosticMz3 = theoreticalMz - 59.0735
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                        Dim nl_SN2 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PC", LbmClass.PC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PC", LbmClass.PC, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.PC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz2 = theoreticalMz - 60.021129369 ' in source check
                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                    If isClassIonFound2 Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PC", LbmClass.PC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PC", LbmClass.PC, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.PC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPhosphatidylethanolamine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6

        Dim spectrum = msScanProp.Spectrum

        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -141.019094261 (C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094261
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PE", LbmClass.PE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PE", LbmClass.PE, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '''
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.PE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
                'addMT
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -141.019094261 (C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094261
                ' seek - 43.042199 (C2H5N)
                Dim diagnosticMz2 = theoreticalMz - 43.042199
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PE", LbmClass.PE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PE", LbmClass.PE, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.PE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P-
                Dim threshold = 5.0
                Dim diagnosticMz = 196.03803
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                Dim threshold2 = 5.0
                Dim diagnosticMz2 = 152.995833871 ' seek C3H6O5P- (maybe LNAPE)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = True Then Return Nothing


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PE", LbmClass.PE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.PE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfPhosphatidylserine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -185.008927 (C3H8NO6P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 185.008927
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PS", LbmClass.PS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PS", LbmClass.PS, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS", LbmClass.PS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -185.008927 (C3H8NO6P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 185.008927
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' acyl level may be not able to annotate.
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule = getLipidAnnotaionAsLevel1("PS", LbmClass.PS, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS", LbmClass.PS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H5NO2 loss
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 87.032029
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim threshold2 = 30
                Dim diagnosticMz2 = theoreticalMz - 63.008491 ' [M+C2H3N(ACN)+Na-2H]- adduct of PG [M-H]- 
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound2 Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PS", LbmClass.PS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PS", LbmClass.PS, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '''
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS", LbmClass.PS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfPhosphatidylThreonine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -185.008927 (C4H10NO6P)
                Dim threshold = 20.0
                Dim diagnosticMz = theoreticalMz - (12 * 4 + HydrogenMass * 10 + NitrogenMass + OxygenMass * 6 + PhosphorusMass)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim nl_HD_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_HD_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_HD_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_HD_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PT", LbmClass.PT, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PT", LbmClass.PT, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C4H7NO2 loss
                Dim threshold = 0.5
                Dim diagnosticMz = theoreticalMz - (12 * 4 + HydrogenMass * 7 + NitrogenMass + OxygenMass * 2)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PT", LbmClass.PT, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PT", LbmClass.PT, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPhosphatidylglycerol(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -189.040227 (C3H8O6P+NH4)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 189.040227
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double


                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 AndAlso averageIntensity < 30 Then ' average intensity < 30 is nessesarry to distinguish it from BMP
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PG", LbmClass.PG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PG", LbmClass.PG, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '''
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG", LbmClass.PG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -171.005851 (C3H8O6P) - 22.9892207 (Na+)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 171.005851 - 22.9892207 ' + MassDiffDictionary.HydrogenMass;
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule = getLipidAnnotaionAsLevel1("PG", LbmClass.PG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG", LbmClass.PG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-
                Dim threshold = 0.01
                Dim diagnosticMz = 152.995833871
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PG", LbmClass.PG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG", LbmClass.PG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfBismonoacylglycerophosphate(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -189.040227 (C3H8O6P+NH4)
                Dim threshold = 0.01
                Dim diagnosticMz = theoreticalMz - 189.040227
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                'if (isClassIonFound == false) return null;

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 10
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 AndAlso averageIntensity >= 30 Then ' average intensity < 30 is nessesarry to distinguish it from BMP
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("BMP", LbmClass.BMP, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("BMP", LbmClass.BMP, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BMP", LbmClass.BMP, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPhosphatidylinositol(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -277.056272 (C6H12O9P+NH4)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 277.056272
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
#Region ""
                'for (int sn1Carbon = minSnCarbon; sn1Carbon <= maxSnCarbon; sn1Carbon++) {
                '    for (int sn1Double = minSnDoubleBond; sn1Double <= maxSnDoubleBond; sn1Double++) {
                '        var sn2Carbon = totalCarbon - sn1Carbon;
                '        var sn2Double = totalDoubleBond - sn1Double;

                '        var nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double);
                '        var nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double);

                '        var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mass = nl_SN1, Intensity = 0.01 },
                '            new SpectrumPeak() { Mass = nl_SN2, Intensity = 0.01 }
                '        };

                '        var foundCount = 0;
                '        var averageIntensity = 0.0;
                '        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                '        if (foundCount == 2) { // now I set 2 as the correct level
                '            var molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PI", LbmClass.PI, sn1Carbon, sn1Double,
                '                sn2Carbon, sn2Double, averageIntensity);
                '            candidates.Add(molecule);
                '        }
                '    }
                '}
#End Region

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI", LbmClass.PI, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' 
                Dim threshold = 10.0
                Dim diagnosticMz1 = theoreticalMz - (259.021895 + 22.9892207)  ' seek -(C6H12O9P +Na)
                Dim diagnosticMz2 = theoreticalMz - 260.02972                 ' seek -(C6H12O9P + H)
                Dim diagnosticMz3 = 260.02972 + 22.9892207                   ' seek (C6H13O9P +Na)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If Not isClassIon1Found OrElse Not isClassIon2Found OrElse Not isClassIon3Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule = getLipidAnnotaionAsLevel1("PI", LbmClass.PI, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI", LbmClass.PI, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 241.01188(C6H10O8P-) and 297.037548(C9H14O9P-)
                Dim threshold = 0.01
                Dim diagnosticMz1 = 241.01188 + Electron
                Dim diagnosticMz2 = 297.037548 + Electron
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If Not isClassIon1Found AndAlso Not isClassIon2Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PI", LbmClass.PI, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                '''add MT
                'if (candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule = getLipidAnnotaionAsLevel1("PI", LbmClass.PI, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule);
                '}
                '''

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI", LbmClass.PI, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfNacylphosphatidylserine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then ''' not found in lipidDbProject-Pos
                ' check [M-C2H8NO4P+H]+  
                Dim threshold = 1
                Dim diagnosticMz = theoreticalMz - 141.019094261
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If Not isClassIon1Found Then Return Nothing ' reject PS

                ' from here, acyl level annotation is executed. 
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getNacylphospholipidMoleculeObjAsLevel2("LNAPS", LbmClass.LNAPS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LNAPS", LbmClass.LNAPS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P- is not observed in LNAPE, instead, C3H6O5P is observed.
                Dim threshold = 10
                Dim diagnosticMz1 = 152.995833871
                Dim diagnosticMz2 = theoreticalMz - 87.032029 ' should be a marker of PS
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If Not isClassIon1Found OrElse isClassIon2Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        'if (sn2Carbon < minSnCarbon) { break; }

                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim nl_SN2 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        'Debug.WriteLine("LNAPS {0}:{1}/n-{2}:{3}, m/z {4}", sn1Carbon, sn1Double, sn2Carbon, sn2Double, nl_SN2);

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 30.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                        If foundCount = 1 Then
                            query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = sn1,
                                    .Intensity = 30.0
                                }
                                'new SpectrumPeak() { Mass = nl_SN1, Intensity = 10.0 }
                                }
                                foundCount = 0
                            averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                            If foundCount = 0 Then ' LNAPS should become 0
                                Dim molecule = LipidMsmsCharacterizationUtility.getNacylphospholipidMoleculeObjAsLevel2("LNAPS", LbmClass.LNAPS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LNAPS", LbmClass.LNAPS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfNacylphosphatidylethanolamine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode  //// not found in lipidDbProject-Pos
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ''' check -141.019094261 (C2H8NO4P)
                'var threshold = 1.0;
                'var diagnosticMz = theoreticalMz - 141.019094261;

                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                'if (isClassIonFound == true) return null;  // reject PE

                ''' from here, acyl level annotation is executed. 
                'var candidates = new List<LipidMolecule>();
                'for (int sn1Carbon = minSnCarbon; sn1Carbon <= maxSnCarbon; sn1Carbon++)
                '{
                '    for (int sn1Double = minSnDoubleBond; sn1Double <= maxSnDoubleBond; sn1Double++)
                '    {

                '        var sn2Carbon = totalCarbon - sn1Carbon;
                '        var sn2Double = totalDoubleBond - sn1Double;
                '        var sn1 = etherBondAcylLoss(sn1Carbon, sn1Double) - Electron;
                '        var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mass = sn1, Intensity = 0.1 },
                '        };

                '        var foundCount = 0;
                '        var averageIntensity = 0.0;
                '        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                '        if (foundCount == 2)
                '        { // now I set 2 as the correct level
                '            var molecule = LipidMsmsCharacterizationUtility.getNacylphospholipidMoleculeObjAsLevel2("LNAPE", LbmClass.LNAPE, sn1Carbon, sn1Double,
                '                sn2Carbon, sn2Double, averageIntensity);
                '            candidates.Add(molecule);
                '        }
                '    }
                '}
                '''if (candidates.Count == 0)
                '''{
                '''    var score = 0;
                '''    var molecule = getLipidAnnotaionAsLevel1("LNAPE", LbmClass.LNAPE, totalCarbon, totalDoubleBond, score, "");
                '''    candidates.Add(molecule);
                '''}
                'return LipidMsmsCharacterizationUtility.returnAnnotationResult("LNAPE", LbmClass.LNAPE, "", theoreticalMz, adduct,
                '    totalCarbon, totalDoubleBond, 0, candidates, 2);
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P- is not observed in LNAPE, instead, C3H6O5P is observed.
                Dim threshold = 0.01
                Dim diagnosticMz1 = 196.03803 ' should be a marker of PE
                Dim diagnosticMz2 = 152.995833871
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If Not isClassIon2Found OrElse isClassIon1Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        'if (sn2Carbon < minSnCarbon) { break; }

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, sn1, threshold)
                        If Not isClassIon3Found Then Return Nothing ' sn1 must (2019/10/24)


                        'Console.WriteLine(sn1Carbon + ":" + sn1Double + "/n-" + sn2Carbon + ":" + sn2Double +
                        '    " " + sn1 + " " + nl_SN1);

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 30.0
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getNacylphospholipidMoleculeObjAsLevel2("LNAPE", LbmClass.LNAPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("LNAPE", LbmClass.LNAPE, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LNAPE", LbmClass.LNAPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfSphingomyelin(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = 184.07332
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        If sphCarbon <= 13 Then Continue For
                        If sphCarbon = 16 AndAlso sphDouble >= 3 Then Continue For
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If acylCarbon < 8 Then Continue For


                        Dim sph1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) - diagnosticMz - H2O + 2 * HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("SM", LbmClass.SM, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("SM", LbmClass.SM, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.SM, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -59.0735 [M-C3H9N+Na]+
                Dim threshold = 20.0
                Dim diagnosticMz = theoreticalMz - 59.0735
                ' seek -183.06604 [M-C5H14NO4P+Na]+
                Dim threshold2 = 30.0
                Dim diagnosticMz2 = theoreticalMz - 183.06604
                ' seek -183.06604 [M-C5H16NO5P+H]+
                Dim threshold3 = 1
                Dim diagnosticMz3 = theoreticalMz - 183.06604 - 39.993064

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                'if (isClassIonFound == !true || isClassIon2Found == !true || isClassIon3Found == !true) return null;
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'for (int sphCarbon = minSphCarbon; sphCarbon <= maxSphCarbon; sphCarbon++)
                '{
                '    for (int sphDouble = minSphDoubleBond; sphDouble <= maxSphDoubleBond; sphDouble++)
                '    {
                '        var acylCarbon = totalCarbon - sphCarbon;
                '        //if (acylCarbon < minSphCarbon) { break;  }
                '        var acylDouble = totalDoubleBond - sphDouble;

                '        var sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) 
                '                -  (MassDiffDictionary.HydrogenMass*2) - 22.9898;

                '        var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mass = sph1, Intensity = 0.01 }
                '        };

                '        var foundCount = 0;
                '        var averageIntensity = 0.0;
                '        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                '        if (foundCount == 1)
                '        { // the diagnostic acyl ion must be observed for level 2 annotation
                '            var molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("SM", LbmClass.SM, "d", sphCarbon, sphDouble,
                '                acylCarbon, acylDouble, averageIntensity);
                '            candidates.Add(molecule);
                '        }
                '    }
                '}
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("SM", LbmClass.SM, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.SM, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold1 = 50.0
                Dim threshold2 = 0.01
                Dim diagnosticMz1 = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim diagnosticMz2 = 168.042572 + Electron
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        If acylCarbon < 8 Then Continue For

                        Dim sphFragment = diagnosticMz1 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 0.01
                            }
                        }
                        'if (sphCarbon == 18 && sphDouble == 1 && acylCarbon == 17 && acylDouble == 0) {
                        '    Console.WriteLine("");
                        '}

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("SM", LbmClass.SM, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("SM", LbmClass.SM, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.SM, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSphingomyelinPhyto(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 30.0
                Dim diagnosticMz = 184.07332
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.SM, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold1 = 50.0
                Dim threshold2 = 0.01
                Dim diagnosticMz1 = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim diagnosticMz2 = 168.042572 + Electron
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.SM, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfTriacylglycerol(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond

                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                If sn1Carbon = 18 AndAlso sn1Double = 5 OrElse sn2Carbon = 18 AndAlso sn2Double = 5 OrElse sn3Carbon = 18 AndAlso sn3Double = 5 Then Continue For

                                Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN3,
                                        .Intensity = 5
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("TG", LbmClass.TG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = getLipidAnnotaionAsLevel1("TAG", LbmClass.TAG, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule0);
                '}
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG", LbmClass.TG, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then   'add MT
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim diagnosticMz = theoreticalMz ' - 22.9892207 + MassDiffDictionary.HydrogenMass; //if want to choose [M+H]+
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1,
                                        .Intensity = 0.1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2,
                                        .Intensity = 0.1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN3,
                                        .Intensity = 0.1
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount < 3 Then
                                    Dim diagnosticMzH = theoreticalMz - 22.9892207 + HydrogenMass
                                    Dim nl_SN1_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                    Dim nl_SN2_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                    Dim nl_SN3_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                    Dim query2 = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                            .Mass = nl_SN1_H,
                                            .Intensity = 0.1
                                        },
                                    New SpectrumPeak() With {
                                            .Mass = nl_SN2_H,
                                            .Intensity = 0.1
                                        },
                                    New SpectrumPeak() With {
                                            .Mass = nl_SN3_H,
                                            .Intensity = 0.1
                                        }
                                    }

                                    Dim foundCount2 = 0
                                    Dim averageIntensity2 = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity2)


                                    If foundCount2 = 3 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("TG", LbmClass.TG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity2)
                                        candidates.Add(molecule)
                                    End If
                                ElseIf foundCount = 3 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("TG", LbmClass.TG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = getLipidAnnotaionAsLevel1("TAG", LbmClass.TAG, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule0);
                '}
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG", LbmClass.TG, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        Else

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAcylcarnitine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M]+") Then
                ' seek 85.028405821 (C4H5O2+)
                Dim threshold = 5.0
                Dim diagnosticMz = 85.028405821
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' seek 59.073499294 loss (C3H9N)
                Dim diagnosticMz2 = theoreticalMz - 59.073499294
                Dim threshold2 = 1.0
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)

                ' seek 144.1019 (Acyl and H2O loss) // not found at PasefOn case
                Dim diagnosticMz3 = 144.1019
                Dim threshold3 = 1.0
                Dim isClassIonFound3 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)

                ' acyl fragment // found at PasefOn case (but little bit tight)
                Dim acylFragment = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) - Electron
                Dim threshold4 = 0.1
                Dim isClassIonFound4 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, acylFragment, threshold4)

                ' acyl fragment // found at PasefOn case (but little bit tight)
                Dim threshold5 = 99
                Dim isClassIonFound5 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold5)

                'if (!isClassIonFound) return null;
                If Not isClassIonFound Then
                    If isClassIonFound5 OrElse Not isClassIonFound2 Then Return Nothing
                End If
                If isClassIonFound = False Then
                    If isClassIonFound2 = False OrElse isClassIonFound3 = False Then
                        If isClassIonFound2 = False OrElse isClassIonFound4 = False Then Return Nothing
                    End If
                    If isClassIonFound5 OrElse Not isClassIonFound2 Then Return Nothing
                End If

                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("ACar", LbmClass.ACar, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CAR", LbmClass.CAR, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCholesterylEster(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 369.3515778691 (C27H45+)
                Dim threshold = 30.0
                Dim diagnosticMz = 369.3515778691
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                If totalCarbon >= 41 AndAlso totalDoubleBond >= 4 Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("CE", LbmClass.CE, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CE", LbmClass.CE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek 369.3515778691 (C27H45+)
                Dim threshold = 10.0
                Dim diagnosticMz = 369.3515778691
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                ' if (isClassIonFound == false) return null;

                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("CE", LbmClass.CE, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CE", LbmClass.CE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If

        End If
        Return Nothing
    End Function

    'add MT
    Public Shared Function JudgeIfDag(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If totalCarbon > 52 Then Return Nothing ' currently, very large DAG is excluded.
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn2Double >= 7 Then Continue For

                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                        'Console.WriteLine(sn1Carbon + ":" + sn1Double + "-" + sn2Carbon + ":" + sn2Double + 
                        '    " " + nl_SN1 + " " + nl_SN2);

                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
    .Mass = nl_SN1,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN2,
    .Intensity = 5
}
}
                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                        If foundCount = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getDiacylglycerolMoleculeObjAsLevel2("DG", LbmClass.DG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = getLipidAnnotaionAsLevel1("DAG", LbmClass.DAG, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule0);
                '}
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing


                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DG", LbmClass.DG, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                ''' DG[M+Na]+ is cannot determine acyl chain
                'for (int sn1Carbon = minSn1Carbon; sn1Carbon <= maxSn1Carbon; sn1Carbon++)
                '{
                '    for (int sn1Double = minSn1DoubleBond; sn1Double <= maxSn1DoubleBond; sn1Double++)
                '    {
                '        var diagnosticMz = theoreticalMz;// - 22.9892207 + MassDiffDictionary.HydrogenMass; //to choose [M+H]+;

                '        var sn2Carbon = totalCarbon - sn1Carbon;
                '        var sn2Double = totalDoubleBond - sn1Double;

                '        var nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + MassDiffDictionary.HydrogenMass;
                '        var nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + MassDiffDictionary.HydrogenMass;
                '        var query = new List<SpectrumPeak>
                '        {
                '            new SpectrumPeak() { Mass = nl_SN1, Intensity = 0.1 },
                '            new SpectrumPeak() { Mass = nl_SN2, Intensity = 0.1 },
                '        };
                '        var foundCount = 0;
                '        var averageIntensity = 0.0;
                '        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                '        if (foundCount < 2)
                '        {
                '            var foundCount2 = 0;
                '            var averageIntensity2 = 0.0;
                '            var diagnosticMzH = theoreticalMz - 22.9892207 + MassDiffDictionary.HydrogenMass;
                '            var nl_SN1_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + MassDiffDictionary.HydrogenMass;
                '            var nl_SN2_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + MassDiffDictionary.HydrogenMass;
                '            var query2 = new List<SpectrumPeak>
                '            {
                '            new SpectrumPeak() { Mass = nl_SN1_H, Intensity = 0.1 },
                '            new SpectrumPeak() { Mass = nl_SN2_H, Intensity = 0.1 },
                '            };
                '            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, out foundCount2, out averageIntensity2);
                '            if (foundCount2 == 2)
                '            {
                '                var molecule = LipidMsmsCharacterizationUtility.getDiacylglycerolMoleculeObjAsLevel2("DG", LbmClass.DG, sn1Carbon, sn1Double,
                '            sn2Carbon, sn2Double, averageIntensity2);
                '                candidates.Add(molecule);
                '            }
                '        }
                '        else if (foundCount == 2)
                '        {
                '            var molecule = LipidMsmsCharacterizationUtility.getDiacylglycerolMoleculeObjAsLevel2("DG", LbmClass.DG, sn1Carbon, sn1Double,
                '            sn2Carbon, sn2Double,
                '            averageIntensity);
                '            candidates.Add(molecule);
                '        }
                '    }
                '}
                '''if (candidates == null || candidates.Count == 0)
                '''{
                '''    var score = 0;
                '''    var molecule0 = getLipidAnnotaionAsLevel1("DAG", LbmClass.DAG, totalCarbon, totalDoubleBond, score, "");
                '''    candidates.Add(molecule0);
                '''}

                'if (candidates == null || candidates.Count == 0)
                '    return null;

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DG", LbmClass.DG, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfMag(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 5
                Dim diagnosticMz1 = theoreticalMz - 17.026549
                ' seek dehydroxy
                Dim diagnosticMz2 = diagnosticMz1 - H2O
                ' var isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold);
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                ' if (isClassIon1Found !=true || isClassIon2Found != true) return null;
                If isClassIon2Found <> True Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("MAG", LbmClass.MAG, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MG", LbmClass.MG, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLysopc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPC
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 5.0
                Dim diagnosticMz = 184.07332
                Dim diagnosticMz2 = 104.10699
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found <> True Then Return Nothing

                ' for eieio
                Dim PEHeaderLoss = theoreticalMz - 141.019094261
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeaderLoss, 5.0)
                If isClassIonFound2 AndAlso LipidMsmsCharacterizationUtility.isFragment1GreaterThanFragment2(spectrum, ms2Tolerance, PEHeaderLoss, diagnosticMz) Then
                    Return Nothing
                End If

                'var PEHeader = 141.019094261 + Proton;
                'var isClassIonFound4 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeader, 3.0);
                'if (isClassIonFound4) return null;

                Dim candidates = New List(Of LipidMolecule)()
                Dim chainSuffix = ""
                Dim diagnosticMzExist = 0.0
                Dim diagnosticMzIntensity = 0.0
                Dim diagnosticMzExist2 = 0.0
                Dim diagnosticMzIntensity2 = 0.0

                For i = 0 To spectrum.Count - 1
                    Dim mz = spectrum(i).Mass
                    Dim intensity = spectrum(i).Intensity

                    If intensity > threshold AndAlso Math.Abs(mz - diagnosticMz) < ms2Tolerance Then
                        diagnosticMzExist = mz
                        diagnosticMzIntensity = intensity
                    ElseIf intensity > threshold AndAlso Math.Abs(mz - diagnosticMz2) < ms2Tolerance Then
                        diagnosticMzExist2 = mz
                        diagnosticMzIntensity2 = intensity
                    End If
                Next

                If diagnosticMzIntensity2 / diagnosticMzIntensity > 0.3 Then '
                    chainSuffix = "/0:0"
                End If

                Dim score = 0.0
                If totalCarbon < 30 Then score = score + 1.0
                Dim molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("LPC", LbmClass.LPC, totalCarbon, totalDoubleBond, score, chainSuffix)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC", LbmClass.LPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPC
                ' seek PreCursor - 59 (C3H9N)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 59.072951
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                ' seek 104.1070 (C5H14NO) maybe not found
                'var threshold2 = 1.0;
                'var diagnosticMz2 = 104.1070;

                '
                Dim candidates = New List(Of LipidMolecule)()
                Dim score = 0.0
                If totalCarbon < 30 Then score = score + 1.0
                Dim molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPC", LbmClass.LPC, totalCarbon, totalDoubleBond, score)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC", LbmClass.LPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPC

                ' seek [M-CH3]-
                Dim threshold = 3.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0.0;
                'if (totalCarbon < 30) score = score + 1.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPC", LbmClass.LPC, totalCarbon, totalDoubleBond,
                'score);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC", LbmClass.LPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLysope(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPE

                ' seek PreCursor -141(C2H8NO4P)
                Dim threshold = 3.0
                Dim diagnosticMz = theoreticalMz - 141.019094

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found = False Then Return Nothing
                ' reject EtherPE 
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether)

                        Dim NL_sn1 = diagnosticMz - sn1alkyl + Proton
                        Dim sn1_rearrange = sn1alkyl + HydrogenMass * 2 + 139.0029 'sn1(ether) + C2H5NO4P + proton 

                        Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, NL_sn1, threshold)
                        Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, sn1_rearrange, threshold)
                        If isClassIon2Found = True OrElse isClassIon3Found = True Then Return Nothing
                    Next
                Next


                Dim candidates = New List(Of LipidMolecule)()
                If totalCarbon > 30 Then
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.EtherPE, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond + 1, 0, candidates, 1)
                Else
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE", LbmClass.LPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
                End If
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek PreCursor -141(C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' reject EtherPE 
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether)

                        Dim NL_sn1 = diagnosticMz - sn1alkyl + Proton
                        Dim sn1_rearrange = sn1alkyl + 139.0029 + HydrogenMass * 2 'sn1(ether) + C2H5NO4P + proton 

                        Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, NL_sn1, threshold)
                        Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, sn1_rearrange, threshold)
                        If isClassIon2Found = True OrElse isClassIon3Found = True Then Return Nothing
                    Next
                Next

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0.0;
                'if (totalCarbon < 30) score = score + 1.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPE", LbmClass.LPE, totalCarbon, totalDoubleBond,
                'score);
                'candidates.Add(molecule);
                If totalCarbon > 30 Then
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.EtherPE, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond + 1, 0, candidates, 2)
                Else
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE", LbmClass.LPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
                End If
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPE
                ' seek PreCursor -197(C5H12NO5P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 197.04475958
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                '
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0.0;
                'if (totalCarbon < 30) score = score + 1.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPE", LbmClass.LPE, totalCarbon, totalDoubleBond,
                'score);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE", LbmClass.LPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherpc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = 184.07332
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("PC", LbmClass.EtherPC, totalCarbon,
                '                totalDoubleBond, averageIntensity, "e");
                'candidates.Add(molecule);
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim acylLoss = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = acylLoss,
                                .Intensity = 0.1
                            }
                         }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PC", LbmClass.EtherPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.EtherPC, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek PreCursor - 59 (C3H9N)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 59.072951
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing  ' must or not?

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("PC", LbmClass.EtherPC, totalCarbon,
                '                totalDoubleBond, averageIntensity, "e");
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.EtherPC, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If Not isClassIonFound Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim formateMz = theoreticalMz - 60.021129369
                    Dim threshold2 = 30
                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, formateMz, threshold2)
                    If isClassIonFound2 Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim NL_sn2 = diagnosticMz - sn2 - Proton
                        Dim NL_sn2AndWater = NL_sn2 + 18.0105642

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 30.0
                            }
                            'new SpectrumPeak() { Mass = NL_sn2, Intensity = 0.1 },
                            'new SpectrumPeak() { Mass = NL_sn2AndWater, Intensity = 0.1 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PC", LbmClass.EtherPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing


                'if (candidates.Count == 0)
                '{
                '    var score = 0.0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("PC", LbmClass.EtherPC, totalCarbon,
                '                    totalDoubleBond, score, "e");
                '    candidates.Add(molecule0);
                '};
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.EtherPC, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherpe(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -141.019094261 (C2H8NO4P)
                Dim threshold = 0.5
                Dim diagnosticMz = theoreticalMz - 141.019094261
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double >= 5 Then Continue For
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(carbon chain)

                        Dim NL_sn1 = diagnosticMz - sn1alkyl + Proton
                        Dim sn1_rearrange = sn1alkyl + 139.0029 + HydrogenMass * 2 'sn1(carbon chain) + C2H5NO4P + proton 

                        'Console.WriteLine(sn1Carbon + ":" + sn1Double + "e/" + sn2Carbon + ":" + sn2Double + " " + NL_sn1 + " " + sn1_rearrange);

                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = NL_sn1,
                                .Intensity = 1
                            },
                                New SpectrumPeak() With {
                                .Mass = sn1_rearrange,
                                .Intensity = 5
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level

                            Dim etherSuffix = "e"
                            Dim sn1Double2 = sn1Double
                            If sn1Double > 0 Then
                                sn1Double2 = sn1Double - 1
                                etherSuffix = "p"
                            End If

                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PE", LbmClass.EtherPE, sn1Carbon, sn1Double2, sn2Carbon, sn2Double, averageIntensity, etherSuffix)
                            candidates.Add(molecule)
                        End If
                        'else {
                        '    var sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron;
                        '    query = new List<SpectrumPeak> {
                        '        new SpectrumPeak() { Mass = sn2, Intensity = 0.1 }
                        '    };

                        '    foundCount = 0;
                        '    averageIntensity = 0.0;
                        '    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                        '    if (foundCount == 1) {
                        '        var molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PE", LbmClass.EtherPE, sn1Carbon, sn1Double,
                        '        sn2Carbon, sn2Double, averageIntensity, "e");
                        '        candidates.Add(molecule);
                        '    }
                        '}
                    Next
                Next
                'if (candidates.Count == 0)
                '{
                '    var score = 0.0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("PE", LbmClass.EtherPE, totalCarbon,
                '                    totalDoubleBond, score, "e");
                '    candidates.Add(molecule0);
                '};

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.EtherPE, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P-
                Dim threshold = 5.0
                Dim diagnosticMz = 196.03803
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon >= 24 AndAlso sn1Double >= 5 Then Return Nothing

                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim NL_sn2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 10.0
                            },
                        New SpectrumPeak() With {
                                .Mass = NL_sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PE", LbmClass.EtherPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If candidates.Count = 0 Then Return Nothing
                'if (candidates.Count == 0)
                '{
                '    var score = 0.0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("PE", LbmClass.EtherPE, totalCarbon,
                '                    totalDoubleBond, score, "e");
                '    candidates.Add(molecule0);
                '};

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.EtherPE, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtheroxpc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then '  
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                ' if (isClassIon2Found == false) return null;

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim formateMz = theoreticalMz - 60.021129369
                    Dim threshold3 = 30
                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, formateMz, threshold3)
                    If isClassIonFound2 Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double > 0 Then
                            If sn1Carbon / sn1Double < 3 Then Exit For
                        End If

                        For sn1Oxidized = 0 To sn1MaxOxidized
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized

                            If sn2Double > 0 Then
                                If sn2Carbon / sn2Double < 3 Then Exit For
                            End If

                            ' ether chain loss is not found
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * sn2Oxidized
                            Dim nl_sn2 = diagnosticMz - sn2 - Proton
                            Dim nl_sn2H2O = nl_sn2 + 18.0105642

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = nl_sn2,
                                    .Intensity = 0.1
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                                    'new SpectrumPeak() { Mass = NL_sn2, Intensity = 0.1 },
                                    'new SpectrumPeak() { Mass = NL_sn2H2O, Intensity = 0.1 }
                                }
                                    Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount >= 1 Then ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getEtherOxPxMoleculeObjAsLevel2("PC", LbmClass.EtherOxPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity, "e")
                                    candidates.Add(molecule)
                                End If
                            End If
                        Next
                    Next
                Next
                If isClassIon2Found = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.EtherOxPC, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtheroxpe(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then '  
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P-
                Dim threshold = 5.0
                Dim diagnosticMz = 196.03803
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = False Then Return Nothing

                Dim threshold3 = 5.0
                Dim diagnosticMz3 = 152.995833871 ' seek C3H6O5P- maybe LNAPE
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                'if (isClassIon3Found == true) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double > 0 Then
                            If sn1Carbon / sn1Double < 3 Then Exit For
                        End If

                        For sn1Oxidized = 0 To sn1MaxOxidized
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized

                            If sn2Double > 0 Then
                                If sn2Carbon / sn2Double < 3 Then Exit For
                            End If

                            ' ether chain loss is not found
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * sn2Oxidized
                            Dim nl_sn2 = theoreticalMz - sn2 - Proton
                            Dim nl_sn2AndWater = nl_sn2 + 18.0105642

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = nl_sn2,
                                    .Intensity = 0.1
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                                    'new SpectrumPeak() { Mass = nl_sn2, Intensity = 0.1 },
                                    'new SpectrumPeak() { Mass = nl_sn2AndWater, Intensity = 0.1 }
                                }

                                    Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount >= 1 Then ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getEtherOxPxMoleculeObjAsLevel2("PE", LbmClass.EtherOxPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity, "e")
                                    candidates.Add(molecule)
                                End If
                            End If
                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.EtherOxPE, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function




    Public Shared Function JudgeIfEtherlysopc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P), 104.10699 (C5H12N+), 124.99982 (C2H5O4P + H+)
                Dim threshold = 20.0
                Dim diagnosticMz1 = 184.07332
                Dim diagnosticMz2 = 104.10699
                Dim diagnosticMz3 = 124.99982

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                If Not isClassIon1Found Then Return Nothing
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold);
                'var isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold);
                'if (isClassIon2Found != true || isClassIon3Found != true) return null;
                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("LPC", LbmClass.EtherLPC, totalCarbon,
                '                totalDoubleBond, averageIntensity, "e");
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC", LbmClass.EtherLPC, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim diagnosticMz2 = diagnosticMz - 89.08461258 '[M-CH3 -C4H11NO]-
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("LPC", LbmClass.EtherLPC, totalCarbon,
                '                totalDoubleBond, averageIntensity, "e");
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC", LbmClass.EtherLPC, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherlysope(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim EtherFrag = "e"
                ' case LPE P-
                ' seek PreCursor -154
                Dim threshold = 5.0
                Dim diagnosticMz = theoreticalMz - (12 * 3 + PhosphorusMass + OxygenMass * 5 + HydrogenMass * 7)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                ' seek PreCursor -172
                Dim threshold2 = 50.0
                Dim diagnosticMz2 = diagnosticMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)

                ' case LPE O-
                ' seek precursor -43
                Dim diagnosticMz3 = theoreticalMz - (12 * 2 + NitrogenMass + HydrogenMass * 5)
                Dim threshold3 = 5.0
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                ' seek precursor -141
                Dim diagnosticMz4 = theoreticalMz - (12 * 2 + HydrogenMass * 8 + NitrogenMass + OxygenMass * 4 + PhosphorusMass)
                Dim threshold4 = 5.0
                Dim isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4)

                If isClassIon1Found = False AndAlso isClassIon2Found = False Then
                    If isClassIon3Found = False AndAlso isClassIon4Found = False Then
                        Return Nothing
                    End If
                End If
                '
                If isClassIon1Found OrElse isClassIon2Found Then
                    EtherFrag = "p"
                End If

                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("LPE", LbmClass.EtherLPE, totalCarbon,
                '                totalDoubleBond, averageIntensity, "e");
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE", LbmClass.EtherLPE, EtherFrag, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek PreCursor -197(C5H12NO5P-) , -61(C2H8NO-)
                Dim threshold = 10.0
                Dim diagnosticMz1 = theoreticalMz - 197.0447624
                Dim diagnosticMz2 = theoreticalMz - 61.052764
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found = False AndAlso isClassIon2Found = False Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("LPE", LbmClass.EtherLPE, totalCarbon,
                '               totalDoubleBond, averageIntensity, "e");
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE", LbmClass.EtherLPE, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfOxpc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then '  
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim formateMz = theoreticalMz - 60.021129369
                    Dim threshold4 = 30
                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, formateMz, threshold4)
                    If isClassIonFound2 Then Return Nothing
                End If

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                ' if (isClassIon2Found == false) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        For sn1Oxidized = 0 To sn1MaxOxidized
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            ' if (sn2Carbon < minSnCarbon) { break; }
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized

                            Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double) + OxygenMass * sn1Oxidized
                            Dim sn1_H2Oloss = sn1 - H2O
                            Dim sn1_xH2Oloss = sn1 - H2O * Math.Min(sn1Oxidized, 2)
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * Math.Min(TotalOxidized - sn1Oxidized, 2)

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = sn1,
                                    .Intensity = 10
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                            }

                                Dim foundCount2 = 0
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount2 >= 1 Then  ' 4 or 5
                                    ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("PC", LbmClass.OxPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity2)
                                    candidates.Add(molecule)
                                End If
                            End If
                        Next
                    Next
                Next
                If isClassIon2Found = False AndAlso candidates.Count = 0 Then Return Nothing

                'var score = 0;
                'var molecule0 = getOxydizedPhospholipidMoleculeObjAsLevel1("OxPC", LbmClass.OxPC, totalCarbon, totalDoubleBond, TotalOxidized, score);
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC", LbmClass.OxPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfOxpe(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then ' 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P-
                Dim threshold = 0.1
                Dim diagnosticMz = 196.03803
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                'if (isClassIonFound == false && isClassIon2Found == false) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double > 0 Then
                            If sn1Carbon / sn1Double < 3 Then Exit For
                        End If

                        For sn1Oxidized = 0 To sn1MaxOxidized
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            '  if (sn2Carbon < minSnCarbon) { break; }
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized
                            If sn2Double > 0 Then
                                If sn2Carbon / sn2Double < 3 Then Exit For
                            End If
                            Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double) + OxygenMass * sn1Oxidized
                            Dim sn1_H2Oloss = sn1 - H2O
                            Dim sn1_xH2Oloss = sn1 - H2O * Math.Min(sn1Oxidized, 2)
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * Math.Min(TotalOxidized - sn1Oxidized, 2)

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = sn1,
                                    .Intensity = 10
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                            }

                                Dim foundCount2 = 0
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount2 >= 1 Then  ' 4 or 5
                                    ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("PE", LbmClass.OxPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity2)
                                    candidates.Add(molecule)
                                End If
                            End If

                            'var query = new List<SpectrumPeak> {
                            '    new SpectrumPeak() { Mass = sn1, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_xH2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_xH2Oloss, Intensity = 0.1 }
                            '};

                            'var foundCount = 0;
                            'var averageIntensity = 0.0;
                            'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                            'if (foundCount >= 4)
                            '{ // 
                            '    var molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("OxPE", LbmClass.OxPE, sn1Carbon, sn1Double,
                            '        sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity);
                            '    candidates.Add(molecule);
                            '}
                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                'var score = 0;
                'var molecule0 = getOxydizedPhospholipidMoleculeObjAsLevel1("OxPE", LbmClass.OxPE, totalCarbon, totalDoubleBond, TotalOxidized, score);
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE", LbmClass.OxPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfOxpg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then ' 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-
                Dim threshold = 0.01
                Dim diagnosticMz = 152.995833871
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                'if (isClassIonFound == false) return null;

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = False Then Return Nothing

                Dim threshold1 = 50.0
                Dim diagnosticMzSm1 = theoreticalMz - 74.036779433
                Dim diagnosticMzSm2 = theoreticalMz - 60.021129369
                Dim isClassIonSm1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMzSm1, threshold1)
                Dim isClassIonSm2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMzSm2, threshold1)
                If isClassIonSm1Found = True OrElse isClassIonSm2Found = True Then Return Nothing


                ' from here, acyl level annotation is executed.
                ' because correct MS2 data is not annotated, only calculation is presented
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        For sn1Oxidized = 0 To sn1MaxOxidized
                            'int sn1Oxidized = 0;
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            'if (sn2Carbon < minSnCarbon) { break; }
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized

                            Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double) + OxygenMass * sn1Oxidized
                            Dim sn1_H2Oloss = sn1 - H2O
                            Dim sn1_xH2Oloss = sn1 - H2O * Math.Min(sn1Oxidized, 2)
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * Math.Min(TotalOxidized - sn1Oxidized, 2)

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = sn1,
                                    .Intensity = 10
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                            }

                                Dim foundCount2 = 0
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount2 >= 1 Then  ' 4 or 5
                                    ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("PG", LbmClass.OxPG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity2)
                                    candidates.Add(molecule)
                                End If
                            End If

                            'var query = new List<SpectrumPeak> {
                            '    new SpectrumPeak() { Mass = sn1, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_xH2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_xH2Oloss, Intensity = 0.1 }
                            '};

                            'var foundCount = 0;
                            'var averageIntensity = 0.0;
                            'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                            'if (foundCount >= 4)
                            '{ // 
                            '    var molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("OxPG", LbmClass.OxPG, sn1Carbon, sn1Double,
                            '        sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity);
                            '    candidates.Add(molecule);
                            '}
                            '}
                        Next
                    Next
                Next

                'var score = 0;
                'var molecule0 = getOxydizedPhospholipidMoleculeObjAsLevel1("OxPG", LbmClass.OxPG, totalCarbon, totalDoubleBond, TotalOxidized, score);
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG", LbmClass.OxPG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfOxpi(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then ' 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 241.01188(C6H10O8P-) and 297.037548(C9H14O9P-)
                Dim threshold = 0.01
                Dim diagnosticMz1 = 241.01188 + Electron
                Dim diagnosticMz2 = 297.037548 + Electron
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If Not isClassIon1Found AndAlso Not isClassIon2Found Then Return Nothing

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz3 = theoreticalMz - H2O
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold2)
                'if (isClassIon3Found == false) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        For sn1Oxidized = 0 To sn1MaxOxidized
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            'if (sn2Carbon < minSnCarbon) { break; }
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized

                            Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double) + OxygenMass * sn1Oxidized
                            Dim sn1_H2Oloss = sn1 - H2O
                            Dim sn1_xH2Oloss = sn1 - H2O * Math.Min(sn1Oxidized, 2)
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * Math.Min(TotalOxidized - sn1Oxidized, 2)

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = sn1,
                                    .Intensity = 10
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                            }

                                Dim foundCount2 = 0
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount2 >= 1 Then  ' 4 or 5
                                    ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("PI", LbmClass.OxPI, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity2)
                                    candidates.Add(molecule)
                                End If
                            End If

                            'var query = new List<SpectrumPeak> {
                            '    new SpectrumPeak() { Mass = sn1, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_xH2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_xH2Oloss, Intensity = 0.1 }
                            '};

                            'var foundCount = 0;
                            'var averageIntensity = 0.0;
                            'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                            'if (foundCount >= 4)
                            '{ // 
                            '    var molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("OxPI", LbmClass.OxPI, sn1Carbon, sn1Double,
                            '        sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity);
                            '    candidates.Add(molecule);
                            '}
                        Next
                    Next
                Next

                'var score = 0;
                'var molecule0 = getOxydizedPhospholipidMoleculeObjAsLevel1("OxPI", LbmClass.OxPI, totalCarbon, totalDoubleBond, TotalOxidized, score);
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI", LbmClass.OxPI, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfOxps(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal TotalOxidized As Integer, ByVal sn1MaxOxidized As Integer, ByVal sn2MaxOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If sn1MaxOxidized > TotalOxidized Then sn1MaxOxidized = TotalOxidized
        If sn2MaxOxidized > TotalOxidized Then sn2MaxOxidized = TotalOxidized

        If adduct.IonMode = IonMode.Negative Then ' 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H5NO2 loss
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 87.032029
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' seek [M-H-H2O]-
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                'if (isClassIon2Found == false) return null;

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        For sn1Oxidized = 0 To sn1MaxOxidized
                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            ' if (sn2Carbon < minSnCarbon) { break; }
                            Dim sn2Double = totalDoubleBond - sn1Double
                            Dim sn2Oxidized = TotalOxidized - sn1Oxidized

                            Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double) + OxygenMass * sn1Oxidized
                            Dim sn1_H2Oloss = sn1 - H2O
                            Dim sn1_xH2Oloss = sn1 - H2O * Math.Min(sn1Oxidized, 2)
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + OxygenMass * sn2Oxidized
                            Dim sn2_H2Oloss = sn2 - H2O
                            Dim sn2_xH2Oloss = sn2 - H2O * Math.Min(TotalOxidized - sn1Oxidized, 2)

                            Dim query1 = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = sn1,
                                    .Intensity = 10
                                }
                            }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                            If foundCount1 = 1 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_H2Oloss,
                                        .Intensity = 0.1
                                    },
                                New SpectrumPeak() With {
                                        .Mass = sn2_xH2Oloss,
                                        .Intensity = 0.1
                                    }
                            }

                                Dim foundCount2 = 0
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount2 >= 1 Then  ' 4 or 5
                                    ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("PS", LbmClass.OxPS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity2)
                                    candidates.Add(molecule)
                                End If
                            End If

                            'var query = new List<SpectrumPeak> {
                            '    new SpectrumPeak() { Mass = sn1, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_H2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn1_xH2Oloss, Intensity = 0.1 },
                            '    new SpectrumPeak() { Mass = sn2_xH2Oloss, Intensity = 0.1 }
                            '};

                            'var foundCount = 0;
                            'var averageIntensity = 0.0;
                            'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                            'if (foundCount >= 4)
                            '{ // 
                            '    var molecule = LipidMsmsCharacterizationUtility.getOxydizedPhospholipidMoleculeObjAsLevel2("OxPS", LbmClass.OxPS, sn1Carbon, sn1Double,
                            '        sn2Carbon, sn2Double, sn1Oxidized, sn2Oxidized, averageIntensity);
                            '    candidates.Add(molecule);
                            '}
                        Next
                    Next
                Next

                'var score = 0;
                'var molecule0 = getOxydizedPhospholipidMoleculeObjAsLevel1("OxPS", LbmClass.OxPS, totalCarbon, totalDoubleBond, TotalOxidized, score);
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS", LbmClass.OxPS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function



    Public Shared Function JudgeIfMgdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek [M+H-C6H12O6]+
                Dim threshold = 10
                Dim diagnosticMz = theoreticalMz - (NitrogenMass + HydrogenMass * 3) - (12 * 6 + HydrogenMass * 12 + OxygenMass * 6)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - 179.05611 - 17.026549
                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - 179.05611 - 17.026549

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 10
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("MGDG", LbmClass.MGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGDG", LbmClass.MGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
            If Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + Proton
                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then
                            'reject DGDG
                            Dim threshold = 0.1
                            Dim dgdgFrg = nl_SN1 - 162.05282 ' one Hex loss
                            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, dgdgFrg, threshold)
                            If isClassIonFound = True Then Return Nothing

                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("MGDG", LbmClass.MGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGDG", LbmClass.MGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 1.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = diagnosticMz - 162.052833
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                'if (isClassIonFound == false) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("MGDG", LbmClass.MGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGDG", LbmClass.MGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDgdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                ' exclude unknown element
                Dim isPeakFound = LipidMsmsCharacterizationUtility.isPeakFoundWithACritetion(spectrum, theoreticalMz - 202, theoreticalMz - 200, 50.0)
                If isPeakFound Then Return Nothing

                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        ' if (sn2Carbon < minSnCarbon) { break; }
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon <= 10 OrElse sn2Carbon <= 10 Then Return Nothing
                        ' 2 x Hex loss
                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - 341.108935 - 17.026549
                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - 341.108935 - 17.026549
                        Dim nl_SN1_H2O = nl_SN1 - H2O
                        Dim nl_SN2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2_H2O,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGDG", LbmClass.DGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGDG", LbmClass.DGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
            If Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + Proton
                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGDG", LbmClass.DGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGDG", LbmClass.DGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-H]-
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                Dim diagnosticMz2 = 379.12459 ' C15H23O11
                Dim diagnosticMz3 = 397.13515 ' C15H25O12
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If isClassIonFound = Not True OrElse isClassIon2Found = Not True OrElse isClassIon3Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGDG", LbmClass.DGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGDG", LbmClass.DGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEthermgdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek [M+H-C6H12O6]+
                Dim threshold = 5
                Dim diagnosticMz = theoreticalMz - (NitrogenMass + HydrogenMass * 3) - (12 * 6 + HydrogenMass * 12 + OxygenMass * 6)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon >= 26 AndAlso sn1Double >= 4 Then Return Nothing
                        If sn1Double >= 5 Then Continue For


                        'var sn1alkyl = (MassDiffDictionary.CarbonMass * sn1Carbon)
                        '+ (MassDiffDictionary.HydrogenMass * ((sn1Carbon * 2) - (sn1Double * 2) + 1));//sn1(ether (not containing oxygen))

                        'var nl_SN1 = diagnosticMz - sn1alkyl + Proton;

                        Dim sn2Dmag = 12 * (sn2Carbon + 3) + HydrogenMass * (sn2Carbon * 2 - sn2Double * 2 - 1 + 5) + 3 * OxygenMass + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn2Dmag,
                                .Intensity = 30
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("MGDG", LbmClass.EtherMGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGDG", LbmClass.EtherMGDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
            If Equals(adduct.AdductIonName, "[M+Na]+") Then
                Dim threshold = 1
                Dim diagnosticMz = theoreticalMz - 202.04533 ' - Hex and Na
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Carbon >= 26 AndAlso sn1Double >= 4 Then Return Nothing

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether (not containing oxygen))
                        Dim nl_SN1 = diagnosticMz - sn1alkyl + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("MGDG", LbmClass.EtherMGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGDG", LbmClass.EtherMGDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-H]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' 
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Carbon >= 26 AndAlso sn1Double >= 4 Then Return Nothing
                        If sn1Double >= 5 Then Continue For

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim NL_sn2 = 12 * (sn1Carbon + 3 + 6) + HydrogenMass * (2 * (sn1Carbon + 3 - sn1Double) + 11) + OxygenMass * 8

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 10.0
                            },
                        New SpectrumPeak() With {
                                .Mass = NL_sn2,
                                .Intensity = 5.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("MGDG", LbmClass.EtherMGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGDG", LbmClass.EtherMGDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfMgmg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek [M+H-C6H12O6]+
                Dim threshold = 10
                Dim diagnosticMz = theoreticalMz - (NitrogenMass + HydrogenMass * 3) - (12 * 6 + HydrogenMass * 12 + OxygenMass * 6)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' seek SN1+
                Dim threshold1 = 1
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) - Electron
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGMG", LbmClass.MGMG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-H]-
                Dim threshold = 1.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                'if (isClassIonFound == false) return null;

                ' seek SN1-
                Dim threshold1 = 10
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MGMG", LbmClass.MGMG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDgmg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                ' exclude unknown element
                ' seek [M+H]+ -2sugars -H2O
                Dim threshold = 10
                Dim diagnosticMz1 = theoreticalMz - (NitrogenMass + HydrogenMass * 3) - (12 * 12 + HydrogenMass * 20 + OxygenMass * 10) - H2O
                ' seek SN1(acyl)+
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) - Electron

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found = False OrElse isClassIon2Found = False Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGMG", LbmClass.DGMG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-H]-
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                Dim diagnosticMz2 = 397.13515 ' C15H25O12
                Dim diagnosticMz3 = diagnosticMz2 + H2O ' C15H27O13
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If isClassIon2Found = Not True OrElse isClassIon3Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                ' seek SN1-
                Dim threshold1 = 10
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGMG", LbmClass.DGMG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfEtherDAG(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    If sn1Carbon < 8 Then Continue For
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double > 3 Then Continue For
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn2Double >= 7 Then Continue For
                        If sn2Carbon <= 10 Then Continue For
                        If sn1Carbon <= 10 Then Continue For
                        If sn1Double = 19 AndAlso sn1Double = 2 Then Continue For

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + OxygenMass - NitrogenMass - H2O - 4.0 * HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 80
                            }
                        }

                        'Console.WriteLine("Molecule {0}, Diagnostic m/z {1}", "DAG " + sn1Carbon + ":" + sn1Double + "e/" + sn2Carbon + ":" + sn2Double, nl_SN1);


                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("DG", LbmClass.EtherDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DG", LbmClass.EtherDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherdgdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then ' not found in lipidDbProject-Pos
                ' seek -17.026549 (NH3)
                Dim diagnosticMz = theoreticalMz - 17.026549

                ' seek [M -C12H21O11 +H] (-2Hex as 341.10838)  
                Dim threshold = 5
                Dim diagnosticMz2 = diagnosticMz - (12 * 12 + HydrogenMass * 21 + OxygenMass * 11) + Proton
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    If sn1Carbon < 10 Then Continue For
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn2Carbon < 10 Then Continue For

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether (not containing oxygen))

                        Dim nl_SN1 = diagnosticMz - sn1alkyl + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("DGDG", LbmClass.EtherDGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGDG", LbmClass.EtherDGDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
            If Equals(adduct.AdductIonName, "[M+Na]+") Then ' not found in lipidDbProject-Pos
                Dim threshold = 1
                Dim diagnosticMz = theoreticalMz - 341.10838 - 22.9892207 + Proton ' - 2Hex and Na
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    If sn1Carbon < 8 Then Continue For
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        If sn2Carbon < 8 Then Continue For

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether (not containing oxygen))
                        Dim nl_SN1 = diagnosticMz - sn1alkyl + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("DGDG", LbmClass.EtherDGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGDG", LbmClass.EtherDGDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-H]-  // not found in lipidDbProject-Neg
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' 
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    If sn1Carbon < 10 Then Continue For
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn2Carbon < 10 Then Continue For

                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim NL_sn2 = 12 * (sn1Carbon + 3 + 12) + HydrogenMass * (2 * (sn1Carbon + 3 - sn1Double) + 21) + OxygenMass * 13

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 10.0
                            },
                            New SpectrumPeak() With {
                                .Mass = NL_sn2,
                                .Intensity = 5.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("DGDG", LbmClass.EtherDGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGDG", LbmClass.EtherDGDG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfPhosphatidicacid(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-
                Dim threshold = 1.0
                Dim diagnosticMz = 152.99583
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.01
                            }
                        'new SpectrumPeak() { Mass = nl_SN1, Intensity = 0.01 },
                        'new SpectrumPeak() { Mass = nl_SN1_H2O, Intensity = 0.01 },
                        'new SpectrumPeak() { Mass = nl_SN2, Intensity = 0.01 },
                        'new SpectrumPeak() { Mass = nl_NS2_H2O, Intensity = 0.01 }
                        }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PA", LbmClass.PA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                        'else
                        '{
                        '    var score = 0;
                        '    var molecule = getLipidAnnotaionAsLevel1("PA", LbmClass.PA, totalCarbon, totalDoubleBond, score, "");
                        '    candidates.Add(molecule);

                        '}
                    Next
                Next

                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PA", LbmClass.PA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLysopa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-
                Dim threshold = 1.0
                Dim diagnosticMz = 152.99583
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' seek FA- fragment 
                'var threshold2 = 10;
                'var diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon,totalDoubleBond);
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'if (isClassIon2Found == true) return null;

                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                        .Mass = 255.2329539,
                        .Intensity = 5
                    },    ' 16:0
                                    New SpectrumPeak() With {
                        .Mass = 283.264254,
                        .Intensity = 5
                    },     ' 18:0
                                    New SpectrumPeak() With {
                        .Mass = 281.2486039,
                        .Intensity = 5
                    },    ' 18:1 
                                    New SpectrumPeak() With {
                        .Mass = 279.2329539,
                        .Intensity = 5
                    },     ' 18:2
                                    New SpectrumPeak() With {
                        .Mass = 277.2173038,
                        .Intensity = 5
                    },     ' 18:3,
                                    New SpectrumPeak() With {
                        .Mass = 303.2329539,
                        .Intensity = 5
                    },     ' 20:4,
                                    New SpectrumPeak() With {
                        .Mass = 327.2329539,
                        .Intensity = 5
                    }     ' 22:6,
                                }

                Dim foundCount = 0
                Dim averageIntensity = 0.0
                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                If foundCount >= 1 Then ' Need to consider
                    ' 
                    Return Nothing
                End If

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPA", LbmClass.LPA, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPA", LbmClass.LPA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLysopg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-

                Dim diagnosticMz1 = 152.99583  ' seek C3H6O5P-
                Dim threshold1 = 1.0
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) ' seek [FA-H]-
                Dim threshold2 = 10.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPG", LbmClass.LPG, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPG", LbmClass.LPG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek Header loss (MG+ + chain Acyl) 
                Dim threshold = 5.0
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + (12 * 3 + HydrogenMass * 5 + OxygenMass * 2) + ProtonMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPG", LbmClass.LPG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If

        Return Nothing
    End Function

    Public Shared Function JudgeIfLysopi(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-

                Dim diagnosticMz1 = 241.0118806 + Electron  ' seek C3H6O5P-
                Dim threshold1 = 1.0
                Dim diagnosticMz2 = 315.048656 ' seek C9H16O10P-
                Dim threshold2 = 1.0
                Dim diagnosticMz3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) ' seek [FA-H]-
                Dim threshold3 = 10.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True OrElse isClassIon3Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPI", LbmClass.LPI, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPI", LbmClass.LPI, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek Header loss (MG+ + chain Acyl) 
                Dim threshold = 5.0
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + (12 * 3 + HydrogenMass * 5 + OxygenMass * 2) + ProtonMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPI", LbmClass.LPI, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfLysops(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-

                Dim diagnosticMz1 = 152.99583  ' seek C3H6O5P-
                Dim threshold1 = 10.0
                Dim diagnosticMz2 = theoreticalMz - 87.032029 ' seek -C3H6NO2-H
                Dim threshold2 = 5.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPS", LbmClass.LPS, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPS", LbmClass.LPS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek Header loss (MG+ + chain Acyl) 
                Dim threshold = 5.0
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + (12 * 3 + HydrogenMass * 5 + OxygenMass * 2) + ProtonMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPS", LbmClass.LPS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfEthertag(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether chain (not containing oxygen))
                                Dim nl_SN1 = diagnosticMz - sn1alkyl - H2O + Proton
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + Proton
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + Proton
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN3,
                                        .Intensity = 5
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then ' Need to consider
                                    ' 
                                    Dim molecule2 = LipidMsmsCharacterizationUtility.getEthertagMoleculeObjAsLevel2("TG", LbmClass.EtherTG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule2)
                                End If
                            Next
                        Next

                    Next
                Next

                'var score = 0;
                'var molecule = getLipidAnnotaionAsLevel1("TAG", LbmClass.EtherTAG, totalCarbon, totalDoubleBond, score, "e");
                'candidates.Add(molecule);

                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG", LbmClass.EtherTG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' 
                'var candidates = new List<LipidMolecule>();
                '''var score = 0;
                '''var molecule = getLipidAnnotaionAsLevel1("TAG", LbmClass.EtherTAG, totalCarbon, totalDoubleBond, score, "e");
                '''candidates.Add(molecule);

                'return LipidMsmsCharacterizationUtility.returnAnnotationResult("TAG", LbmClass.EtherTAG, "e", theoreticalMz, adduct,
                '        totalCarbon, totalDoubleBond, 0, candidates);


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond

                        Dim diagnosticMz = theoreticalMz ' - 22.9892207 + MassDiffDictionary.HydrogenMass; //if want to choose [M+H]+
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                'var nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + MassDiffDictionary.HydrogenMass;
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                Dim query = New List(Of SpectrumPeak) From {
                                        'new SpectrumPeak() { Mass = nl_SN1, Intensity = 0.1 },
                                        New SpectrumPeak() With {
                                            .Mass = nl_SN2,
                                            .Intensity = 1
                                        },
                                        New SpectrumPeak() With {
                                            .Mass = nl_SN3,
                                            .Intensity = 1
                                        }
                                    }

                                    Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount < 2 Then
                                    Dim diagnosticMzH = theoreticalMz - 22.9892207 + HydrogenMass
                                    'var nl_SN1_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + MassDiffDictionary.HydrogenMass;
                                    Dim nl_SN2_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                    Dim nl_SN3_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                    Dim query2 = New List(Of SpectrumPeak) From {
                                            'new SpectrumPeak() { Mass = nl_SN1_H, Intensity = 0.1 },
                                            New SpectrumPeak() With {
                                                .Mass = nl_SN2_H,
                                                .Intensity = 0.1
                                            },
                                            New SpectrumPeak() With {
                                                .Mass = nl_SN3_H,
                                                .Intensity = 0.1
                                            }
                                            }

                                        Dim foundCount2 = 0
                                    Dim averageIntensity2 = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity2)


                                    If foundCount2 = 2 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getEthertagMoleculeObjAsLevel2("TG", LbmClass.EtherTG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity2)
                                        candidates.Add(molecule)
                                    End If
                                ElseIf foundCount = 2 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getEthertagMoleculeObjAsLevel2("TG", LbmClass.EtherTG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = getLipidAnnotaionAsLevel1("TAG", LbmClass.TAG, totalCarbon, totalDoubleBond, score, "");
                '    candidates.Add(molecule0);
                '}
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG", LbmClass.EtherTG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDgts(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 144.10191 (C7H14NO2+)
                Dim threshold = 1.0
                Dim diagnosticMz = 144.10191
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                'if (isClassIonFound == false) return null;
                ' seek 236.1492492 (C10H21NO5H +)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = 236.1492492
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGTS", LbmClass.DGTS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("DGTS", LbmClass.DGTS, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGTS", LbmClass.DGTS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -87 (-C4H9NO)
                Dim threshold1 = 50.0
                Dim diagnosticMz1 = theoreticalMz - (12 * 4 + HydrogenMass * 9 + NitrogenMass + OxygenMass)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing
                ' seek 236.1492492 (C10H21NO5H +)
                Dim threshold2 = 0.01
                Dim diagnosticMz2 = 236.1492492
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz1 - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - HydrogenMass - OxygenMass

                        Dim nl_SN2 = diagnosticMz1 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - HydrogenMass - OxygenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGTS", LbmClass.DGTS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGTS", LbmClass.DGTS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        ElseIf adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]- 
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                'seek [M-C3H5]-
                Dim threshold = 10.0
                Dim diagnosticMz2 = diagnosticMz - 12 * 3 - HydrogenMass * 5
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim SN1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim SN2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGTS", LbmClass.DGTS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGTS", LbmClass.DGTS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function



    Public Shared Function JudgeIfLdgts(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 144.10191 (C7H14NO2+)
                Dim threshold = 1.0
                Dim diagnosticMz = 144.10191
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                'if (isClassIonFound == false) return null;
                ' seek 236.1492492 (C10H21NO5H +)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = 236.1492492
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LDGTS", LbmClass.LDGTS, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LDGTS", LbmClass.LDGTS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -87 (-C4H9NO)
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = theoreticalMz - (12 * 4 + HydrogenMass * 9 + NitrogenMass + OxygenMass)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing
                ' seek 236.1492492 (C10H21NO5H +)
                Dim threshold2 = 0.01
                Dim diagnosticMz2 = 236.1492492
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'if (isClassIon2Found == false) return null;

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LDGTS", LbmClass.LDGTS, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LDGTS", LbmClass.LDGTS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        ElseIf adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]- 
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 60.02167792, theoreticalMz - 46.00602785)
                'seek [M-C3H5]-
                Dim threshold = 50.0
                Dim diagnosticMz2 = diagnosticMz - 12 * 3 - HydrogenMass * 5
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIonFound = False Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim SN1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = SN1,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LDGTS", LbmClass.LDGTS, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
                        End If
                    Next
                Next
            End If
        End If

        Return Nothing
    End Function

    Public Shared Function JudgeIfDgcc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 144.10191 (C7H14NO2+)
                Dim threshold = 0.01
                Dim diagnosticMz = 104.106990495
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim diagnosticMz2 = 132.1019
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)

                If isClassIonFound = False OrElse isClassIonFound2 = False Then Return Nothing

                ' check 184.07332 (C5H15NO4P)  
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = 184.07332
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found Then Return Nothing ' reject PC

                Dim threshold2 = 70.0
                Dim threshBegin = theoreticalMz - 90.0
                Dim threshEnd = theoreticalMz - 10.0
                Dim isPeakFound = LipidMsmsCharacterizationUtility.isPeakFoundWithACritetion(spectrum, threshBegin, threshEnd, threshold2) ' reject PC+Na
                If isPeakFound Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGCC", LbmClass.DGCC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGCC", LbmClass.DGCC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLdgcc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 144.10191 (C7H14NO2+)
                Dim threshold = 1.0
                Dim diagnosticMz = 104.106990495
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim diagnosticMz2 = 132.1019
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)

                If isClassIonFound = False OrElse isClassIonFound2 = False Then Return Nothing
                ' check 184.07332 (C5H15NO4P)  
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = 184.07332
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found Then Return Nothing ' reject PC

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LDGTS", LbmClass.LDGTS, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LDGCC", LbmClass.LDGCC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGlcadg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim threshold = 5.0
                Dim diagnosticMz = theoreticalMz - 17.026549 - 194.042652622 ' seek [M-194.042652]- (C6H10O7 + H+)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10.0
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 10.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGGA", LbmClass.DGGA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 AndAlso isClassIonFound <> True Then Return Nothing

                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("GlcADG", LbmClass.GlcADG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGGA", LbmClass.DGGA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DGGA", LbmClass.DGGA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("GlcADG", LbmClass.GlcADG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DGGA", LbmClass.DGGA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAcylglcadg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond

                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim sn1 = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2) + OxygenMass
                                Dim sn2 = CarbonMass * sn2Carbon + HydrogenMass * (sn2Carbon * 2 - sn2Double * 2) + OxygenMass
                                Dim sn3 = CarbonMass * sn3Carbon + HydrogenMass * (sn3Carbon * 2 - sn3Double * 2) + OxygenMass

                                Dim SN1Glc = sn1 + 194.042652622 - H2O - HydrogenMass ' 
                                Dim SN2Gly = sn2 + 73.028416 '[SN2+C3H4O2+H]+
                                Dim SN3Gly = sn3 + 73.028416 '[SN1+C3H4O2+H]+

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = SN1Glc,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = SN2Gly,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = SN3Gly,
                                        .Intensity = 1
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAdggaMoleculeObjAsLevel2("ADGGA", LbmClass.ADGGA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("AcylGlcADG", LbmClass.AcylGlcADG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ADGGA", LbmClass.ADGGA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                                Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                                Dim sn3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn3Carbon, sn3Double)

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = sn1,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sn3,
                                        .Intensity = 1
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("ADGGA", LbmClass.ADGGA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("AcylGlcADG", LbmClass.AcylGlcADG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ADGGA", LbmClass.ADGGA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSqdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then ' not found in lipidDbProject-Pos
                ' seek -17.026549 (NH3)
                Dim diagnosticMz = theoreticalMz - 17.026549
                ' seek [M-C6H10O7S+H]+
                Dim threshold = 1.0
                Dim diagnosticMz2 = diagnosticMz - (12 * 6 + HydrogenMass * 10 + OxygenMass * 7 + SulfurMass)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIonFound = Not True Then
                    Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                        Dim nl_SN2 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 10.0
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 10.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("SQDG", LbmClass.SQDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("SQDG", LbmClass.SQDG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SQDG", LbmClass.SQDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 225.0069 (C6H9O7S-)
                Dim threshold = 1.0
                Dim diagnosticMz = 225.0069
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + Proton
                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.1
                            }
                        }
                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("SQDG", LbmClass.SQDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("SQDG", LbmClass.SQDG, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SQDG", LbmClass.SQDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPetoh(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PEtOH", LbmClass.PEtOH, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("PEtOH", LbmClass.PEtOH, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PEtOH", LbmClass.PEtOH, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 125.000919 (C2H6O4P-)
                Dim threshold = 1
                Dim diagnosticMz = 125.000919
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PEtOH", LbmClass.PEtOH, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PEtOH", LbmClass.PEtOH, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPmeoh(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PMeOH", LbmClass.PMeOH, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PMeOH", LbmClass.PMeOH, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 110.98527 (CH4O4P-)
                Dim threshold = 1
                Dim diagnosticMz = 110.98527
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                Dim threshold2 = 30
                Dim diagnosticMz2 = theoreticalMz - 63.008491 ' [M+C2H3N(ACN)+Na-2H]- adduct of EtherPE [M-H]- 
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound2 Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PMeOH", LbmClass.PMeOH, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PMeOH", LbmClass.PMeOH, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPbtoh(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PBtOH", LbmClass.PBtOH, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PBtOH", LbmClass.PBtOH, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 153.03221938 (C4H10O4P-)
                Dim threshold = 1
                Dim diagnosticMz = 153.03221938
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then '
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PBtOH", LbmClass.PBtOH, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PBtOH", LbmClass.PMeOH, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfHemiismonoacylglycerophosphate(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim sn1 = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2) + OxygenMass
                                Dim sn2 = CarbonMass * sn2Carbon + HydrogenMass * (sn2Carbon * 2 - sn2Double * 2) + OxygenMass
                                Dim sn3 = CarbonMass * sn3Carbon + HydrogenMass * (sn3Carbon * 2 - sn3Double * 2) + OxygenMass

                                Dim SN1Gly = sn1 + 73.028416 '[SN1+C3H4O2+H]+
                                Dim SN2Gly = sn2 + 73.028416 '[SN2+C3H4O2+H]+
                                Dim SN3Gly = sn3 + 73.028416 '[SN3+C3H4O2+H]+

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = SN1Gly,
                                        .Intensity = 1.0
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = SN2Gly,
                                        .Intensity = 1.0
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = SN3Gly,
                                        .Intensity = 1.0
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then
                                    Dim NL_SN3PA = theoreticalMz - 17.026549 - SN1Gly - 97.976897 + HydrogenMass ' [M-(sn3+C3H4O2+H)-H3PO4+H]+
                                    Dim threshold = 5
                                    Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, NL_SN3PA, threshold)
                                    If isClassIonFound = True Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getAcylglycerolMoleculeObjAsLevel2("HBMP", LbmClass.HBMP, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                        candidates.Add(molecule)
                                    Else
                                        Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("HBMP", LbmClass.HBMP, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                        candidates.Add(molecule)
                                    End If
                                End If
                            Next
                        Next
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("HBMP", LbmClass.HBMP, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HBMP", LbmClass.HBMP, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit
                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                'if (sn3Carbon > maxSn1Carbon) break;

                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                                Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                                Dim sn3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn3Carbon, sn3Double)

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = sn1,
                                        .Intensity = 0.1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sn2,
                                        .Intensity = 0.1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sn3,
                                        .Intensity = 0.1
                                    }
                                }
                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then
                                    Dim SN1PA = sn1 + 135.993094251 ' [FA1+C3H6O4P-H]-
                                    Dim NL_sn1 = theoreticalMz - sn1 - HydrogenMass ' which is better ?
                                    Dim threshold = 0.1
                                    Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, SN1PA, threshold)
                                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, NL_sn1, threshold)

                                    If isClassIonFound = True OrElse isClassIonFound2 = True Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getAcylglycerolMoleculeObjAsLevel2("HBMP", LbmClass.HBMP, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                        candidates.Add(molecule)
                                    Else
                                        Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("HBMP", LbmClass.HBMP, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                        candidates.Add(molecule)
                                    End If
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("HBMP", LbmClass.HBMP, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HBMP", LbmClass.HBMP, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCardiolipin(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal minSn3Carbon As Integer, ByVal maxSn3Carbon As Integer, ByVal minSn3DoubleBond As Integer, ByVal maxSn3DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing

        Dim maxSnCarbon1_2 = maxSn1Carbon + maxSn2Carbon
        Dim maxSnDoubleBond1_2 = maxSn1DoubleBond + maxSn2DoubleBond
        If maxSnCarbon1_2 > totalCarbon Then maxSnCarbon1_2 = totalCarbon
        If maxSnDoubleBond1_2 > totalDoubleBond Then maxSnDoubleBond1_2 = totalDoubleBond

        Dim minSnCarbon1_2 = minSn1Carbon + minSn2Carbon
        Dim minSnDoubleBond1_2 = minSn1DoubleBond + minSn2DoubleBond


        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()

                ' maybe fatty acid product ion is not found in positive mode

                For sn1_2Carbon As Integer = minSnCarbon1_2 To Math.Floor(totalCarbon / 2)
                    For sn1_2Double = minSnDoubleBond1_2 To maxSnDoubleBond1_2

                        Dim sn3_4Carbon = totalCarbon - sn1_2Carbon
                        Dim sn3_4Double = totalDoubleBond - sn1_2Double

                        Dim SN1_2 = LipidMsmsCharacterizationUtility.acylCainMass(sn1_2Carbon, sn1_2Double)
                        Dim SN3_4 = LipidMsmsCharacterizationUtility.acylCainMass(sn3_4Carbon, sn3_4Double)

                        Dim SN1SN2Gly = SN1_2 + (12 * 3 + HydrogenMass * 3) + OxygenMass * 3 + Proton '2*acyl + glycerol
                        Dim SN3SN4Gly = SN3_4 + (12 * 3 + HydrogenMass * 3) + OxygenMass * 3 + Proton '

                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
    .Mass = SN1SN2Gly,
    .Intensity = 50
},
New SpectrumPeak() With {
    .Mass = SN3SN4Gly,
    .Intensity = 50
}
}

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_0("CL", LbmClass.CL, sn1_2Carbon, sn1_2Double, sn3_4Carbon, sn3_4Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("CL", LbmClass.CL, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CL", LbmClass.CL, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 4)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M-H]-") Then
            ' seek 152.995836 (C3H6O5P-)
            Dim threshold = 1.0
            Dim diagnosticMz = 152.995836
            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            'if (isClassIonFound == false) return null;

            ' from here, acyl level annotation is executed.
            Dim candidates = New List(Of LipidMolecule)()
            For sn1_2Carbon As Integer = minSnCarbon1_2 To Math.Floor(totalCarbon / 2)
                For sn1_2Double = minSnDoubleBond1_2 To maxSnDoubleBond1_2

                    Dim sn3_4Carbon = totalCarbon - sn1_2Carbon
                    Dim sn3_4Double = totalDoubleBond - sn1_2Double

                    Dim SN1_SN2 = LipidMsmsCharacterizationUtility.acylCainMass(sn1_2Carbon, sn1_2Double) + 12 * 3 + OxygenMass * 7 + HydrogenMass * 6 + PhosphorusMass - Proton '[SN1+SN2+C3H6O7P]-
                    Dim SN3_SN4 = LipidMsmsCharacterizationUtility.acylCainMass(sn3_4Carbon, sn3_4Double) + 12 * 3 + OxygenMass * 7 + HydrogenMass * 6 + PhosphorusMass - Proton '[SN3+SN4+C3H6O7P]-

                    'Console.WriteLine(sn1_2Carbon + ":" + sn1_2Double + "-" + sn3_4Carbon + ":" + sn3_4Double + " " + SN1_SN2 + " " + SN3_SN4);

                    Dim query2 = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = SN1_SN2,
.Intensity = 1.0
},
New SpectrumPeak() With {
.Mass = SN3_SN4,
.Intensity = 1.0
}
}
                    Dim foundCount2 = 0
                    Dim averageIntensity2 = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                    Dim carbonLimit = Math.Min(sn3_4Carbon, maxSn3Carbon)
                    Dim doubleLimit = Math.Min(sn3_4Double, maxSn3DoubleBond)

                    If foundCount2 >= 1 Then
                        For sn3Carbon = minSn3Carbon To carbonLimit
                            For sn3Double = minSn3DoubleBond To doubleLimit

                                Dim sn4Carbon = sn3_4Carbon - sn3Carbon
                                Dim sn4Double = sn3_4Double - sn3Double
                                Dim carbonLimit2 = Math.Min(sn1_2Carbon, maxSn1Carbon)
                                Dim doubleLimit2 = Math.Min(sn1_2Double, maxSn1DoubleBond)

                                For sn1Carbon = minSn1Carbon To carbonLimit2
                                    For sn1Double = minSn1DoubleBond To doubleLimit2
                                        If sn1Double > 0 Then
                                            If sn1Carbon / sn1Double < 3 Then Exit For
                                        End If

                                        Dim sn2Carbon = sn1_2Carbon - sn1Carbon

                                        'if (sn3_4Carbon + sn1Carbon + sn2Carbon != totalCarbon) { break; }
                                        If sn2Carbon < minSn2Carbon Then
                                            Exit For
                                        End If

                                        Dim sn2Double = sn1_2Double - sn1Double
                                        If sn2Double > 0 Then
                                            If sn2Carbon / sn2Double < 3 Then Exit For
                                        End If

                                        Dim SN1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                                        Dim SN2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                                        Dim SN3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn3Carbon, sn3Double)
                                        Dim SN4 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn4Carbon, sn4Double)

                                        'Console.WriteLine(sn1Carbon + ":" + sn1Double + "-" + sn2Carbon + ":" + sn2Double + "-" +
                                        '    sn3Carbon + ":" + sn3Double + "-" + sn4Carbon + ":" + sn4Double + " " +
                                        '    SN1 + " " + SN2 + " " + SN3 + " " + SN4);



                                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = SN1,
.Intensity = 1
},
New SpectrumPeak() With {
.Mass = SN2,
.Intensity = 1
},
New SpectrumPeak() With {
.Mass = SN3,
.Intensity = 1
},
New SpectrumPeak() With {
.Mass = SN4,
.Intensity = 1
}
}

                                        Dim foundCount = 0
                                        Dim averageIntensity = 0.0
                                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                        If foundCount >= 3 Then
                                            averageIntensity = averageIntensity + averageIntensity2
                                            If averageIntensity > 100 Then averageIntensity = 100
                                            Dim molecule = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_2("CL", LbmClass.CL, sn1Carbon, sn2Carbon, sn3Carbon, sn4Carbon, sn1Double, sn2Double, sn3Double, sn4Double, averageIntensity)
                                            candidates.Add(molecule)
                                        End If
                                    Next
                                Next
                            Next
                        Next
                        If candidates.Count = 0 Then
                            Dim molecule1 = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_0("CL", LbmClass.CL, sn1_2Carbon, sn1_2Double, sn3_4Carbon, sn3_4Double, averageIntensity2)
                            candidates.Add(molecule1)
                        End If
                    End If
                Next
            Next

            'var score = 0;
            'var molecule0 = getLipidAnnotaionAsLevel1("CL", LbmClass.CL, totalCarbon, totalDoubleBond, score, "");
            'candidates.Add(molecule0);
            If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CL", LbmClass.CL, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 4)
        ElseIf Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek 152.995836 (C3H6O5P-)
            Dim threshold = 1.0
            Dim diagnosticMz = 152.995836
            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            'if (isClassIonFound == false) return null;

            ' from here, acyl level annotation is executed.
            Dim candidates = New List(Of LipidMolecule)()
            For sn1_2Carbon As Integer = minSnCarbon1_2 To Math.Floor(totalCarbon / 2)
                For sn1_2Double = minSnDoubleBond1_2 To maxSnDoubleBond1_2

                    Dim sn3_4Carbon = totalCarbon - sn1_2Carbon
                    Dim sn3_4Double = totalDoubleBond - sn1_2Double

                    Dim carbonLimit = Math.Min(sn3_4Carbon, maxSn3Carbon)
                    Dim doubleLimit = Math.Min(sn3_4Double, maxSn3DoubleBond)

                    For sn3Carbon = minSn3Carbon To carbonLimit
                        For sn3Double = minSn3DoubleBond To doubleLimit

                            Dim sn4Carbon = sn3_4Carbon - sn3Carbon
                            Dim sn4Double = sn3_4Double - sn3Double
                            Dim carbonLimit2 = Math.Min(sn1_2Carbon, maxSn1Carbon)
                            Dim doubleLimit2 = Math.Min(sn1_2Double, maxSn1DoubleBond)

                            For sn1Carbon = minSn1Carbon To carbonLimit2
                                For sn1Double = minSn1DoubleBond To doubleLimit2
                                    If sn1Double > 0 Then
                                        If sn1Carbon / sn1Double < 3 Then Exit For
                                    End If

                                    Dim sn2Carbon = sn1_2Carbon - sn1Carbon

                                    'if (sn3_4Carbon + sn1Carbon + sn2Carbon != totalCarbon) { break; }
                                    If sn2Carbon < minSn2Carbon Then
                                        Exit For
                                    End If

                                    Dim sn2Double = sn1_2Double - sn1Double
                                    If sn2Double > 0 Then
                                        If sn2Carbon / sn2Double < 3 Then Exit For
                                    End If

                                    Dim SN1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                                    Dim SN2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                                    Dim SN3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn3Carbon, sn3Double)
                                    Dim SN4 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn4Carbon, sn4Double)

                                    'Console.WriteLine(sn1Carbon + ":" + sn1Double + "-" + sn2Carbon + ":" + sn2Double + "-" +
                                    '    sn3Carbon + ":" + sn3Double + "-" + sn4Carbon + ":" + sn4Double + " " +
                                    '    SN1 + " " + SN2 + " " + SN3 + " " + SN4);

                                    Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = SN1,
.Intensity = 1
},
New SpectrumPeak() With {
.Mass = SN2,
.Intensity = 1
},
New SpectrumPeak() With {
.Mass = SN3,
.Intensity = 1
},
New SpectrumPeak() With {
.Mass = SN4,
.Intensity = 1
}
}

                                    Dim foundCount = 0
                                    Dim averageIntensity = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                    If foundCount >= 3 Then
                                        'averageIntensity = averageIntensity + averageIntensity2;
                                        If averageIntensity > 100 Then averageIntensity = 100
                                        Dim molecule = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_1("CL", LbmClass.CL, sn1Carbon, sn2Carbon, sn3Carbon, sn4Carbon, sn1Double, sn2Double, sn3Double, sn4Double, averageIntensity)
                                        candidates.Add(molecule)
                                    End If
                                Next
                            Next
                        Next
                    Next
                Next
            Next

            If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CL", LbmClass.CL, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 4)
        End If

        Return Nothing
    End Function

    Public Shared Function JudgeIfCardiolipin(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing

        'var max2SnCarbon = maxSnCarbon * 2;
        'var max2SnDoubleBond = maxSnDoubleBond * 2;
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        'if (max2SnCarbon > totalCarbon) max2SnCarbon = totalCarbon;
        'if (max2SnDoubleBond > totalDoubleBond) max2SnDoubleBond = totalDoubleBond;


        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()

                ' maybe fatty acid product ion is not found in positive mode

                For sn1_2Carbon = minSnCarbon To maxSnCarbon
                    For sn1_2Double = minSnDoubleBond To maxSnDoubleBond
                        'var remainCarbon = totalCarbon - sn1_2Carbon;
                        'var remainDouble = totalDoubleBond - sn1_2Double;
                        'var carbonLimit = Math.Min(remainCarbon, maxSnCarbon);
                        'var doubleLimit = Math.Min(remainDouble, maxSnDoubleBond);

                        'var sn3_4Carbon = Math.Min(totalCarbon - sn1_2Carbon, maxSnCarbon);
                        Dim sn3_4Carbon = totalCarbon - sn1_2Carbon
                        Dim sn3_4Double = totalDoubleBond - sn1_2Double

                        Dim SN1_2 = LipidMsmsCharacterizationUtility.acylCainMass(sn1_2Carbon, sn1_2Double)
                        Dim SN3_4 = LipidMsmsCharacterizationUtility.acylCainMass(sn3_4Carbon, sn3_4Double)

                        Dim SN1SN2Gly = SN1_2 + (12 * 3 + HydrogenMass * 3) + OxygenMass * 3 + Proton '2*acyl + glycerol
                        Dim SN3SN4Gly = SN3_4 + (12 * 3 + HydrogenMass * 3) + OxygenMass * 3 + Proton '

                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
    .Mass = SN1SN2Gly,
    .Intensity = 1
},
New SpectrumPeak() With {
    .Mass = SN3SN4Gly,
    .Intensity = 1
}
}

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_0("CL", LbmClass.CL, sn1_2Carbon, sn1_2Double, sn3_4Carbon, sn3_4Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("CL", LbmClass.CL, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CL", LbmClass.CL, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 4)
            End If
        End If

        Return Nothing
    End Function



    Public Shared Function JudgeIfLysocardiolipin(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 152.995836 (C3H6O5P-)
                Dim threshold = 1.0
                Dim diagnosticMz = 152.995836
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond

                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit
                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                'if (sn1Carbon + sn2Carbon + sn3Carbon != totalCarbon) { break; }
                                Dim sn3Double = remainDouble - sn2Double
                                If sn3Double < 0 Then
                                    Exit For
                                End If

                                Dim SN1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                                Dim SN2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                                Dim SN3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn3Carbon, sn3Double)

                                Dim SN1_PA = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + 12 * 3 + OxygenMass * 6 + HydrogenMass * 6 + PhosphorusMass - Proton '[SN1+C3H7O4P]-
                                Dim SN2_SN3_PA = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon + sn3Carbon, sn2Double + sn3Double) + 12 * 3 + OxygenMass * 7 + HydrogenMass * 8 + PhosphorusMass - Proton '[SN2+SN3+C3H8O7P]-


                                Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = SN1,
.Intensity = 0.1
},
New SpectrumPeak() With {
.Mass = SN2,
.Intensity = 5
},
New SpectrumPeak() With {
.Mass = SN3,
.Intensity = 5
}
}

                                Dim query2 = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = SN1_PA,
.Intensity = 5
},
New SpectrumPeak() With {
.Mass = SN2_SN3_PA,
.Intensity = 5
}
}

                                Dim foundCount = 0
                                Dim foundCount2 = 0

                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount = 3 AndAlso foundCount2 = 2 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getLysocardiolipinMoleculeObjAsLevel2("MLCL", LbmClass.MLCL, sn1Carbon, sn2Carbon, sn3Carbon, sn1Double, sn2Double, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                ElseIf foundCount < 3 AndAlso foundCount >= 0 AndAlso foundCount2 = 2 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_0("MLCL", LbmClass.MLCL, sn1Carbon, sn1Double, sn2Carbon + sn3Carbon, sn2Double + sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                ElseIf foundCount = 3 AndAlso foundCount2 < 2 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("MLCL", LbmClass.MLCL, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next

                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MLCL", LbmClass.MLCL, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDilysocardiolipin(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 152.995836 (C3H6O5P-)
                Dim threshold = 1.0
                Dim diagnosticMz = 152.995836
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        ' if (sn2Carbon < minSnCarbon) { break; }

                        Dim sn2Double = totalDoubleBond - sn1Double
                        'if (sn2Double < 0 ) { break; }


                        Dim SN1_PA = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + 12 * 3 + OxygenMass * 6 + HydrogenMass * 8 + PhosphorusMass - Proton '[SN1+C3H8O4P]-
                        Dim SN2_PA = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + 12 * 3 + OxygenMass * 6 + HydrogenMass * 8 + PhosphorusMass - Proton '[SN1+C3H8O4P]-


                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = SN1_PA,
.Intensity = 5.0
},
New SpectrumPeak() With {
.Mass = SN2_PA,
.Intensity = 5.0
}
}

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCardiolipinMoleculeObjAsLevel2_0("DLCL", LbmClass.DLCL, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("DLCL", LbmClass.DLCL, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DLCL", LbmClass.DLCL, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfFattyacid(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim threshold = 5.0
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, theoreticalMz, threshold)
                If isClassIonFound = False Then Return Nothing
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;
                'var molecule0 = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("FA", LbmClass.FA, totalCarbon, totalDoubleBond, averageIntensity);
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("FA", LbmClass.FA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfDmedFattyacid(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Positive Then
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim threshold = 5.0
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, theoreticalMz, threshold)
                If isClassIonFound = False Then Return Nothing
                Dim threshold2 = 1.0
                Dim diagnosticMz = theoreticalMz - 12 * 2 - NitrogenMass - HydrogenMass * 7
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold2)
                If isClassIonFound2 = False Then Return Nothing
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DMEDFA", LbmClass.DMEDFA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfOxfattyacid(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim threshold = 1.0
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, theoreticalMz, threshold)
                If isClassIonFound = False Then Return Nothing
                Dim threshold2 = 0.01
                Dim diagnosticMz = theoreticalMz - H2O
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold2)
                If isClassIonFound2 = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Dim alphaOHflag01 = theoreticalMz - (12 + OxygenMass * 2 + HydrogenMass * 2) ' -CO2
                Dim nl_H2O = theoreticalMz - H2O ' -H2O
                Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = alphaOHflag01,
.Intensity = 10.0
},
New SpectrumPeak() With {
.Mass = nl_H2O,
.Intensity = 1.0
}
}

                Dim foundCount = 0
                Dim averageIntensity = 0.0
                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                If foundCount = 2 AndAlso totalOxidized = 1 Then 'totalOxidized == 1 only 
                    Dim molecule = LipidMsmsCharacterizationUtility.getAlphaOxfaMoleculeObjAsLevel1("FA", LbmClass.OxFA, totalCarbon, totalDoubleBond, totalOxidized, averageIntensity)
                    candidates.Add(molecule)
                End If
                'else if (foundCount == 0) // -H2O was not found -> null 
                '{
                '    // seek -H2O
                '    var threshold2 = 0.01;
                '    var diagnosticMz = theoreticalMz - H2O;
                '    var isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold2);
                '    if (isClassIonFound2 == false) return null;
                '}


                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("FA", LbmClass.OxFA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfDmedOxfattyacid(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Positive Then
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim threshold = 1.0
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, theoreticalMz, threshold)
                If isClassIonFound = False Then Return Nothing
                Dim threshold2 = 1.0
                Dim diagnosticMz = theoreticalMz - 12 * 2 - NitrogenMass - HydrogenMass * 7
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold2)
                If isClassIonFound2 = False Then Return Nothing
                Dim diagnosticMz2 = diagnosticMz - H2O
                Dim threshold3 = 0.1
                Dim isClassIonFound3 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold3)
                If isClassIonFound3 = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                'var alphaOHflag01 = theoreticalMz - (12 + MassDiffDictionary.OxygenMass * 2 + MassDiffDictionary.HydrogenMass * 2); // -CO2
                'var nl_H2O = theoreticalMz - H2O; // -H2O
                'var query = new List<SpectrumPeak>
                '                    {
                '                    new SpectrumPeak() { Mass = alphaOHflag01, Intensity = 10.0 },
                '                    new SpectrumPeak() { Mass = nl_H2O, Intensity = 1.0 }
                '                    };

                'var foundCount = 0;
                'var averageIntensity = 0.0;
                'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                'if (foundCount == 2 && totalOxidized == 1) //totalOxidized == 1 only 
                '{
                '    var molecule = getAlphaOxfaMoleculeObjAsLevel1("DMEDOxFA", LbmClass.DMEDOxFA, totalCarbon, totalDoubleBond, totalOxidized, averageIntensity);
                '    candidates.Add(molecule);
                '}
                'else if (foundCount == 0) // -H2O was not found -> null 
                '{
                '    // seek -H2O
                '    var threshold2 = 0.01;
                '    var diagnosticMz = theoreticalMz - H2O;
                '    var isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold2);
                '    if (isClassIonFound2 == false) return null;
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DMEDFA", LbmClass.DMEDOxFA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfFahfa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double > 0 Then
                            If sn1Carbon / sn1Double < 3 Then Exit For
                        End If

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        If sn2Double > 0 Then
                            If sn2Carbon / sn2Double < 3 Then Exit For
                        End If

                        Dim NL_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass '[M-SN1(HFA)-H]-
                        Dim NL_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - OxygenMass + HydrogenMass '[M - SN2-H]-
                        Dim aahfaFrag1 = NL_SN1 - (12 + OxygenMass * 2 + HydrogenMass * 2) ' -CO2

                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = NL_SN1,
.Intensity = 10.0
},
New SpectrumPeak() With {
.Mass = NL_SN2,
.Intensity = 1.0
}
}
                        Dim query2 = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = aahfaFrag1,
.Intensity = 10.0
}
}

                        Dim foundCount = 0
                        Dim foundCount2 = 0
                        Dim averageIntensity = 0.0
                        Dim averageIntensity2 = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                        If foundCount >= 2 Then
                            Dim molecule = New LipidMolecule()
                            If foundCount2 = 1 Then
                                molecule = LipidMsmsCharacterizationUtility.getFahfaMoleculeObjAsLevel2_0("AAHFA", LbmClass.FAHFA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity2)
                            Else
                                molecule = LipidMsmsCharacterizationUtility.getFahfaMoleculeObjAsLevel2_0("FAHFA", LbmClass.FAHFA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            End If
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                'var score = 0;
                'var molecule0 = getLipidAnnotaionAsLevel1("FAHFA", LbmClass.FAHFA, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("FAHFA", LbmClass.FAHFA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfFahfaDMED(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then
            If Equals(adduct.AdductIonName, "[M+H]+") Then ' DEMD derv.
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Double > 0 Then
                            If sn1Carbon / sn1Double < 3 Then Exit For
                        End If

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        If sn2Double > 0 Then
                            If sn2Carbon / sn2Double < 3 Then Exit For
                        End If

                        Dim NL_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass ' extra FA loss
                        Dim NL_SN1_header = NL_SN1 - 12 * 2 - NitrogenMass - HydrogenMass * 7

                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
.Mass = NL_SN1,
.Intensity = 0.5
},
New SpectrumPeak() With {
.Mass = NL_SN1_header,
.Intensity = 5.0
}
}

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then
                            Dim molecule = New LipidMolecule()
                            molecule = LipidMsmsCharacterizationUtility.getFahfaMoleculeObjAsLevel2_0("DMEDFAHFA", LbmClass.DMEDFAHFA, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DMEDFAHFA", LbmClass.DMEDFAHFA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    '''''''''''' ceramide section
    Public Shared Function JudgeIfCeramidens(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        ' if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If acylDouble >= 7 Then Continue For
                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        ' must query
                        Dim queryMust = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 5
                            }
                        }
                        Dim foundCountMust = 0
                        Dim averageIntensityMust = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, queryMust, ms2Tolerance, foundCountMust, averageIntensityMust)
                        If foundCountMust = 0 Then Continue For

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                        Dim foundCountThresh = If(acylCarbon < 12, 2, 1) ' to exclude strange annotation

                        If foundCount >= foundCountThresh Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-NS", LbmClass.Cer_NS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                ' reject HexCer
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 162.052833 - H2O
                If LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold) Then
                    Return Nothing
                End If
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 2
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-CH2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - 12 - H2O
                ' seek [M-CH2O-H2O-H]-
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz3 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold3 = 50.0
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                    If isClassIon3Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If acylDouble >= 7 Then Continue For

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' as [FA+NCCO-3H]- on Excel(may be not sure)
                        Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + OxygenMass ' [Sph-NCC-3H]-
                        Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - OxygenMass - 2 * HydrogenMass ' 

                        'Console.WriteLine("d" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " +
                        '    sphChain_loss + " " + sphFragment + " " + acylFragment);
                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-NS", LbmClass.Cer_NS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramidePhosphate(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim diagnosticMz = theoreticalMz - 79.966333 - H2O
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        ' must query
                        Dim queryMust = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = diagnosticMz,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 10
                            }
                        }
                        Dim foundCountMust = 0
                        Dim averageIntensityMust = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, queryMust, ms2Tolerance, foundCountMust, averageIntensityMust)
                        If foundCountMust = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("CerP", LbmClass.CerP, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensityMust)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CerP", LbmClass.CerP, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim diagnosticMz = theoreticalMz
                ' seek [M-CH2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = 96.969619122
                ' seek [M-CH2O-H2O-H]-
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = 78.959054438

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found AndAlso isClassIon2Found Then
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CerP", LbmClass.CerP, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, New List(Of LipidMolecule)(), 2)
                End If
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramidends(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    Dim sphDouble = 0 ' Cer-NDS sphingo chain don't have double bond

                    Dim acylCarbon = totalCarbon - sphCarbon
                    'if (acylCarbon < minSphCarbon) { break; }
                    Dim acylDouble = totalDoubleBond - sphDouble

                    Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                    Dim sph2 = sph1 - H2O
                    Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                    Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                    ' must query
                    Dim queryMust = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                            .Mass = sph2,
                            .Intensity = 5
                        }
                        }
                    Dim foundCountMust = 0
                    Dim averageIntensityMust = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, queryMust, ms2Tolerance, foundCountMust, averageIntensityMust)
                    If foundCountMust = 0 Then Continue For

                    Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                            .Mass = sph1,
                            .Intensity = 5
                        },
                            New SpectrumPeak() With {
                            .Mass = sph3,
                            .Intensity = 5
                        }
                        }
                    Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                    Dim foundCountThresh = If(acylCarbon < 12, 2, 1) ' to exclude strange annotation

                    If foundCount >= foundCountThresh Then ' 
                        Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                        candidates.Add(molecule)
                    End If
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-NDS", LbmClass.Cer_NDS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                ' reject HexCer
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 162.052833 - H2O
                If LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold) Then
                    Return Nothing
                End If
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-CH2-H2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - 12 - H2O - 2 * HydrogenMass
                ' seek [M-CH2O-H2O-H]-
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz1 - OxygenMass

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz3 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold3 = 50.0
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                    If isClassIon3Found Then Return Nothing
                End If
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    Dim sphDouble = 0 ' Cer-NDS sphingo chain don't have double bond

                    Dim acylCarbon = totalCarbon - sphCarbon
                    'if (acylCarbon < minSphCarbon) { break; }
                    Dim acylDouble = totalDoubleBond - sphDouble

                    Dim sphChain_loss = diagnosticMz - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' as [FA+NCC-3H]- 
                    Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + OxygenMass ' [Sph-NCC-3H]-
                    Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - OxygenMass - 2 * HydrogenMass ' 
                    Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                            .Mass = sphChain_loss,
                            .Intensity = 5
                        },
                            New SpectrumPeak() With {
                            .Mass = sphFragment,
                            .Intensity = 1
                        },
                            New SpectrumPeak() With {
                            .Mass = acylFragment,
                            .Intensity = 1
                        }
                        }

                    Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount >= 2 Then
                        Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                        candidates.Add(molecule)
                    End If

                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-NDS", LbmClass.Cer_NDS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexceramidens(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 1.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz - 162.052833
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        ' if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+

                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 10
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 5
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_NS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-NS", LbmClass.HexCer_NS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_NS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_NS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_NS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [[M-C6H10O5-H]-
                Dim threshold1 = 10.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIonFound <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz3 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold3 = 50.0
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                    If isClassIon3Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz1 - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' as [FA+NCCO-3H]- 
                        Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + OxygenMass ' [Sph-NCC-3H]-
                        'var acylamide = acylCarbon * 12 + (((2 * acylCarbon) - (2 * acylDouble) - 1) * MassDiffDictionary.HydrogenMass) + MassDiffDictionary.NitrogenMass;
                        Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - OxygenMass - 2 * HydrogenMass ' 

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then
                            If True Then ' 
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_NS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-NS", LbmClass.HexCer_NS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_NS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexceramideo(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 1.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz - 162.052833
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = Not True OrElse isClassIon2Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        ' if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+

                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        'Console.WriteLine("HexCer-O" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " +
                        '    sph1 + " " + sph2 + " " + sph3);

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 

                            'var header = sphDouble == 0 ? "HexCer-HDS" : "HexCer-HS";
                            Dim header = "HexCer"
                            Dim lbm = If(sphDouble = 0, [Enum].LbmClass.HexCer_HDS, [Enum].LbmClass.HexCer_HS)

                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2(header, lbm, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                'var headerString = totalDoubleBond == 0 ? "HexCer-HDS" : "HexCer-HS";
                Dim headerString = "HexCer"
                Dim lbmClass = If(totalDoubleBond = 0, [Enum].LbmClass.HexCer_HDS, [Enum].LbmClass.HexCer_HS)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(headerString, lbmClass, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim header = "HexCer"
                            Dim lbm = If(sphDouble = 0, [Enum].LbmClass.HexCer_HDS, [Enum].LbmClass.HexCer_HS)

                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2(header, lbm, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Dim headerString = "HexCer"
                Dim lbmClass = If(totalDoubleBond = 0, [Enum].LbmClass.HexCer_HDS, [Enum].LbmClass.HexCer_HS)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(headerString, lbmClass, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [[M-C6H10O5-H]-
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIonFound <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz3 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold3 = 50.0
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                    If isClassIon3Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble
                        Dim acylFragment = LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + NitrogenMass + HydrogenMass * 4 + 12 * 2 + OxygenMass - Proton ' as [FAA+C2H3-H]- fix 20220905
                        'Console.WriteLine("HexCer-O " + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " + acylFragment);
                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then
                            If True Then ' 
                                'var header = sphDouble == 0 ? "HexCer-HDS" : "HexCer-HS";
                                Dim header = "HexCer"
                                Dim lbm = If(sphDouble = 0, [Enum].LbmClass.HexCer_HDS, [Enum].LbmClass.HexCer_HS)

                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2(header, lbm, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        End If
                    Next
                Next

                'var headerString = totalDoubleBond == 0 ? "HexCer-HDS" : "HexCer-HS";
                Dim headerString = "HexCer"
                Dim lbmClass = If(totalDoubleBond = 0, [Enum].LbmClass.HexCer_HDS, [Enum].LbmClass.HexCer_HS)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(headerString, lbmClass, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexceramidends(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                'var threshold = 1.0;
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz - 162.052833
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    Dim sphDouble = 0 ' Cer-NDS sphingo chain don't have double bond

                    Dim acylCarbon = totalCarbon - sphCarbon
                    'if (acylCarbon < minSphCarbon) { break; }
                    Dim acylDouble = totalDoubleBond - sphDouble

                    Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                    Dim sph2 = sph1 - H2O
                    ' var sph3 = sph2 - 12; //[Sph-CH4O2+H]+ (may be not found)
                    Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                    Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                            .Mass = sph1,
                            .Intensity = 5
                        },
                            New SpectrumPeak() With {
                            .Mass = sph2,
                            .Intensity = 5
                        }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                        Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount = 2 Then ' 
                        Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_NDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                        candidates.Add(molecule)
                    End If
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-NDS", LbmClass.HexCer_NDS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_NDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_NDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_NDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [[M-C6H10O5-H]-
                Dim threshold = 10.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                If isClassIonFound <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz3 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold3 = 50.0
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                    If isClassIon3Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    Dim sphDouble = 0 ' HexCer-NDS sphingo chain don't have double bond

                    Dim acylCarbon = totalCarbon - sphCarbon
                    'if (acylCarbon < minSphCarbon) { break; }
                    Dim acylDouble = totalDoubleBond - sphDouble

                    Dim sphChain_loss = diagnosticMz1 - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' as [FA+NCCO-3H]- 
                    Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + OxygenMass ' [Sph-NCC-3H]-
                    'var acylamide = acylCarbon * 12 + (((2 * acylCarbon) - (2 * acylDouble) - 1) * MassDiffDictionary.HydrogenMass) + MassDiffDictionary.NitrogenMass;
                    Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - OxygenMass - 2 * HydrogenMass ' 

                    Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                            .Mass = sphChain_loss,
                            .Intensity = 0.1
                        },
                            New SpectrumPeak() With {
                            .Mass = sphFragment,
                            .Intensity = 0.1
                        },
                            New SpectrumPeak() With {
                            .Mass = acylFragment,
                            .Intensity = 0.1
                        }
                        }

                    Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                        Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_NDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                        candidates.Add(molecule)
                    End If

                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-NDS", LbmClass.HexCer_NDS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_NDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramideo(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 3
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 3
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 3
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            'Console.WriteLine("Cer-O" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " +
                            ' sph1 + " " + sph2 + " " + sph3);


                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 
                            'var header = sphDouble == 0 ? "Cer-HDS" : "Cer-HS";
                            Dim header = "Cer"
                            Dim lbm = If(sphDouble = 0, [Enum].LbmClass.Cer_HDS, [Enum].LbmClass.Cer_HS)

                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2(header, lbm, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                'var headerString = totalDoubleBond == 0 ? "Cer-HDS" : "Cer-HS";
                Dim headerString = "Cer"
                Dim lbmClass = If(totalDoubleBond = 0, [Enum].LbmClass.Cer_HDS, [Enum].LbmClass.Cer_HS)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(headerString, lbmClass, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim header = "Cer"
                            Dim lbm = If(sphDouble = 0, [Enum].LbmClass.Cer_HDS, [Enum].LbmClass.Cer_HS)

                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2(header, lbm, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Dim headerString = "Cer"
                Dim lbmClass = If(totalDoubleBond = 0, [Enum].LbmClass.Cer_HDS, [Enum].LbmClass.Cer_HS)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(headerString, lbmClass, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        ElseIf adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)
                ' seek [M-CH2O-H]-
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = diagnosticMz - H2O - 12
                ' seek [M-CH4O2-H]-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = diagnosticMz1 - H2O
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 5
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing
                ElseIf Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") Then
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 20.0
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing
                End If


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' as [FA+C2H3N]- 
                        Dim sphFragment = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon - 2, sphDouble) - OxygenMass - NitrogenMass - Proton ' [Sph-NCC-3H]-
                        Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + OxygenMass
                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 0.1
                            },
                                New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 1
                            },
                                New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 1
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim acylOxidized = 1 '
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_HS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_HS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramidedos(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -H2O
                Dim threshold = 5.0
                Dim diagnosticMz = theoreticalMz - H2O
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass + OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            'Console.WriteLine("Cer-DOS" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " +
                            ' sph1 + " " + sph2 + " " + sph3);

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NDOS, "m", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NDOS, "m", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexhexceramidens(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        'if (maxSphCarbon > totalCarbon) maxSphCarbon = totalCarbon;
        'if (maxSphDoubleBond > totalDoubleBond) maxSphDoubleBond = totalDoubleBond;
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim threshold1 = 10.0
                Dim diagnosticMz1 = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)
                ' seek [M-C6H10O5-H]-
                Dim threshold2 = 5
                Dim diagnosticMz2 = diagnosticMz1 - 162.052833
                ' seek [M-C12H20O10-H]-
                Dim threshold3 = 1
                Dim diagnosticMz3 = diagnosticMz2 - 162.052833

                'var isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1);
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'var isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3);
                'if (isClassIon1Found != true || isClassIon2Found != true || isClassIon3Found != true) return null;

                Dim classIonFound = New List(Of Boolean)() ' 20220921 fix
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3))
                If classIonFound.Count(Function(f) f = True) < 2 Then Return Nothing

                ' seek [M-C18H30O15-H]- // reject Hex3Cer
                Dim threshold5 = 1
                Dim diagnosticMz5 = diagnosticMz3 - 162.052833
                Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                If isClassIon5Found Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz4 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold4 = 50.0
                    Dim isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4)
                    If isClassIon4Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                '   may be not found fragment to define sphingo and acyl chain
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexHexCer-NS", LbmClass.HexHexCer_NS, "d", totalCarbon, totalDoubleBond,
                '    score);
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Hex2Cer", LbmClass.Hex2Cer, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -H2O
                Dim threshold = 0.1
                Dim diagnosticMz = theoreticalMz - H2O
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = diagnosticMz - 162.052833

                Dim threshold3 = 1.0
                Dim diagnosticMz3 = diagnosticMz2 - 162.052833

                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'var isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3);
                'if (!isClassIonFound || !isClassIon2Found || !isClassIon3Found) return null;

                Dim classIonFound = New List(Of Boolean)()
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3))
                If classIonFound.Count(Function(f) f = True) < 2 Then Return Nothing

                ' seek [M-C18H30O15-H]- // reject Hex3Cer
                Dim threshold5 = 1
                Dim diagnosticMz5 = diagnosticMz3 - 162.052833
                Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                If isClassIon5Found Then Return Nothing


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+

                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Hex2Cer", LbmClass.Hex2Cer, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Hex2Cer", LbmClass.Hex2Cer, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexhexhexceramidens(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim threshold1 = 10.0
                Dim diagnosticMz1 = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)
                ' seek [M-C6H10O5-H]-
                Dim threshold2 = 1
                Dim diagnosticMz2 = diagnosticMz1 - 162.052833
                ' seek [M-C12H20O10-H]-
                Dim threshold3 = 1
                Dim diagnosticMz3 = diagnosticMz2 - 162.052833
                ' seek [M-C18H30O15-H]-
                Dim threshold4 = 1
                Dim diagnosticMz4 = diagnosticMz3 - 162.052833

                'var isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1);
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'var isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3);
                'var isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4);
                'if (isClassIon1Found != true || isClassIon2Found != true || isClassIon3Found != true || isClassIon4Found != true) return null;

                Dim classIonFound = New List(Of Boolean)() ' 20220921 fix
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4))
                If classIonFound.Count(Function(f) f = True) < 3 Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                '   may be not found fragment to define sphingo and acyl chain
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexHexHexCer_NS", LbmClass.HexHexHexCer_NS, "d", totalCarbon, totalDoubleBond,
                '    score);
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Hex3Cer", LbmClass.Hex3Cer, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -H2O
                Dim threshold = 0.1
                Dim diagnosticMz = theoreticalMz - H2O
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = diagnosticMz - 162.052833

                Dim threshold3 = 0.1
                Dim diagnosticMz3 = diagnosticMz2 - 162.052833

                Dim threshold4 = 1.0
                Dim diagnosticMz4 = diagnosticMz3 - 162.052833

                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'var isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3);
                'var isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4);
                'if (!isClassIonFound || !isClassIon2Found || !isClassIon3Found || !isClassIon4Found) return null;

                Dim classIonFound = New List(Of Boolean)() ' 20220921 fix
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3))
                classIonFound.Add(LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4))
                If classIonFound.Count(Function(f) f = True) < 3 Then Return Nothing


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz4 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+

                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Hex3Cer", LbmClass.Hex3Cer, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Hex3Cer", LbmClass.Hex3Cer, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramideap(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 1.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                ' seek -2H2O
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz - H2O
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = Not True OrElse isClassIon2Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph1 - 2 * H2O
                        Dim sph4 = sph1 - 3 * H2O
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + 2 * OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 10
                            },
                            New SpectrumPeak() With {
                                .Mass = sph4,
                                .Intensity = 5
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_AP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_AP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_AP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_AP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz2 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold2 = 50.0
                    Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                    If isClassIon2Found Then Return Nothing
                End If
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 3) * 12 - HydrogenMass * ((sphCarbon - 3) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' 
                        Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + 2 * OxygenMass ' [Sph-NCC-2H2O]-
                        Dim acylFragment1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + OxygenMass ' FA(+OH)+ O (may be not sure)
                        Dim acylFragment2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - 12 - OxygenMass - 2 * HydrogenMass ' FA(+OH) -C -O -2H(may be not sure)

                        'Console.WriteLine("d" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " +
                        '    sphChain_loss + " " + sphFragment + " " + acylFragment1 + " " + acylFragment2);

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 3 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_AP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_AP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexceramideap(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -Hex(-C6H10O5)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 162.052833
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = If(Equals(adductform, "[M+H]+"), diagnosticMz - H2O, diagnosticMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = Not True OrElse isClassIon2Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If sphCarbon >= 24 OrElse sphCarbon <= 14 Then Continue For

                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph1 - 2 * H2O
                        Dim sph4 = sph1 - 3 * H2O
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + 2 * OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph4,
                                .Intensity = 1
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_AP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-AP", LbmClass.HexCer_AP, "t", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                'return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer-AP", LbmClass.HexCer_AP, "t", theoreticalMz, adduct,
                '    totalCarbon, totalDoubleBond, 0, candidates);
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_AP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_AP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_AP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-C6H10O5-H]-
                Dim threshold = 1.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                If isClassIonFound <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz1 - (sphCarbon - 3) * 12 - HydrogenMass * ((sphCarbon - 3) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' 
                        Dim acylFragment1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + OxygenMass ' FA(+OH)+ O (may be not sure)
                        Dim acylFragment2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - 12 - OxygenMass - 2 * HydrogenMass ' FA(+OH) -C -O -2H(may be not sure)
                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment2,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_AP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-AP", LbmClass.HexCer_AP, "t", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_AP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramideas(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-H2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - H2O
                ' seek [M-CH2O-H2O-H]-
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O - 12

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing
                Dim isSolventAdduct = False

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing

                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 5
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing

                    isSolventAdduct = True
                ElseIf Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") Then
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 20.0
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing

                    isSolventAdduct = True
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass '
                        Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + OxygenMass ' [Sph-NCCO-3H]-
                        Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - 12 - OxygenMass - 2 * HydrogenMass ' [FA-CO-3H]-
                        Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 0.5
                            },
                                    New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 0.5
                            },
                                    New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 0.5
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim acylFragmentFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, acylFragment, 0.5)
                            If acylFragmentFound = True Then
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_AS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                                candidates.Add(molecule)
                            Else
                                Dim acylOxidized = 1 'case of cannot determine as alpha-OH
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_HS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                                candidates.Add(molecule)

                            End If
                        End If
                    Next
                Next
                If candidates.Count = 0 AndAlso (Not isClassIon1Found OrElse Not isClassIon2Found OrElse isSolventAdduct = False) Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_HS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramideads(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-H2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - H2O
                ' seek [M-CH2O-H2O-H]-
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O - 12

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                Dim isSolventAdduct = False
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing

                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 5
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing
                    isSolventAdduct = True
                ElseIf Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") Then
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 20.0
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing
                    isSolventAdduct = True
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    'if (sphCarbon >= 26) continue;
                    Dim sphDouble = 0 ' Cer-ADS sphingo chain don't have double bond

                    Dim acylCarbon = totalCarbon - sphCarbon
                    ' if (acylCarbon < minSphCarbon) { break; }
                    Dim acylDouble = totalDoubleBond - sphDouble

                    Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) - HydrogenMass - Proton ' [Sph-CO+C=O-4H]-
                    Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - 2 * HydrogenMass ' 
                    Dim acylFragment2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - 2 * HydrogenMass - 12 - OxygenMass ' [FA-CO-3H]-
                    Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                            .Mass = sph1,
                            .Intensity = 1
                        },
                                New SpectrumPeak() With {
                            .Mass = acylFragment,
                            .Intensity = 1
                        },
                                New SpectrumPeak() With {
                            .Mass = acylFragment2,
                            .Intensity = 1
                        }
                            }

                    Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                        Dim acylFragment2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, acylFragment2, 0.5)
                        If acylFragment2Found = True Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_ADS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        Else
                            Dim acylOxidized = 1 'case of cannot determine as alpha-OH
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_HDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                            candidates.Add(molecule)

                        End If
                    End If

                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-ADS", LbmClass.Cer_ADS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 AndAlso (Not isClassIon1Found OrElse Not isClassIon2Found OrElse isSolventAdduct = False) Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_HDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramidebs(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-H2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - H2O
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isSolventAdduct = False
                'if (isClassIon1Found != true) return null;
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing

                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 5
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing

                    isSolventAdduct = True
                ElseIf Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") Then
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 5
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing

                    isSolventAdduct = True
                End If


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon + 2, sphDouble) + OxygenMass + HydrogenMass - Proton ' [Sph+C2H2O-H]- suggest Cer-BS fragment
                        Dim sphFragment = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon - 2, sphDouble) - OxygenMass - NitrogenMass - Proton ' [Sph-C2H7NO-H]-
                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                                New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 1
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_BS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-BS", LbmClass.Cer_BS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 AndAlso (Not isClassIon1Found OrElse isSolventAdduct = False) Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_HS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfCeramidebds(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-H2O-H]-  // maybe not found
                'var threshold1 = 1.0;
                'var diagnosticMz1 = diagnosticMz - H2O;

                'var isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1);
                'if (isClassIon1Found != true ) return null;
                Dim isSolventAdduct = False
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing

                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 5
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing

                    isSolventAdduct = True
                ElseIf Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") Then
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 20.0
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing

                    isSolventAdduct = True
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    Dim sphDouble = 0 ' Cer-BDS sphingo chain don't have double bond

                    Dim acylCarbon = totalCarbon - sphCarbon
                    'if (acylCarbon < minSphCarbon) { break; }
                    Dim acylDouble = totalDoubleBond - sphDouble

                    Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon + 2, sphDouble) + OxygenMass + HydrogenMass - Proton ' [Sph+C2H2O-H]- suggest beta-OH-FA fragment 
                    Dim sphFragment1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon - 2, sphDouble) - OxygenMass - NitrogenMass - Proton ' [Sph-NCC-3H]-
                    Dim sphFragment2 = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - HydrogenMass + 12 ' ([Sph+C=O-CO-3H]- on Excel sheet)

                    Dim mustQuery = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                            .Mass = sph1,
                            .Intensity = 50
                        }
                            }

                    Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, mustQuery, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount <> 1 Then Continue For

                    Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                            .Mass = sph1,
                            .Intensity = 1
                        },
                                New SpectrumPeak() With {
                            .Mass = sphFragment1,
                            .Intensity = 1
                        },
                                New SpectrumPeak() With {
                            .Mass = sphFragment2,
                            .Intensity = 1
                        }
                            }

                    foundCount = 0
                    averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                        Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_BDS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                        candidates.Add(molecule)
                    End If

                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-BDS", LbmClass.Cer_BDS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_HDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramidenp(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 1.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                ' seek -2H2O
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz - H2O
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = Not True OrElse isClassIon2Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph1 - 2 * H2O
                        Dim sph4 = sph1 - 3 * H2O
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + 2 * OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 10
                            },
                            New SpectrumPeak() With {
                                .Mass = sph4,
                                .Intensity = 5
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 3 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_NP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        ElseIf adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-H2O-H]-
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = diagnosticMz - H2O
                ' seek [M-2H2O-H]-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = diagnosticMz1 - H2O

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 3) * 12 - HydrogenMass * ((sphCarbon - 3) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' [FAA+C3H5O-H]-
                        Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + 2 * OxygenMass ' [Sph-C2H9NO-H]-
                        Dim acylamide = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - OxygenMass + NitrogenMass + HydrogenMass + Electron
                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylamide,
                                .Intensity = 1
                            }
                        }

                        'Console.WriteLine("Cer-NP t" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble +
                        '     " " + sphChain_loss + " " + sphFragment + " " + acylamide);

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_NP, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-NP", LbmClass.Cer_NP, "t", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_NP, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramideeos(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal minOmegaacylCarbon As Integer, ByVal maxOmegaacylCarbon As Integer, ByVal minOmegaacylDoubleBond As Integer, ByVal maxOmegaacylDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If maxOmegaacylCarbon > totalCarbon Then maxOmegaacylCarbon = totalCarbon
        If maxOmegaacylDoubleBond > totalDoubleBond Then maxOmegaacylDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))

                ' seek [[M-C6H10O5-H]-  // reject HexCer-EOS
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIonFound = True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim remainCarbon = totalCarbon - sphCarbon
                        Dim remainDouble = totalDoubleBond - sphDouble
                        Dim carbonLimit = Math.Min(remainCarbon, maxOmegaacylCarbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxOmegaacylDoubleBond)

                        For acylCarbon = minOmegaacylCarbon To carbonLimit
                            For acylDouble = 0 To doubleLimit
                                Dim terminalCarbon = totalCarbon - sphCarbon - acylCarbon
                                'if (acylCarbon < maxSphCarbon) break;
                                Dim terminalDouble = totalDoubleBond - sphDouble - acylDouble

                                Dim esterloss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(terminalCarbon, terminalDouble) + OxygenMass + HydrogenMass ' 
                                Dim esterFa = LipidMsmsCharacterizationUtility.fattyacidProductIon(terminalCarbon, terminalDouble)
                                Dim acylamide = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + NitrogenMass + HydrogenMass + Electron

                                'Console.WriteLine("d" + sphCarbon + ":" + sphDouble + "/" + omegaAcylCarbon + ":" + omegaAcylDouble + "-O-" +
                                '    acylCarbon + ":" + acylDouble + " " +
                                '    esterloss + " " + esterFa + " " + acylamide);

                                Dim query1 = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = esterFa,
                                        .Intensity = 30
                                    }
                                }

                                Dim foundCount1 = 0
                                Dim averageIntensity1 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)

                                If foundCount1 = 1 Then ' the diagnostic acyl ion must be observed for level 2 annotation

                                    Dim query2 = New List(Of SpectrumPeak) From {
                                            New SpectrumPeak() With {
                                            .Mass = esterloss,
                                            .Intensity = 1
                                        },
                                            New SpectrumPeak() With {
                                            .Mass = esterFa,
                                            .Intensity = 30
                                        },
                                            New SpectrumPeak() With {
                                            .Mass = acylamide,
                                            .Intensity = 0.01
                                        }
                                        }

                                    Dim foundCount2 = 0
                                    Dim averageIntensity2 = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                                    If foundCount2 = 3 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, terminalCarbon, terminalDouble, averageIntensity1)
                                        candidates.Add(molecule)
                                    ElseIf foundCount2 = 2 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_0("Cer", LbmClass.Cer_EOS, "d", sphCarbon + acylCarbon, sphDouble + acylDouble, terminalCarbon, terminalDouble, averageIntensity2)
                                        candidates.Add(molecule)
                                    End If
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-EOS", LbmClass.Cer_EOS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                ' extra esteracyl contains "2O" and 1DoubleBond
                Dim extraOxygen = 2
                totalDoubleBond = totalDoubleBond + 1

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_EOS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' HexCer exclude
                Dim thresholdHex = 30.0
                Dim diagnosticMzHex = diagnosticMz - 162.052833
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMzHex, thresholdHex)
                If isClassIon2Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        ' if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + 3 * HydrogenMass - 2 * OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        'Console.WriteLine(sphCarbon + ":" + sphDouble + " " + sph1 + " " + sph2 + " " + sph3);

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 5
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_1("Cer", LbmClass.Cer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing ' 20201203 edit
                ' extra esteracyl contains "2O" and 1DoubleBond
                Dim extraOxygen = 2
                'totalDoubleBond = totalDoubleBond + 1;

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_EOS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            ElseIf Equals(adductform, "[M+Na]+") Then
                ' HexCer exclude
                Dim thresholdHex = 30.0
                Dim diagnosticMzHex = theoreticalMz - 162.052833 - H2O
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMzHex, thresholdHex)
                If isClassIon2Found Then Return Nothing
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_1("Cer", LbmClass.Cer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                ' extra esteracyl contains "2O" and 1DoubleBond
                Dim extraOxygen = 2
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_EOS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCeramideeods(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal minOmegaacylCarbon As Integer, ByVal maxOmegaacylCarbon As Integer, ByVal minOmegaacylDoubleBond As Integer, ByVal maxOmegaacylDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    Dim sphDouble = 0

                    Dim remainCarbon = totalCarbon - sphCarbon
                    Dim remainDouble = totalDoubleBond - sphDouble
                    Dim carbonLimit = Math.Min(remainCarbon, maxOmegaacylCarbon)
                    Dim doubleLimit = Math.Min(remainDouble, maxOmegaacylDoubleBond)
                    For acylCarbon = minOmegaacylCarbon To carbonLimit
                        For acylDouble = 0 To doubleLimit
                            Dim terminalCarbon = totalCarbon - sphCarbon - acylCarbon
                            Dim terminalDouble = totalDoubleBond - sphDouble - acylDouble

                            Dim esterloss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(terminalCarbon, terminalDouble) + OxygenMass + HydrogenMass ' 
                            Dim esterFa = LipidMsmsCharacterizationUtility.fattyacidProductIon(terminalCarbon, terminalDouble)
                            Dim acylamide = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + NitrogenMass + HydrogenMass + Electron

                            Dim query1 = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                    .Mass = esterFa,
                                    .Intensity = 30
                                }
                                }

                            Dim foundCount1 = 0
                            Dim averageIntensity1 = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query1, ms2Tolerance, foundCount1, averageIntensity1)


                            If foundCount1 = 1 Then ' the diagnostic acyl ion must be observed for level 2 annotation

                                Dim query2 = New List(Of SpectrumPeak) From {
                                            New SpectrumPeak() With {
                                        .Mass = esterloss,
                                        .Intensity = 1
                                    },
                                            New SpectrumPeak() With {
                                        .Mass = esterFa,
                                        .Intensity = 30
                                    },
                                            New SpectrumPeak() With {
                                        .Mass = acylamide,
                                        .Intensity = 0.01
                                    }
                                        }

                                Dim foundCount2 = 0
                                Dim averageIntensity2 = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                                If foundCount2 = 3 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, terminalCarbon, terminalDouble, averageIntensity1)
                                    candidates.Add(molecule)
                                ElseIf foundCount2 = 2 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_0("Cer", LbmClass.Cer_EOS, "d", sphCarbon + acylCarbon, sphDouble + acylDouble, terminalCarbon, terminalDouble, averageIntensity2)
                                    candidates.Add(molecule)
                                End If
                            End If
                        Next
                    Next

                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("Cer-EODS", LbmClass.Cer_EODS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                ' extra esteracyl contains "2O" and 1DoubleBond
                Dim extraOxygen = 2
                totalDoubleBond = totalDoubleBond + 1

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_EODS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfHexceramideeos(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal minOmegaacylCarbon As Integer, ByVal maxOmegaacylCarbon As Integer, ByVal minOmegaacylDoubleBond As Integer, ByVal maxOmegaacylDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' In positive, HexCer-EOS d18:1/34:0: In negative, HexCer-EOS d38:1-O-18:2
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If maxOmegaacylCarbon > totalCarbon Then maxOmegaacylCarbon = totalCarbon
        If maxOmegaacylDoubleBond > totalDoubleBond Then maxOmegaacylDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [[M-C6H10O5-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIonFound <> True Then Return Nothing
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim remainCarbon = totalCarbon - sphCarbon
                        Dim remainDouble = totalDoubleBond - sphDouble
                        Dim carbonLimit = Math.Min(remainCarbon, maxOmegaacylCarbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxOmegaacylDoubleBond)

                        For omegaAcylCarbon = minOmegaacylCarbon To carbonLimit
                            For omegaAcylDouble = 0 To doubleLimit
                                Dim acylCarbon = totalCarbon - sphCarbon - omegaAcylCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - omegaAcylDouble

                                Dim omegaAcylloss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(omegaAcylCarbon, omegaAcylDouble) + OxygenMass + HydrogenMass ' 
                                Dim omegaAcyllossHexloss = omegaAcylloss - 162.052833 ' 
                                Dim omegaAcylFA = LipidMsmsCharacterizationUtility.fattyacidProductIon(omegaAcylCarbon, omegaAcylDouble)

                                Dim omegaAcyllossHexH2Oloss = omegaAcyllossHexloss - H2O ' maybe this fragmment is not found
                                Dim threshold3 = 1.0
                                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, omegaAcyllossHexH2Oloss, threshold3)
                                If isClassIon3Found = True Then Return Nothing

                                Dim isOmegaAcylFragmentFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, omegaAcylFA, 0.01)
                                If Not isOmegaAcylFragmentFound Then Continue For

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = omegaAcylloss,
                                        .Intensity = 0.01
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = omegaAcyllossHexloss,
                                        .Intensity = 0.01
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = omegaAcylFA,
                                        .Intensity = 0.01
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                'if (sphCarbon == 48 && sphDouble == 3 && omegaAcylCarbon == 19 && omegaAcylDouble == 0) {
                                '    Console.WriteLine();
                                '}

                                If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                                    Dim acylamide = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + NitrogenMass + HydrogenMass + Electron
                                    Dim query2 = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                            .Mass = acylamide,
                                            .Intensity = 0.01
                                        }
                                    }
                                    Dim foundCount2 = 0
                                    Dim averageIntensity2 = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                                    If foundCount2 = 1 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2("HexCer", LbmClass.HexCer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, omegaAcylCarbon, omegaAcylDouble, averageIntensity)
                                        candidates.Add(molecule)
                                    Else
                                        Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_0("HexCer", LbmClass.HexCer_EOS, "d", sphCarbon + acylCarbon, sphDouble + acylDouble, omegaAcylCarbon, omegaAcylDouble, averageIntensity)
                                        candidates.Add(molecule)
                                    End If
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("HexCer-EOS", LbmClass.HexCer_EOS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 AndAlso isClassIonFound <> True Then Return Nothing
                ' extra esteracyl contains "2O" and 1DoubleBond
                Dim extraOxygen = 2
                totalDoubleBond = totalDoubleBond + 1

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_EOS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -Hex(-C6H10O5)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 162.052833
                ' seek -H2O -Hex(-C6H10O5)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = If(Equals(adductform, "[M+H]+"), diagnosticMz - H2O, diagnosticMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = Not True OrElse isClassIon2Found = Not True Then Return Nothing

                'reject HexHexCer


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + 3 * HydrogenMass - 2 * OxygenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+

                        'Console.WriteLine(sphCarbon + ":" + sphDouble + " " + sph1 + " " + sph2 + " " + sph3);

                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 5
                            }
                            'new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_1("HexCer", LbmClass.HexCer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                ' extra esteracyl contains "2O" and 1DoubleBond
                Dim extraOxygen = 2
                totalDoubleBond = totalDoubleBond + 1

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_EOS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            ElseIf Equals(adductform, "[M+Na]+") Then
                ' HexCer exclude
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2_1("HexCer", LbmClass.HexCer_EOS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Dim extraOxygen = 2
                totalDoubleBond = totalDoubleBond + 1

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("HexCer", LbmClass.HexCer_EOS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, extraOxygen, candidates, 3)
            End If
        End If
        Return Nothing
    End Function



    Public Shared Function JudgeIfCeramideos(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)
                ' seek [M-CH2O-H]-
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = diagnosticMz - H2O - 12
                ' seek [M-CH4O2-H]-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = diagnosticMz1 - H2O
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 20.0
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing
                ElseIf Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") Then
                    Dim diagnosticMz6 = diagnosticMz
                    Dim threshold6 = 20.0
                    Dim isClassIon6Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz6, threshold6)
                    If Not isClassIon6Found Then Return Nothing
                End If


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1) - 2 * OxygenMass - HydrogenMass ' as [FA+C2H3N]- 
                        Dim sphFragment = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon - 2, sphDouble) - OxygenMass - NitrogenMass - Proton ' [Sph-NCC-3H]-
                        Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + OxygenMass
                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 0.1
                            },
                                New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 1
                            },
                                New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 1
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim acylOxidized = 1 '
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("Cer", LbmClass.Cer_HS, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_HS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAcylsm(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal minExtAcylCarbon As Integer, ByVal maxExtAcylCarbon As Integer, ByVal minExtAcylDoubleBond As Integer, ByVal maxExtAcylDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If maxExtAcylCarbon > totalCarbon Then maxExtAcylCarbon = totalCarbon
        If maxExtAcylDoubleBond > totalDoubleBond Then maxExtAcylDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold1 = 50.0
                Dim diagnosticMz1 = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found <> True Then Return Nothing
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz2 = theoreticalMz - 60.021129369
                    Dim threshold2 = 50.0
                    Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                    If isClassIon2Found Then Return Nothing
                End If

                Dim diagnosticMz3 = 168.0431
                Dim threshold3 = 0.01
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim remainCarbon = totalCarbon - sphCarbon
                        Dim remainDouble = totalDoubleBond - sphDouble
                        Dim carbonLimit = Math.Min(remainCarbon, maxSphCarbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSphDoubleBond)

                        For extCarbon = minExtAcylCarbon To carbonLimit
                            For extDouble = minExtAcylDoubleBond To doubleLimit
                                Dim acylCarbon = totalCarbon - sphCarbon - extCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - extDouble

                                Dim extAcylloss = diagnosticMz1 - LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble) - HydrogenMass  ' 
                                Dim extFa = LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble)

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = extAcylloss,
                                        .Intensity = 0.01
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = extFa,
                                        .Intensity = 0.01
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 2 Then ' 
                                    Dim acylamide = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) + NitrogenMass + HydrogenMass + Electron + OxygenMass
                                    Dim query2 = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
    .Mass = acylamide,
    .Intensity = 0.01
}
}
                                    Dim foundCount2 = 0
                                    Dim averageIntensity2 = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                                    If foundCount2 = 1 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getAsmMoleculeObjAsLevel2("SM", LbmClass.ASM, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, extCarbon, extDouble, averageIntensity)
                                        candidates.Add(molecule)
                                    Else
                                        Dim molecule = LipidMsmsCharacterizationUtility.getAsmMoleculeObjAsLevel2_0("SM", LbmClass.ASM, "d", sphCarbon + acylCarbon, sphDouble + acylDouble, extCarbon, extDouble, averageIntensity)
                                        candidates.Add(molecule)
                                    End If
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates.Count = 0 AndAlso Not isClassIon3Found Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.ASM, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim threshold1 = 50.0
                Dim diagnosticMz1 = 184.073
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found <> True Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        For extCarbon = minExtAcylCarbon To maxExtAcylCarbon
                            For extDouble = minExtAcylDoubleBond To maxExtAcylDoubleBond
                                Dim acylCarbon = totalCarbon - sphCarbon - extCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - extDouble

                                Dim extAcylloss = theoreticalMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble) - HydrogenMass + Electron  ' 
                                'Console.WriteLine("ASM {0} Unique mass {1}", "d" + sphCarbon + acylCarbon + ":" + sphDouble + acylDouble + "-O-" + extCarbon + ":" + extDouble, extAcylloss);

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = extAcylloss,
                                        .Intensity = 1
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 1 Then ' 
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAsmMoleculeObjAsLevel2_0("SM", LbmClass.ASM, "d", sphCarbon + acylCarbon, sphDouble + acylDouble, extCarbon, extDouble, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM", LbmClass.ASM, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfAcylcerbds(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal minExtAcylCarbon As Integer, ByVal maxExtAcylCarbon As Integer, ByVal minExtAcylDoubleBond As Integer, ByVal maxExtAcylDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If maxExtAcylCarbon > totalCarbon Then maxExtAcylCarbon = totalCarbon
        If maxExtAcylDoubleBond > totalDoubleBond Then maxExtAcylDoubleBond = totalDoubleBond

        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim remainCarbon = totalCarbon - sphCarbon
                        Dim remainDouble = totalDoubleBond - sphDouble
                        Dim carbonLimit = Math.Min(remainCarbon, maxSphCarbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSphDoubleBond)

                        For acylCarbon = minExtAcylCarbon To carbonLimit
                            For acylDB = minExtAcylDoubleBond To doubleLimit
                                Dim terminalC = totalCarbon - sphCarbon - acylCarbon
                                Dim terminalDB = totalDoubleBond - sphDouble - acylDB

                                Dim esterloss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(terminalC, terminalDB) - HydrogenMass ' 
                                Dim esterFa = LipidMsmsCharacterizationUtility.fattyacidProductIon(terminalC, terminalDB)
                                Dim acylFragment = esterloss - ((sphCarbon - 3) * 12 + ((sphCarbon - 3) * 2 - 2) * HydrogenMass)

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = esterloss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = esterFa,
                                        .Intensity = 50
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = acylFragment,
                                        .Intensity = 1
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount >= 2 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getEsterceramideMoleculeObjAsLevel2("Cer", LbmClass.Cer_EBDS, "d", sphCarbon, sphDouble, acylCarbon, acylDB, terminalC, terminalDB, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("AcylCer-BDS", LbmClass.AcylCer_BDS, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer", LbmClass.Cer_EBDS, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAcylhexcer(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal minExtAcylCarbon As Integer, ByVal maxExtAcylCarbon As Integer, ByVal minExtAcylDoubleBond As Integer, ByVal maxExtAcylDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If maxExtAcylCarbon > totalCarbon Then maxExtAcylCarbon = totalCarbon
        If maxExtAcylDoubleBond > totalDoubleBond Then maxExtAcylDoubleBond = totalDoubleBond
        Dim sphOxidized = 2
        Dim acylOxidized = totalOxidized - sphOxidized

        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [[M-C6H10O5-H]-  // reject HexCer-EOS
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - 162.052833
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                'if (isClassIonFound == true) return null;

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz5 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold5 = 50.0
                    Dim isClassIon5Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz5, threshold5)
                    If isClassIon5Found Then Return Nothing
                End If


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim remainCarbon = totalCarbon - sphCarbon
                        Dim remainDouble = totalDoubleBond - sphDouble
                        'var carbonLimit = Math.Min(remainCarbon, maxExtAcylCarbon);   // use to Brute force calc
                        'var doubleLimit = Math.Min(remainDouble, maxExtAcylDoubleBond); // use to Brute force calc

                        Dim carbonLimit = maxExtAcylCarbon
                        Dim doubleLimit = maxExtAcylDoubleBond


                        For extCarbon = minExtAcylCarbon To carbonLimit
                            For extDouble = minExtAcylDoubleBond To doubleLimit
                                Dim acylCarbon = totalCarbon - sphCarbon - extCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - extDouble

                                Dim extAcylLoss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble) - HydrogenMass + H2O '[M-FA]-
                                Dim extAcylLoss2 = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble) - HydrogenMass      '[M-FA-H2O]-
                                Dim extAcylHexloss = extAcylLoss - 161.04555 - HydrogenMass         ' 
                                Dim extAcylFa = LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble)
                                Dim sphLoss = diagnosticMz - ((sphCarbon - 2) * 12 + OxygenMass + HydrogenMass * ((sphCarbon - 2) * 2) - sphDouble * 2)  '[M-Sph+C2H6NO]-
                                Dim sphLoss2 = sphLoss - H2O      '[M-Sph+C2H4N]-
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = extAcylHexloss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = extAcylFa,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphLoss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphLoss2,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = extAcylLoss,
                                        .Intensity = 10
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = extAcylLoss2,
                                        .Intensity = 10
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount >= 4 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2("AHexCer", LbmClass.AHexCer, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, extCarbon, extDouble, averageIntensity, acylOxidized)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("AcylHexCer", LbmClass.AcylHexCer, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("AHexCer", LbmClass.AHexCer, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 3)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        For extCarbon = minExtAcylCarbon To maxExtAcylCarbon
                            For extDouble = minExtAcylDoubleBond To maxExtAcylDoubleBond
                                Dim acylCarbon = totalCarbon - sphCarbon - extCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - extDouble

                                ' eg. AHexCer 16:0/d18:1/22:0h
                                Dim exAcylSugarIon = LipidMsmsCharacterizationUtility.acylCainMass(extCarbon, extDouble) + Sugar162 - Electron ' Hex 16:0, m/z 401
                                Dim exAcylSugarLossIon = theoreticalMz - exAcylSugarIon - H2O + Proton ' Hex 16:0, m/z 401

                                Dim ceramideIon = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(extCarbon, extDouble) - Sugar162 + HydrogenMass  ' Cer d40:1h, m/z 638.6
                                Dim ceramideIon_1WaterLoss = ceramideIon - H2O
                                Dim ceramideIon_2WaterLoss = ceramideIon_1WaterLoss - H2O

                                Dim sphIon = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) - OxygenMass + 2.0 * HydrogenMass ' Sph d18:1 -H2O, m/z 282;
                                Dim sphIon_1H2OLoss = sphIon - H2O ' Sph d18:1 -2H2O, m/z 264;
                                Dim sphIon_CH2OLoss = sphIon_1H2OLoss - 12 ' Sph d18:1 -CH2O, m/z 252;

                                'Console.WriteLine("AcylHex {0}, ExAcyl {1}, Cer {2}, Cer-H2O {3}, Cer-2H2O {4}, Sph {5}, Sph-H2O {6}, Sph-CH2O {7}",
                                '    "AHexCer" + extCarbon + ":" + extDouble + "/d" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble,
                                '    exAcylSugarIon, ceramideIon, ceramideIon_1WaterLoss, ceramideIon_2WaterLoss, sphIon, sphIon_1H2OLoss, sphIon_CH2OLoss);

                                Dim exAcylQuery = New List(Of SpectrumPeak)() From {
                                    New SpectrumPeak() With {
                                        .Mass = exAcylSugarIon,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = exAcylSugarLossIon,
                                        .Intensity = 1
                                    }
                                }

                                Dim ceramideQuery = New List(Of SpectrumPeak)() From {
                                    New SpectrumPeak() With {
                                        .Mass = ceramideIon,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = ceramideIon_1WaterLoss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = ceramideIon_2WaterLoss,
                                        .Intensity = 1
                                    }
                                }

                                Dim sphQuery = New List(Of SpectrumPeak)() From {
                                    New SpectrumPeak() With {
                                        .Mass = sphIon,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphIon_1H2OLoss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphIon_CH2OLoss,
                                        .Intensity = 1
                                    }
                                }

                                Dim exAcylQueryFoundCount = 0
                                Dim exAcylQueryAverageInt = 0.0

                                Dim ceramideQueryFoundCount = 0
                                Dim ceramideQueryAverageInt = 0.0

                                Dim sphQueryFoundCount = 0
                                Dim sphQueryAverageInt = 0.0

                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, exAcylQuery, ms2Tolerance, exAcylQueryFoundCount, exAcylQueryAverageInt)
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, ceramideQuery, ms2Tolerance, ceramideQueryFoundCount, ceramideQueryAverageInt)
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, sphQuery, ms2Tolerance, sphQueryFoundCount, sphQueryAverageInt)

                                If sphQueryFoundCount >= 1 AndAlso ceramideQueryFoundCount >= 1 AndAlso exAcylQueryFoundCount = 1 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2("AHexCer", LbmClass.AHexCer, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, extCarbon, extDouble, exAcylQueryAverageInt + ceramideQueryAverageInt + sphQueryAverageInt, acylOxidized)
                                    candidates.Add(molecule)
                                ElseIf ceramideQueryFoundCount >= 1 AndAlso exAcylQueryFoundCount = 1 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2_0("AHexCer", LbmClass.AHexCer, "d", sphCarbon + acylCarbon, sphDouble + acylDouble, extCarbon, extDouble, exAcylQueryAverageInt + ceramideQueryAverageInt, acylOxidized)
                                    candidates.Add(molecule)
                                End If
                                'else if (sphQueryFoundCount >= 1)
                                '{
                                '    var molecule = getAcylhexceramideMoleculeObjAsLevel2_1("AHexCer", LbmClass.AHexCer, "d", sphCarbon, sphDouble,
                                '    extCarbon + acylCarbon, extDouble + acylDouble, exAcylQueryAverageInt + ceramideQueryAverageInt, "+O");
                                '    candidates.Add(molecule);
                                '}
                            Next
                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("AHexCer", LbmClass.AHexCer, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAshexcer(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal minExtAcylCarbon As Integer, ByVal maxExtAcylCarbon As Integer, ByVal minExtAcylDoubleBond As Integer, ByVal maxExtAcylDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        Dim sphOxidized = 2
        Dim acylOxidized = totalOxidized - sphOxidized
        Dim hydrogenString = "d"
        Dim queryExtAcylFoundCount As Integer = Nothing, queryExtAcylAverageInt As Double = Nothing, querySphFoundCount As Integer = Nothing, querySphAverageInt As Double = Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek [M-SO3-H2O+H]+
                Dim threshold = 1.0
                Dim diagnosticMz1 = theoreticalMz - SulfurMass - 3 * OxygenMass - H2O - Electron

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                If Not isClassIon1Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        For extCarbon = minExtAcylCarbon To maxExtAcylCarbon
                            For extDouble = minExtAcylDoubleBond To maxExtAcylDoubleBond
                                Dim acylCarbon = totalCarbon - sphCarbon - extCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - extDouble

                                ' eg. ASHexCer 16:0/18:1;O2/24:1(or 24:0;O etc)
                                Dim exAcylSulfoSugar = LipidMsmsCharacterizationUtility.acylCainMass(extCarbon, extDouble) + Sugar162 + (OxygenMass * 3 + SulfurMass) ' Hex 16:0, 

                                Dim ceramideIon = theoreticalMz - exAcylSulfoSugar + HydrogenMass  ' Cer d40:1h, m/z 638.6
                                Dim ceramideIon_1WaterLoss = ceramideIon - H2O
                                Dim ceramideIon_2WaterLoss = ceramideIon_1WaterLoss - H2O

                                Dim sphIon = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) - OxygenMass + 2.0 * HydrogenMass ' Sph d18:1 -H2O, m/z 282;
                                Dim sphIon_1H2OLoss = sphIon - H2O ' Sph d18:1 -2H2O, m/z 264;
                                Dim sphIon_CH2OLoss = sphIon_1H2OLoss - 12 ' Sph d18:1 -CH2O, m/z 252;


                                'var exAcylQuery = new List<SpectrumPeak>() {
                                '    new SpectrumPeak() { Mass = exAcylSulfoSugar-Electron, Intensity = 1 }
                                '};

                                Dim ceramideQuery = New List(Of SpectrumPeak)() From {
                                    New SpectrumPeak() With {
                                        .Mass = ceramideIon,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = ceramideIon_1WaterLoss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = ceramideIon_2WaterLoss,
                                        .Intensity = 1
                                    }
                                }

                                Dim sphQuery = New List(Of SpectrumPeak)() From {
                                    New SpectrumPeak() With {
                                        .Mass = sphIon,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphIon_1H2OLoss,
                                        .Intensity = 1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphIon_CH2OLoss,
                                        .Intensity = 1
                                    }
                                }

                                'var exAcylQueryFoundCount = 0;
                                'var exAcylQueryAverageInt = 0.0;

                                Dim ceramideQueryFoundCount = 0
                                Dim ceramideQueryAverageInt = 0.0

                                Dim sphQueryFoundCount = 0
                                Dim sphQueryAverageInt = 0.0

                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, ceramideQuery, ms2Tolerance, ceramideQueryFoundCount, ceramideQueryAverageInt)
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, sphQuery, ms2Tolerance, sphQueryFoundCount, sphQueryAverageInt)

                                If sphQueryFoundCount >= 1 AndAlso ceramideQueryFoundCount >= 1 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2("ASHexCer", LbmClass.ASHexCer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, extCarbon, extDouble, ceramideQueryAverageInt + sphQueryAverageInt, acylOxidized)
                                    candidates.Add(molecule)
                                ElseIf ceramideQueryFoundCount >= 1 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2_0("ASHexCer", LbmClass.ASHexCer, hydrogenString, sphCarbon + acylCarbon, sphDouble + acylDouble, extCarbon, extDouble, ceramideQueryAverageInt, acylOxidized)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASHexCer", LbmClass.ASHexCer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 3)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek [H2SO4-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = HydrogenMass * 2 + OxygenMass * 4 + SulfurMass - Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                '   may be not found fragment to define sphingo and acyl chain
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim remainCarbon = totalCarbon - sphCarbon
                        Dim remainDouble = totalDoubleBond - sphDouble
                        'var carbonLimit = Math.Min(remainCarbon, maxExtAcylCarbon);   // use to Brute force calc
                        'var doubleLimit = Math.Min(remainDouble, maxExtAcylDoubleBond); // use to Brute force calc

                        Dim carbonLimit = maxExtAcylCarbon
                        Dim doubleLimit = maxExtAcylDoubleBond

                        For extCarbon = minExtAcylCarbon To carbonLimit
                            For extDouble = minExtAcylDoubleBond To doubleLimit
                                Dim acylCarbon = totalCarbon - sphCarbon - extCarbon
                                Dim acylDouble = totalDoubleBond - sphDouble - extDouble

                                Dim extAcylFa = LipidMsmsCharacterizationUtility.fattyacidProductIon(extCarbon, extDouble)
                                Dim sphMass = sphCarbon * 12 + (2 * sphCarbon - 2 * sphDouble + 3) * HydrogenMass + OxygenMass * 2 + NitrogenMass
                                'var sphLoss = theoreticalMz - ((sphCarbon - 2) * 12 + MassDiffDictionary.OxygenMass + MassDiffDictionary.HydrogenMass * ((sphCarbon - 2) * 2) - sphDouble * 2);  //[M-Sph+C2H6NO]-
                                Dim sphLoss = theoreticalMz - sphMass + 12 * 2 + HydrogenMass * 5 + NitrogenMass  '"[M-Sph+C2H4N]-"
                                Dim sphLoss2 = sphLoss - H2O      '[M-Sph+C2H4N]-
                                Dim queryExtAcyl = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = extAcylFa,
                                        .Intensity = 1.0
                                    }
                                }
                                Dim querySph = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = sphLoss,
                                        .Intensity = 0.005
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sphLoss2,
                                        .Intensity = 0.005
                                    }
                                }
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, queryExtAcyl, ms2Tolerance, queryExtAcylFoundCount, queryExtAcylAverageInt)
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, querySph, ms2Tolerance, querySphFoundCount, querySphAverageInt)

                                If queryExtAcylFoundCount > 0 Then
                                    If querySphFoundCount > 0 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2("ASHexCer", LbmClass.ASHexCer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, extCarbon, extDouble, queryExtAcylAverageInt + querySphAverageInt, acylOxidized)
                                        candidates.Add(molecule)
                                    Else
                                        Dim molecule = LipidMsmsCharacterizationUtility.getAcylhexceramideMoleculeObjAsLevel2_0("ASHexCer", LbmClass.ASHexCer, hydrogenString, sphCarbon + acylCarbon, sphDouble + acylDouble, extCarbon, extDouble, queryExtAcylAverageInt, acylOxidized)
                                        candidates.Add(molecule)
                                    End If
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASHexCer", LbmClass.ASHexCer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidized, candidates, 3)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfShexcer(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - (NitrogenMass + HydrogenMass * 3), theoreticalMz)
                ' seek [M-SO3-H2O+H]+
                Dim threshold = 1.0
                Dim diagnosticMz1 = diagnosticMz - SulfurMass - 3 * OxygenMass - H2O - Electron
                ' seek [M-H2O-SO3-C6H10O5+H]+
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz1 - 162.052833

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found = Not True AndAlso isClassIon2Found = Not True Then Return Nothing

                Dim hydrogenString = "d"
                Dim sphOxidized = 2
                Dim acylOxidized = totalOxidized - sphOxidized

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                If acylOxidized = 0 Then
                    For sphCarbon = minSphCarbon To maxSphCarbon
                        For sphDouble = minSphDoubleBond To maxSphDoubleBond
                            If sphCarbon >= 22 Then Continue For
                            Dim acylCarbon = totalCarbon - sphCarbon
                            'if (acylCarbon < minSphCarbon) { break; }
                            Dim acylDouble = totalDoubleBond - sphDouble

                            Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                            Dim sph2 = sph1 - H2O
                            Dim sph3 = sph2 - 12
                            Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass - Electron


                            Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                    .Mass = sph1,
                                    .Intensity = 1
                                },
                            New SpectrumPeak() With {
                                    .Mass = sph2,
                                    .Intensity = 1
                                },
                            New SpectrumPeak() With {
                                    .Mass = sph3,
                                    .Intensity = 1
                                }
                            ' new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                                Dim foundCount = 0
                            Dim averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                            If foundCount >= 1 Then ' 
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("SHexCer", LbmClass.SHexCer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        Next
                    Next   ' case of acyl chain have extra OH
                Else

                    For sphCarbon = minSphCarbon To maxSphCarbon
                        For sphDouble = minSphDoubleBond To maxSphDoubleBond
                            Dim acylCarbon = totalCarbon - sphCarbon
                            'if (acylCarbon < minSphCarbon) { break; }
                            Dim acylDouble = totalDoubleBond - sphDouble

                            Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass * acylOxidized
                            Dim sph2 = sph1 - H2O
                            Dim sph3 = sph2 - 12
                            Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass - Electron

                            'Console.WriteLine("SHexCer {0}:{1};2O/{2}:{3}, sph1={4}, sph2={5}, sph3={6}", sphCarbon, sphDouble, acylCarbon, acylDouble, sph1, sph2, sph3);

                            Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                    .Mass = sph1,
                                    .Intensity = 1
                                },
                            New SpectrumPeak() With {
                                    .Mass = sph2,
                                    .Intensity = 1
                                },
                            New SpectrumPeak() With {
                                    .Mass = sph3,
                                    .Intensity = 1
                                }
                            ' new SpectrumPeak() { Mass = acylamide, Intensity = 0.01 }
                            }

                                Dim foundCount = 0
                            Dim averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                            If foundCount >= 1 Then ' 
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("SHexCer", LbmClass.SHexCer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        Next
                    Next
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SHexCer", LbmClass.SHexCer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidized, candidates, 2)

                End If


            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek [H2SO4-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 96.960103266

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                '   may be not found fragment to define sphingo and acyl chain
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("SHexCer", LbmClass.SHexCer, "d", totalCarbon, totalDoubleBond,
                '    score);
                'candidates.Add(molecule0);
                Dim hydrogenString = "d"
                Dim sphOxidized = 2
                Dim acylOxidized = totalOxidized - sphOxidized

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SHexCer", LbmClass.SHexCer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidized, candidates, 2)
            End If

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGm3(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' calc [M+H]+
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - 17.026549, theoreticalMz)
                ' seek -H2O
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - H2O
                ' seek [M-C23H37NO18-H2O+H]+
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz - 12 * 23 - 19 * H2O - NitrogenMass - HydrogenMass
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found = Not True OrElse isClassIon2Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = diagnosticMz2 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("GM3", LbmClass.GM3, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (candidates == null || candidates.Count == 0)
                '{
                '    var score = 0;
                '    var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("GM3", LbmClass.GM3, "d", totalCarbon, totalDoubleBond,
                '        score);
                '    candidates.Add(molecule0);
                '}

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GM3", LbmClass.GM3, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
                ' seek [C11H17NO8-H]-  as 290.0875914768
                Dim threshold1 = 0.01
                Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
                ''' seek [M-C11H17NO8-H]-
                'var threshold2 = 0.01;
                'var diagnosticMz2 = theoreticalMz - diagnosticMz1 - MassDiffDictionary.HydrogenMass;

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                '   may be not found fragment to define sphingo and acyl chain
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule0 = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2_0("GM3", LbmClass.GM3, "d", totalCarbon, totalDoubleBond,
                '    score);
                'candidates.Add(molecule0);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GM3", LbmClass.GM3, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGD1a(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+2H]2+") OrElse Equals(adduct.AdductIonName, "[M+2NH4]2+") Then
                ' seek [C25H40N2O18+H]+ (maybe higher than GD1b)
                Dim threshold = 10.0
                Dim diagnosticMz = 12 * 25 + HydrogenMass * 40 + NitrogenMass * 2 + OxygenMass * 18 + Proton
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O - OxygenMass + Proton ' fix 20220905

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("GD1a", LbmClass.GD1a, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GD1a", LbmClass.GD1a, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            ''' seek [M-C11H17NO8-H]-
            'var threshold2 = 0.01;
            'var diagnosticMz2 = theoreticalMz - diagnosticMz1 - MassDiffDictionary.HydrogenMass;

            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing

            ' from here, acyl level annotation is executed.
            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GD1a", LbmClass.GD1a, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfGD1b(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+2H]2+") OrElse Equals(adduct.AdductIonName, "[M+2NH4]2+") Then
                ' seek [C14H23NO10+H]+ // 366 (maybe higher than GD1a)
                Dim threshold = 10.0
                Dim diagnosticMz = 12 * 14 + HydrogenMass * 23 + NitrogenMass * 1 + OxygenMass * 10 + Proton
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found = Not True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O - OxygenMass + Proton ' fix 20220905

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("GD1b", LbmClass.GD1b, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GD1b", LbmClass.GD1b, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            ''' seek [M-C11H17NO8-H]-
            'var threshold2 = 0.01;
            'var diagnosticMz2 = theoreticalMz - diagnosticMz1 - MassDiffDictionary.HydrogenMass;

            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing

            ' from here, acyl level annotation is executed.
            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GD1b", LbmClass.GD1b, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfGD2(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            ''' seek [M-C11H17NO8-H]-
            'var threshold2 = 0.01;
            'var diagnosticMz2 = theoreticalMz - diagnosticMz1 - MassDiffDictionary.HydrogenMass;

            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing

            ' from here, acyl level annotation is executed.
            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GD2", LbmClass.GD2, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfGD3(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            ''' seek [M-C11H17NO8-H]-
            'var threshold2 = 0.01;
            'var diagnosticMz2 = theoreticalMz - diagnosticMz1 - MassDiffDictionary.HydrogenMass;

            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing

            ' from here, acyl level annotation is executed.
            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GD3", LbmClass.GD3, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGM1(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+2H]2+") OrElse Equals(adduct.AdductIonName, "[M+2NH4]2+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek [C14H23NO10+H]+ // 366 
                Dim threshold = 5.0
                Dim diagnosticMz = 12 * 14 + HydrogenMass * 23 + NitrogenMass * 1 + OxygenMass * 10 + Proton
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found = Not True Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O - OxygenMass + Proton ' fix 20230417

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("GM1", LbmClass.GM1, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GM1", LbmClass.GM1, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing
            ''' seek  [C11H17NO8-H]- *2 as 581.19 must be not found
            Dim threshold2 = 0.1
            Dim diagnosticMz2 = diagnosticMz1 * 2 + HydrogenMass
            Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
            If isClassIon2Found = True Then Return Nothing


            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GM1", LbmClass.GM1, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGT1b(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+2H]2+") OrElse Equals(adduct.AdductIonName, "[M+2NH4]2+") Then
                ' seek [C14H23NO10+H]+ // 366 
                Dim threshold = 5.0
                Dim diagnosticMz = 12 * 14 + HydrogenMass * 23 + NitrogenMass * 1 + OxygenMass * 10 + Proton
                ' seek [C25H40N2O18+H]+ //657
                Dim diagnosticMz2 = 12 * 25 + HydrogenMass * 40 + NitrogenMass * 2 + OxygenMass * 18 + Proton
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found = Not True OrElse isClassIon2Found = Not True Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O - OxygenMass + Proton ' fix 20220905

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("GT1b", LbmClass.GT1b, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GT1b", LbmClass.GT1b, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing
            ''' seek  [C11H17NO8-H]- *2 as 581.19
            Dim threshold2 = 0.01
            Dim diagnosticMz2 = diagnosticMz1 * 2 + HydrogenMass
            Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
            If isClassIon2Found <> True Then Return Nothing

            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GT1b", LbmClass.GT1b, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGQ1b(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+2H]2+") OrElse Equals(adduct.AdductIonName, "[M+2NH4]2+") Then
                ' seek [C14H23NO10+H]+ // 366 
                Dim threshold = 5.0
                Dim diagnosticMz = 12 * 14 + HydrogenMass * 23 + NitrogenMass * 1 + OxygenMass * 10 + Proton
                ' seek [C25H40N2O18+H]+ //657
                Dim diagnosticMz2 = 12 * 25 + HydrogenMass * 40 + NitrogenMass * 2 + OxygenMass * 18 + Proton
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found = Not True OrElse isClassIon2Found = Not True Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O - OxygenMass + Proton ' fix 20220905

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("GQ1b", LbmClass.GQ1b, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GQ1b", LbmClass.GQ1b, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 290.0875914768
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + 8 * H2O + NitrogenMass
            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing
            ''' seek  [C11H17NO8-H]- *2 as 581.19
            Dim threshold2 = 0.1
            Dim diagnosticMz2 = diagnosticMz1 * 2 + HydrogenMass
            Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
            If isClassIon2Found <> True Then Return Nothing


            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GQ1b", LbmClass.GQ1b, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfNGcGM3(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") OrElse Equals(adduct.AdductIonName, "[M+H]+") Then
                ' calc [M+H]+
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - 17.026549, theoreticalMz)

                ' seek [M-H2O-C11H16NO9+H]+ // M-H2O-307
                Dim threshold = 5.0
                Dim diagnosticMz2 = diagnosticMz - H2O - (12 * 11 + HydrogenMass * 17 + NitrogenMass * 1 + OxygenMass * 9) ' fix 20220905
                ' seek M-H2O-307-1sugar
                Dim diagnosticMz3 = diagnosticMz2 - (12 * 6 + HydrogenMass * 10 + OxygenMass * 5)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If isClassIon2Found = Not True OrElse isClassIon3Found = Not True Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O - OxygenMass + Proton ' fix 20220905

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("NGcGM3", LbmClass.NGcGM3, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NGcGM3", LbmClass.NGcGM3, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M-2H]2-") Then
            ' seek [C11H17NO8-H]-  as 306.078
            Dim threshold1 = 0.01
            Dim diagnosticMz1 = 12 * 11 + HydrogenMass * 17 + NitrogenMass + OxygenMass * 9 - Proton
            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found <> True Then Return Nothing

            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NGcGM3", LbmClass.NGcGM3, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfSphinganine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -H2O 
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = theoreticalMz - H2O
                ' seek -2H2O 
                Dim threshold2 = 5.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O
                ' seek -H2O -CH2O
                Dim threshold3 = 1.0
                Dim diagnosticMz3 = diagnosticMz2 - 12
                ' frag -3H2O 
                Dim threshold4 = 5.0
                Dim diagnosticMz4 = diagnosticMz2 - H2O

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                Dim isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4)

                Dim trueCount = 0
                If isClassIon1Found Then trueCount += 1
                'if (isClassIon2Found) trueCount++;
                If isClassIon3Found Then trueCount += 1
                'if (isClassIon4Found) trueCount++;

                'if (isClassIon1Found == !true || isClassIon2Found == !true || isClassIon3Found == !true || isClassIon4Found == true) return null;
                If trueCount < 2 Then Return Nothing
                Dim candidates = New List(Of LipidMolecule)()
                'var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mass = diagnosticMz1, Intensity = threshold1 },
                '            new SpectrumPeak() { Mass = diagnosticMz2, Intensity = threshold2 },
                '            new SpectrumPeak() { Mass = diagnosticMz3, Intensity = threshold3 }
                '        };

                'var foundCount = 0;
                'var averageIntensity = 0.0;
                'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("Sphinganine", LbmClass.Sphinganine, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Dim sphOHCount = 2

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SPB", LbmClass.DHSph, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, sphOHCount, candidates, 1)
            End If

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSphingosine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -H2O 
                Dim threshold1 = 10.0
                Dim diagnosticMz1 = theoreticalMz - H2O
                ' seek -2H2O 
                Dim threshold2 = 10.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O
                ' seek -H2O -CH2O
                Dim threshold3 = 10.0
                Dim diagnosticMz3 = diagnosticMz2 - 12
                ' frag -3H2O 
                Dim threshold4 = 10.0
                Dim diagnosticMz4 = diagnosticMz2 - H2O

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                Dim isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4)
                'if (isClassIon1Found == !true || isClassIon2Found == !true || isClassIon3Found == !true || isClassIon4Found == true) return null;
                Dim trueCount = 0
                If isClassIon1Found Then trueCount += 1
                If isClassIon2Found Then trueCount += 1
                If isClassIon3Found Then trueCount += 1
                'if (isClassIon4Found) trueCount++;
                If trueCount < 3 Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                'var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mass = diagnosticMz1, Intensity = threshold1 },
                '            new SpectrumPeak() { Mass = diagnosticMz2, Intensity = threshold2 },
                '            new SpectrumPeak() { Mass = diagnosticMz3, Intensity = threshold3 }
                '        };

                'var foundCount = 0;
                'var averageIntensity = 0.0;
                'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("Sphingosine", LbmClass.Sphingosine, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Dim sphOHCount = 2

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SPB", LbmClass.Sph, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, sphOHCount, candidates, 1)
            End If

        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPhytosphingosine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -H2O 
                Dim threshold1 = 10.0
                Dim diagnosticMz1 = theoreticalMz - H2O
                ' seek -2H2O 
                Dim threshold2 = 10.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O
                ' seek -3H2O 
                Dim threshold3 = 10.0
                Dim diagnosticMz3 = diagnosticMz2 - H2O
                ' seek -H2O -CH2O
                Dim threshold4 = 10.0
                Dim diagnosticMz4 = diagnosticMz2 - 12

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                Dim isClassIon4Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz4, threshold4)
                'if (isClassIon1Found == !true || isClassIon2Found == !true || isClassIon3Found == !true || isClassIon4Found == !true) return null;

                Dim trueCount = 0
                If isClassIon1Found Then trueCount += 1
                If isClassIon2Found Then trueCount += 1
                If isClassIon3Found Then trueCount += 1
                If isClassIon4Found Then trueCount += 1
                If trueCount < 3 Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                'var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mass = diagnosticMz1, Intensity = threshold1 },
                '            new SpectrumPeak() { Mass = diagnosticMz2, Intensity = threshold2 },
                '            new SpectrumPeak() { Mass = diagnosticMz3, Intensity = threshold3 },
                '            new SpectrumPeak() { Mass = diagnosticMz4, Intensity = threshold4 }
                '        };

                'var foundCount = 0;
                'var averageIntensity = 0.0;
                'LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);
                'var molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("Phytosphingosine", LbmClass.Phytosphingosine, totalCarbon, totalDoubleBond,
                '               averageIntensity);
                'candidates.Add(molecule);

                Dim sphOHCount = 3

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SPB", LbmClass.PhytoSph, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, sphOHCount, candidates, 1)
            End If

        End If
        Return Nothing
    End Function


    'add 10/04/19
    Public Shared Function JudgeIfEtherpi(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C6H10O8P-
                Dim threshold = 5.0
                Dim diagnosticMz = 241.01188

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1_gly = (sn1Carbon + 3) * 12 + ((sn1Carbon + 3) * 2 - sn1Double * 2 + 1) * HydrogenMass + 5 * OxygenMass + PhosphorusMass - Proton
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1_gly,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PI", LbmClass.EtherPI, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI", LbmClass.EtherPI, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherps(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H5NO2 loss
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 87.032029
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon >= 24 AndAlso sn1Double >= 5 Then Return Nothing

                        Dim sn1_gly = (sn1Carbon + 3) * 12 + ((sn1Carbon + 3) * 2 - sn1Double * 2 + 1) * HydrogenMass + 5 * OxygenMass + PhosphorusMass - Proton
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1_gly,
                                .Intensity = 30.0
                            }
                            'new SpectrumPeak() { Mass = sn2, Intensity = 1.0 }
                            }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PS", LbmClass.EtherPS, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS", LbmClass.EtherPS, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPecermide(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek [C2H8NO4P-H]-
                Dim threshold = 5.0
                Dim diagnosticMz = 140.01182

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found = False Then Return Nothing

                Dim hydrogenString = "d"
                Dim sphOxidized = 2
                Dim acylOxidized = totalOxidized - sphOxidized

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim acylLoss1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = acylLoss1,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("PE-Cer", LbmClass.PE_Cer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                        Dim acylLoss2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) - acylOxidized * OxygenMass + Proton
                        Dim query2 = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = acylLoss2,
                                .Intensity = 0.1
                            }
                        }

                        Dim foundCount2 = 0
                        Dim averageIntensity2 = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity2)

                        If foundCount2 = 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("PE-Cer", LbmClass.PE_Cer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity2)
                            candidates.Add(molecule)
                        End If

                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE-Cer", LbmClass.PE_Cer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidized, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPicermide(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxdyzed As Integer) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C6H10O8P-
                Dim threshold = 5.0
                Dim diagnosticMz = 241.01188
                ' seek Inositol loss (-C6H10O5)
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = theoreticalMz - 162.05282

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                Dim hydrogenString = "d"
                Dim sphOxidized = 2
                Dim acylOxidyzed = totalOxdyzed - sphOxidized

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                If acylOxidyzed = 0 Then
                    For sphCarbon = minSphCarbon To maxSphCarbon
                        For sphDouble = minSphDoubleBond To maxSphDoubleBond
                            Dim acylCarbon = totalCarbon - sphCarbon
                            Dim acylDouble = totalDoubleBond - sphDouble

                            Dim acylLoss = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + Proton

                            Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = acylLoss,
                                    .Intensity = 0.1
                                }
                                }

                            Dim foundCount = 0
                            Dim averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                            Dim hydrogenString1 = "d"
                            'if (diagnosticMz - (12 * totalCarbon + (totalCarbon * 2 - totalDoubleBond * 2) * MassDiffDictionary.HydrogenMass + MassDiffDictionary.NitrogenMass + MassDiffDictionary.OxygenMass * 3) > 1)
                            '{
                            '    hydrogenString1 = "t";
                            '}

                            If foundCount = 1 Then ' now I set 2 as the correct level
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("PI-Cer", LbmClass.PI_Cer, hydrogenString1, sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        Next
                    Next

                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI-Cer", LbmClass.PI_Cer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidyzed, candidates, 2) ' oxidyzed PI-Cer case
                Else

                    For sphCarbon = minSphCarbon To maxSphCarbon
                        For sphDouble = minSphDoubleBond To maxSphDoubleBond
                            Dim acylCarbon = totalCarbon - sphCarbon
                            Dim acylDouble = totalDoubleBond - sphDouble

                            Dim acylOxidized = totalOxdyzed - sphOxidized

                            Dim acylLoss = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) - acylOxidized * OxygenMass + Proton

                            Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                    .Mass = acylLoss,
                                    .Intensity = 0.1
                                }
                                }

                            Dim foundCount = 0
                            Dim averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                            If foundCount = 1 Then ' now I set 2 as the correct level
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("PI-Cer", LbmClass.PI_Cer, hydrogenString, sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        Next
                    Next

                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI-Cer", LbmClass.PI_Cer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidyzed, candidates, 2)
                End If

            End If
        ElseIf Equals(adduct.AdductIonName, "[M+H]+") Then
            ' seek Header loss (-C6H13O9P)
            Dim threshold = 1.0
            Dim diagnosticMz = theoreticalMz - 260.029722
            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            If isClassIonFound <> True Then Return Nothing

            '   may be not found fragment to define sphingo and acyl chain
            Dim candidates = New List(Of LipidMolecule)()

            Dim hydrogenString = "d"
            Dim sphOxidized = 2
            'if (diagnosticMz - (12 * totalCarbon + (totalCarbon * 2 - totalDoubleBond * 2) * MassDiffDictionary.HydrogenMass + MassDiffDictionary.NitrogenMass + MassDiffDictionary.OxygenMass * 3) > 1)
            '{
            '    hydrogenString = "t";
            '    sphOxidized = 3;
            '}
            Dim acylOxidyzed = totalOxdyzed - sphOxidized


            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI-Cer", LbmClass.PI_Cer, hydrogenString, theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidyzed, candidates, 2)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 373.2748 [M-Acyl-H2O-H]-
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = 373.2748

                ' seek FA-
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold1)
                If isClassIon1Found = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:1;O4", LbmClass.DCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 357.2788063 [M-FA-H2O+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 357.2788063

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:1;O4", LbmClass.DCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)


        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfGdcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 430.29628  [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 430.29628

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O3;G", LbmClass.GDCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 414.30027 [M-FA-H2O+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 414.30027

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O3;G", LbmClass.GDCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If

        Return Nothing
    End Function
    Public Shared Function JudgeIfGlcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 414.30137 [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 414.30137

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O2;G", LbmClass.GLCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 398.3053554 [M-FA+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 416.315920637

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O2;G", LbmClass.GLCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfTdcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 480.27892 [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 480.27892

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O3;T", LbmClass.TDCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 464.2829058 [M-FA-H2O+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 464.2829058

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O3;T", LbmClass.TDCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfTlcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 464.28400 [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 464.284

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O2;T", LbmClass.TLCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 448.2879912 [M-FA+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 466.298556495

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BA 24:1;O2;T", LbmClass.TLCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 357.2799046 [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 357.2799046

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:1;O3", LbmClass.LCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 359.2944571 [M-FA+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 359.2944571

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:1;O3", LbmClass.LCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfKlcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 371.2591694 [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 371.2591694

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                ' seek diagnosticMz + H2O (must be not found)
                Dim threshold3 = 0.1
                Dim diagnosticMz3 = diagnosticMz + OxygenMass + 2 * HydrogenMass
                Dim isClassIonFound3 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                If isClassIonFound3 = True Then Return Nothing


                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:2;O4", LbmClass.KLCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 373.2737222 [M-FA+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 373.2737222

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:2;O4", LbmClass.KLCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfKdcae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 387.254084 [M-Acyl-H2O-H]-
                Dim threshold = 0.1
                Dim diagnosticMz = 387.254084

                ' seek FA-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) + totalOxidized * OxygenMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:2;O4", LbmClass.KDCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            ' seek 371.2580718 [M-FA-H2O+H]+
            Dim threshold3 = 10
            Dim diagnosticMz3 = 371.2580718

            Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
            If isClassIon3Found = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE 24:2;O4", LbmClass.KDCAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfAnandamide(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -2H2O 
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = theoreticalMz - H2O * 2
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAE", LbmClass.NAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
            Return Nothing
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim threshold = 10
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)
                ' seek [M-H]- 2H
                Dim threshold1 = 10
                Dim diagnosticMz1 = diagnosticMz - HydrogenMass * 2

                ''' seek C3H4NO2-
                'var threshold2 = 1;
                'var diagnosticMz2 = 12 * 3 + MassDiffDictionary.HydrogenMass * 4 + MassDiffDictionary.NitrogenMass + MassDiffDictionary.OxygenMass * 2 + Electron;

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)

                If isClassIonFound = False AndAlso isClassIon1Found = False Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAE", LbmClass.NAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfGpnae(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim threshold = 10
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + 12 * 2 + HydrogenMass * 4 + NitrogenMass + Proton
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound <> True Then
                    Return Nothing
                End If
                ' reject LipidMsmsCharacterizationUtility.acylCainMass + 31
                Dim threshold2 = 50
                Dim rejectFragment = diagnosticMz + 2 * OxygenMass - HydrogenMass
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, rejectFragment, threshold2)
                If isClassIon2Found = True Then
                    Return Nothing
                End If
                Dim PEHeaderLoss = theoreticalMz - 141.019094261
                Dim isClassIonFound3 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeaderLoss, threshold)
                If isClassIonFound3 AndAlso LipidMsmsCharacterizationUtility.isFragment1GreaterThanFragment2(spectrum, ms2Tolerance, PEHeaderLoss, diagnosticMz) Then
                    Return Nothing
                End If

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GPNAE", LbmClass.GPNAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
            Return Nothing
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H8PO6-
                Dim threshold1 = 10
                Dim diagnosticMz1 = 12 * 3 + HydrogenMass * 8 + OxygenMass * 6 + PhosphorusMass + Electron
                ' seek PO3-
                Dim threshold2 = 10
                Dim diagnosticMz2 = OxygenMass * 3 + PhosphorusMass + Electron

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then
                    Return Nothing
                End If
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("GPNAE", LbmClass.GPNAE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfFahfamidegly(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - (NitrogenMass + HydrogenMass * 3), theoreticalMz)
                Dim candidates = New List(Of LipidMolecule)()

                ' seek 76.03930542 (Gly)
                Dim threshold2 = 10.0
                Dim diagnosticMz2 = 76.03930542
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)

                ' from here, acyl level annotation is executed.
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon + sn2Carbon < 24 Then Continue For
                        If sn1Carbon = 16 AndAlso sn1Double = 2 OrElse sn2Carbon = 16 AndAlso sn2Double = 2 Then Continue For


                        Dim sn2Loss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) - HydrogenMass
                        Dim sn2GlyLoss = sn2Loss - (12 * 2 + HydrogenMass * 5 + NitrogenMass + OxygenMass * 2)
                        Dim sn2H2OGlyLoss = sn2GlyLoss - H2O

                        Dim queryMust = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sn2Loss,
                                .Intensity = 5
                            }
                            }
                        Dim foundCountMust = 0
                        Dim averageIntensitMusty = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, queryMust, ms2Tolerance, foundCountMust, averageIntensitMusty)
                        If foundCountMust = 0 Then Continue For
                        Dim query = New List(Of SpectrumPeak) From {
                                    'new SpectrumPeak() { Mass = sn2Loss, Intensity = 5 },
                                    New SpectrumPeak() With {
                                    .Mass = sn2GlyLoss,
                                    .Intensity = 5
                                },
                                    New SpectrumPeak() With {
                                    .Mass = sn2H2OGlyLoss,
                                    .Intensity = 5
                                }
                                }

                            'Console.WriteLine("NAAG " + sn1Carbon + ":" + sn1Double + "/" + sn2Carbon + ":" + sn2Double +
                            '   " " + sn2Loss + " " + sn2GlyLoss + " " + sn2H2OGlyLoss);
                            'if (sn1Carbon == 10 && sn2Carbon == 19) {
                            '    Console.WriteLine();
                            '}

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If isClassIonFound AndAlso foundCount >= 1 OrElse foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getFahfamideMoleculeObjAsLevel2("NAGly", LbmClass.NAGly, "", sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGly", LbmClass.NAGly, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim candidates = New List(Of LipidMolecule)()

                ' seek 74.0247525 (Gly)
                Dim threshold = 5.0
                Dim diagnosticMz = 74.0247525
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If Not isClassIonFound Then Return Nothing
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn2Loss = theoreticalMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) - HydrogenMass
                        Dim sn2CO2Loss = sn2Loss - 12 - OxygenMass * 2
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)

                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sn2Loss,
                                .Intensity = 10.0
                            },
                                New SpectrumPeak() With {
                                .Mass = sn2CO2Loss,
                                .Intensity = 5.0
                            },
                                New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 5.0
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getFahfamideMoleculeObjAsLevel2("NAGly", LbmClass.NAGly, "", sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGly", LbmClass.NAGly, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfFahfamideglyser(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim diagnosticMz = theoreticalMz - (NitrogenMass + HydrogenMass * 3)
                Dim candidates = New List(Of LipidMolecule)()

                ' seek 145.06187 (gly+ser-O)
                Dim threshold3 = 5.0
                Dim diagnosticMz3 = 145.06187
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)

                ' from here, acyl level annotation is executed.
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn2Loss = diagnosticMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) - HydrogenMass
                        Dim sn2SerLoss = sn2Loss - (12 * 3 + HydrogenMass * 7 + NitrogenMass + OxygenMass * 3)
                        Dim sn2SerGlyLoss = sn2SerLoss - (12 * 2 + HydrogenMass * 3 + NitrogenMass + OxygenMass)
                        Dim ser = 12 * 3 + HydrogenMass * 8 + NitrogenMass + OxygenMass * 3

                        'Console.WriteLine(sn1Carbon + ":" + sn1Double + "/" + sn1Carbon + ":" + sn1Double +
                        '    " " + sn2Loss + " " + sn2SerLoss + " " + sn2SerGlyLoss + " " + ser);

                        Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                .Mass = sn2Loss,
                                .Intensity = 5
                            },
                                    New SpectrumPeak() With {
                                .Mass = sn2SerLoss,
                                .Intensity = 5
                            },
                                    New SpectrumPeak() With {
                                .Mass = sn2SerGlyLoss,
                                .Intensity = 5
                            },
                                    New SpectrumPeak() With {
                                .Mass = ser,
                                .Intensity = 5
                            }
                                }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 3 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getFahfamideMoleculeObjAsLevel2("NAGlySer", LbmClass.NAGlySer, "", sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound2 == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGlySer", LbmClass.NAGlySer, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim candidates = New List(Of LipidMolecule)()
                'GlySer
                ' seek [M-H]- -H2O
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = theoreticalMz - H2O
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)

                If isClassIon2Found = True Then
                    ' from here, acyl level annotation is executed.
                    For sn1Carbon = minSnCarbon To maxSnCarbon
                        For sn1Double = minSnDoubleBond To maxSnDoubleBond

                            Dim sn2Carbon = totalCarbon - sn1Carbon
                            Dim sn2Double = totalDoubleBond - sn1Double

                            Dim sn2Loss = theoreticalMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) - HydrogenMass
                            Dim sn2CH2OLoss = sn2Loss - 12 - OxygenMass - HydrogenMass * 2
                            Dim sn2CH2O3Loss = sn2Loss - 12 - OxygenMass * 3 - HydrogenMass * 2
                            Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)

                            Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                    .Mass = sn2Loss,
                                    .Intensity = 10.0
                                },
                                    New SpectrumPeak() With {
                                    .Mass = sn2CH2OLoss,
                                    .Intensity = 5.0
                                },
                                    New SpectrumPeak() With {
                                    .Mass = sn2CH2O3Loss,
                                    .Intensity = 5.0
                                },
                                    New SpectrumPeak() With {
                                    .Mass = sn2,
                                    .Intensity = 5.0
                                }
                                }

                            Dim foundCount = 0
                            Dim averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                            If foundCount >= 3 Then
                                Dim molecule = LipidMsmsCharacterizationUtility.getFahfamideMoleculeObjAsLevel2("NAGlySer", LbmClass.NAGlySer, "", sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                                candidates.Add(molecule)
                            End If
                        Next
                    Next
                    If candidates.Count = 0 Then Return Nothing
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGlySer", LbmClass.NAGlySer, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

                End If

            End If
        End If
        Return Nothing
    End Function



    Public Shared Function JudgeIfSulfonolipid(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon, ByVal totalOxidized As Integer) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - (NitrogenMass + HydrogenMass * 3), theoreticalMz)
                Dim candidates = New List(Of LipidMolecule)()

                ' seek 124.00629  ([C2H6NO3S]+)
                Dim threshold2 = 1
                Dim diagnosticMz2 = 124.00629
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound = False Then Return Nothing

                Dim acylOxidized = totalOxidized - 1

                ' from here, acyl level annotation is executed.
                If acylOxidized = 0 Then
                    For sphCarbon = minSnCarbon To maxSnCarbon
                        For sphDouble = minSnDoubleBond To maxSnDoubleBond

                            Dim acylCarbon = totalCarbon - sphCarbon
                            Dim acylDouble = totalDoubleBond - sphDouble

                            Dim acylLoss = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass * acylOxidized
                            Dim acylH2OLoss = acylLoss - H2O
                            Dim sph1 = diagnosticMz - (12 * (sphCarbon - 2) + ((sphCarbon - 2) * 2 - 2 * sphDouble - 2) * HydrogenMass + OxygenMass)
                            Dim sph2 = sph1 - H2O

                            'Console.WriteLine("SL " + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble +
                            '   " " + acylLoss + " " + acylH2OLoss + " " + sph1 + " " + sph2);

                            If acylOxidized = 0 Then
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = acylLoss,
                                        .Intensity = 1.0
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = acylH2OLoss,
                                        .Intensity = 1.0
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sph1,
                                        .Intensity = 1.0
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = sph2,
                                        .Intensity = 1.0
                                    }
                            }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount >= 2 Then
                                    Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("SL", LbmClass.SL, "m", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            End If
                        Next
                    Next
                Else
                    For sphCarbon = minSnCarbon To maxSnCarbon
                        For sphDouble = minSnDoubleBond To maxSnDoubleBond

                            Dim acylCarbon = totalCarbon - sphCarbon
                            Dim acylDouble = totalDoubleBond - sphDouble

                            Dim acylLoss = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass * acylOxidized
                            Dim acylH2OLoss = acylLoss - H2O
                            Dim sph3 = diagnosticMz - (12 * (sphCarbon - 2 + 1) + ((sphCarbon - 2) * 2 - 2 * sphDouble - 2) * HydrogenMass + OxygenMass * 2)
                            Dim acylCain = LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + OxygenMass * acylOxidized


                            Dim query2 = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                    .Mass = acylLoss,
                                    .Intensity = 1.0
                                },
                            New SpectrumPeak() With {
                                    .Mass = acylH2OLoss,
                                    .Intensity = 1.0
                                },
                            New SpectrumPeak() With {
                                    .Mass = sph3,
                                    .Intensity = 1.0
                                }
                            }

                            Dim foundCount2 = 0
                            Dim averageIntensity = 0.0
                            LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query2, ms2Tolerance, foundCount2, averageIntensity)

                            'Console.WriteLine("SL+O " + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble +
                            '    " " + acylH2OLoss + " " + sph3);

                            If foundCount2 >= 2 Then
                                Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("SL", LbmClass.SL, "m", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                                candidates.Add(molecule)
                            End If

                        Next
                    Next
                End If
                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SL", LbmClass.SL, "m", theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidized, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim candidates = New List(Of LipidMolecule)()
                ' seek SO3- or HSO3-
                Dim threshold = 0.1
                Dim diagnosticMz1 = 79.95736
                Dim diagnosticMz2 = 80.96409
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)

                If isClassIon1Found = Not True AndAlso isClassIon2Found = Not True Then Return Nothing
                ' from here, acyl level annotation is executed.

                Dim acylOxidized = totalOxidized - 1

                For sphCarbon = minSnCarbon To maxSnCarbon
                    For sphDouble = minSnDoubleBond To maxSnDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim acylLoss = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass - OxygenMass * acylOxidized
                        Dim acylamideLoss = acylLoss - (NitrogenMass + HydrogenMass * 3)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = acylLoss,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = acylamideLoss,
                                .Intensity = 1.0
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("SL", LbmClass.SL, "m", sphCarbon, sphDouble, acylCarbon, acylDouble, acylOxidized, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SL", LbmClass.SL, "m", theoreticalMz, adduct, totalCarbon, totalDoubleBond, acylOxidized, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherpg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' Negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H7O5P-
                Dim threshold = 0.01
                Dim diagnosticMz = 152.995833871
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                Dim threshold2 = 30
                Dim diagnosticMz2 = theoreticalMz - 63.008491 ' [M+C2H3N(ACN)+Na-2H]- adduct of PE [M-H]- 
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound2 Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = sn1Carbon * 12 + (sn1Carbon * 2 + 1 - sn1Double * 2) * HydrogenMass + OxygenMass * 2 + Electron ' (maybe) ether chain rearrange
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 5.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 10.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("PG", LbmClass.EtherPG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG", LbmClass.EtherPG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherlysopg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                Dim diagnosticMz1 = 152.99583  ' seek C3H6O5P-
                Dim threshold1 = 10.0
                Dim diagnosticMz2 = totalCarbon * 12 + (2 * (totalCarbon - totalDoubleBond) + 1) * HydrogenMass + OxygenMass ' seek [Ether fragment]-
                Dim threshold2 = 1.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPG", LbmClass.EtherLPG, "e", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCoenzymeq(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim diagnosticMz1 = 197.0808164  ' seek [(C9H9O4)+CH3+H]+
                Dim threshold1 = 10.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                Dim coqSurfix = Math.Round((theoreticalMz - 182.057908802) / (12 * 5 + HydrogenMass * 8))

                Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult("CoQ" & coqSurfix.ToString(), LbmClass.CoQ, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                Dim diagnosticMz1 = 197.0808164  ' seek [(C9H9O4)+CH3+H]+
                Dim threshold1 = 1.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                Dim coqSurfix = Math.Round((theoreticalMz - 182.057908802) / (12 * 5 + HydrogenMass * 8))

                Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult("CoQ" & coqSurfix.ToString(), LbmClass.CoQ, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If


        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfVitaminEmolecules(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' vitamin E
                Dim vitamineMz = 429.3738044
                Dim threshold = 1

                Dim isVitamindFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, vitamineMz, threshold)
                If isVitamindFound = True Then
                    Dim threshold1 = 10.0
                    Dim diagnosticMz1 = 163.0753564 '[C10H11O2]-
                    Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                    If isClassIon1Found <> True Then Return Nothing

                    '
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult("alpha-Tocopherol", LbmClass.Vitamin_E, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfVitaminDmolecules(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' calc [M+H]+
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+H]+"), theoreticalMz, theoreticalMz - 22.9892207)
                ' vitamin D
                Dim vitamindMz = 401.3414071
                Dim threshold = 0.01

                Dim isVitamindFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, vitamindMz, threshold)
                If isVitamindFound = True Then
                    Dim threshold1 = 10.0
                    Dim diagnosticMz1 = diagnosticMz - H2O
                    Dim diagnosticMz2 = diagnosticMz1 - H2O

                    Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                    Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold1)
                    If isClassIon1Found <> True AndAlso isClassIon1Found <> True Then Return Nothing

                    '
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult("25-hydroxycholecalciferol", LbmClass.Vitamin_D, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSterolHexoside(ByVal lipidname As String, ByVal lipidclass As LbmClass, ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' calc [M+H]+
                Dim diagnosticMz = theoreticalMz - 179.0561136
                Dim threshold = 0.01

                Dim isSterolFrag = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isSterolFrag = True Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
            Return Nothing
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)
                Dim diagnosticCutoff = 1.0
                ' hexose
                Dim hexoseMz = 179.0561136
                Dim threshold = 0.01

                Dim isHexoseFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, hexoseMz, threshold)
                Dim isDiagnosticFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, diagnosticCutoff)
                If isHexoseFound AndAlso isDiagnosticFound Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSterolSulfate(ByVal lipidname As String, ByVal lipidclass As LbmClass, ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' calc [M+H]+
                Dim diagnosticMz = theoreticalMz - 96.960103266
                Dim threshold = 0.01

                Dim isSterolFrag = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isSterolFrag = True Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
            Return Nothing
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' sulfate
                Dim hexoseMz = 96.960103266
                Dim threshold = 0.01

                Dim isSulfateFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, hexoseMz, threshold)
                If isSulfateFound Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfVitaminaestermolecules(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' calc [M+H]+
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+H]+"), theoreticalMz, theoreticalMz - 22.9892207)
                ' retinyl ester
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = 269.2263771 ' SN1 loss
                Dim diagnosticMz2 = 169.1011771 ' SN1 and C7H16 loss
                Dim diagnosticMz3 = 119.0855264 ' SN1 and C7H16 loss

                If Equals(adduct.AdductIonName, "[M+H]+") Then
                    Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                    Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold1)
                    If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing
                ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                    Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold1)
                    If isClassIon1Found <> True AndAlso isClassIon3Found <> True Then Return Nothing
                End If

                '
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("VAE", LbmClass.VAE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfFahfamideorn(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                Dim candidates = New List(Of LipidMolecule)()

                Dim threshold = 1.0
                Dim diagnosticMz1 = 115.0865894 '[C5H10N2O+H]+  fragment of Orn
                Dim diagnosticMz2 = 70.06512542 '[C4H7N+H]+     fragment of Orn
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found = False OrElse isClassIon2Found = False Then Return Nothing


                ' from here, acyl level annotation is executed.
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn2Loss = theoreticalMz - LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) - HydrogenMass
                        Dim sn2H2OLoss = sn2Loss - H2O
                        Dim sn1Fragment = sn1Carbon * 12 + ((sn1Carbon - (sn1Double + 1)) * 2 - 2) * HydrogenMass + OxygenMass + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn2Loss,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2H2OLoss,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sn1Fragment,
                                .Intensity = 5
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getFahfamideMoleculeObjAsLevel2("NAOrn", LbmClass.NAOrn, "", sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if ((isClassIon1Found == !true || isClassIon2Found == !true) && candidates.Count == 0) return null;
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAOrn", LbmClass.NAOrn, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfBrseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 381.35158  sterol structure (Brassica-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 381.35158

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.BRSE, "28:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.BRSE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfCaseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 383.36723  sterol structure (Campe-sterol)
                Dim threshold = 60
                Dim diagnosticMz = 383.36723
                If totalCarbon = 18 AndAlso totalDoubleBond = 5 Then Return Nothing
                If totalCarbon = 19 AndAlso totalDoubleBond = 5 Then Return Nothing

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.CASE, "28:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.CASE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSiseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 397.38288  sterol structure (Sito-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 397.38288

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.SISE, "29:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.SISE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfStseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 395.36723  sterol structure (Stigma-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 395.36723

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.STSE, "29:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.STSE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfErgoSESpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") OrElse Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek 379.335928  sterol structure (Ergosterol)
                Dim threshold = 50
                Dim diagnosticMz = 379.335928
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.EGSE, "28:3", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.EGSE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDehydroErgoSESpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") OrElse Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek  377.320278  sterol structure (Dehydroergosterol)
                Dim threshold = 50
                Dim diagnosticMz = 377.320278

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.DEGSE, "28:4", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.DEGSE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDesmosterolSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 367.335928  sterol structure (Desmosterol - H2O)
                Dim threshold = 10
                Dim diagnosticMz = 367.335928

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "ester"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("SE", LbmClass.DSMSE, "27:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SE", LbmClass.DSMSE, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfAhexbrseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 381.35158  sterol structure (Brassica-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 381.35158

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexBRS, "28:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexBRS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)

                ' seek FA-
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexBRS, "28:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexBRS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAhexcaseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 383.36723  sterol structure (Campe-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 383.36723

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexCAS, "28:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexCAS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)

                ' seek FA-
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexCAS, "28:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexCAS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAhexceSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 369.35158  sterol structure (Chole-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 369.35158

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexCS, "27:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexCS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)

                ' seek FA-
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexCS, "27:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexCS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAhexsiseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 397.38288  sterol structure (Sito-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 397.38288

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexSIS, "29:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexSIS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)

                ' seek FA-
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexSIS, "29:1", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexSIS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfAhexstseSpecies(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 395.36723  sterol structure (Stigma-sterol)
                Dim threshold = 10
                Dim diagnosticMz = 395.36723

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexSTS, "29:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexSTS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214)

                ' seek FA-
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIon1Found = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Dim steroidalModificationClass = "AHex"
                Dim molecule = LipidMsmsCharacterizationUtility.getSteroidalEtherMoleculeObj("ASG", LbmClass.AHexSTS, "29:2", steroidalModificationClass, totalCarbon, totalDoubleBond)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("ASG", LbmClass.AHexSTS, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSmgdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek [C6H9O8S]-
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = 241.0024
                ' seek  [H2SO4-H]-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = 96.9601

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found = False OrElse isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)
                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + Proton
                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.1
                            }
                        }
                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("SMGDG", LbmClass.SMGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SMGDG", LbmClass.SMGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfEtherSmgdg(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then ' negative ion mode 
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 241.0024 [C6H9O8S]-
                Dim threshold1 = 0.1
                Dim diagnosticMz1 = 241.0024
                ' seek 96.9601 [H2SO4-H]-
                Dim threshold2 = 0.1
                Dim diagnosticMz2 = 96.9601

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found = False OrElse isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        If sn1Carbon >= 26 AndAlso sn1Double >= 4 Then Return Nothing
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        'var sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double);
                        Dim NL_sn2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            'new SpectrumPeak() { Mass = sn2, Intensity = 0.1 },
                            New SpectrumPeak() With {
                                    .Mass = NL_sn2,
                                    .Intensity = 0.1
                                }
                        }

                            Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("SMGDG", LbmClass.EtherSMGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SMGDG", LbmClass.EtherSMGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M+NH4]+") Then
            'seek M-SHex-H2O (M-277.0467551)
            Dim threshold1 = 1
            Dim diagnosticMz1 = theoreticalMz - 277.0467551
            Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
            If isClassIon1Found = False Then Return Nothing

            ' from here, acyl level annotation is executed.
            Dim candidates = New List(Of LipidMolecule)()
            For sn1Carbon = minSnCarbon To maxSnCarbon
                For sn1Double = minSnDoubleBond To maxSnDoubleBond
                    If sn1Carbon >= 26 AndAlso sn1Double >= 4 Then Return Nothing
                    Dim sn2Carbon = totalCarbon - sn1Carbon
                    Dim sn2Double = totalDoubleBond - sn1Double

                    Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) - OxygenMass - Electron
                    Dim sn2Mag = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double) + 12 * 3 + OxygenMass + HydrogenMass * 5 + Proton

                    Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                            .Mass = sn2,
                            .Intensity = 0.1
                        },
                        New SpectrumPeak() With {
                            .Mass = sn2Mag,
                            .Intensity = 10
                        }
                    }

                    Dim foundCount = 0
                    Dim averageIntensity = 0.0
                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                    If foundCount = 2 Then ' now I set 2 as the correct level
                        Dim molecule = LipidMsmsCharacterizationUtility.getEtherPhospholipidMoleculeObjAsLevel2("SMGDG", LbmClass.EtherSMGDG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity, "e")
                        candidates.Add(molecule)
                    End If
                Next
            Next
            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SMGDG", LbmClass.EtherSMGDG, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)


        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfnoChainSterol(ByVal lipidname As String, ByVal lipidclass As LbmClass, ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' calc [M+H-H2O]+
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - 17.02600055, theoreticalMz)
                diagnosticMz = diagnosticMz - H2O
                Dim threshold = 1
                Dim isSterolFrag = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isSterolFrag = True Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
            If Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' calc [M+H-H2O]+
                Dim diagnosticMz = theoreticalMz
                diagnosticMz = diagnosticMz - H2O
                Dim threshold = 0.1
                Dim isSterolFrag = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isSterolFrag = True Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
            If Equals(adduct.AdductIonName, "[M+H-H2O]+") Then
                ' calc [M+H-H2O]+
                Dim diagnosticMz = theoreticalMz
                diagnosticMz = diagnosticMz - H2O
                Dim threshold = 1
                Dim isSterolFrag = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
            End If
        End If
        Return Nothing
    End Function

    ' yeast lipid add 20200714

    Public Shared Function JudgeIfMonoMethylPE(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek NL of C3H10NO4P
                Dim threshold = 30.0
                Dim diagnosticMz = theoreticalMz - (12 * 3 + HydrogenMass * 10 + NitrogenMass + OxygenMass * 4 + PhosphorusMass)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("MMPE", LbmClass.MMPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MMPE", LbmClass.MMPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C6H13NO5P- (not must)
                Dim threshold = 0.01
                Dim diagnosticMz = 12 * 6 + HydrogenMass * 14 + NitrogenMass + OxygenMass * 5 + PhosphorusMass - Proton
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                'var threshold2 = 5.0;
                'var diagnosticMz2 = 152.995833871; // seek C3H6O5P- (maybe LNAPE)
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'if (isClassIon2Found == true) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 10.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 10.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("MMPE", LbmClass.MMPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MMPE", LbmClass.MMPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfDiMethylPE(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek NL of C4H12NO4P
                Dim threshold = 30.0
                Dim diagnosticMz = theoreticalMz - (12 * 4 + HydrogenMass * 12 + NitrogenMass + OxygenMass * 4 + PhosphorusMass)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DMPE", LbmClass.DMPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DMPE", LbmClass.DMPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C7H15NO5P- (not must)
                Dim threshold = 0.01
                Dim diagnosticMz = 12 * 7 + HydrogenMass * 16 + NitrogenMass + OxygenMass * 5 + PhosphorusMass - Proton
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                'var threshold2 = 5.0;
                'var diagnosticMz2 = 152.995833871; // seek C3H6O5P- (maybe LNAPE)
                'var isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2);
                'if (isClassIon2Found == true) return null;


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 10.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 10.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("DMPE", LbmClass.DMPE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DMPE", LbmClass.DMPE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfMipc(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek header and H2O loss  
                Dim threshold = 10.0
                Dim headerMass = 12 * 12 + OxygenMass * 13 + HydrogenMass * 21 + PhosphorusMass + H2O
                Dim diagnosticMz = theoreticalMz - headerMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = 12 * sphCarbon + (2 * sphCarbon - 2 * sphDouble + 1) * HydrogenMass + 3 * OxygenMass + NitrogenMass + Proton - OxygenMass
                        Dim sph2 = sph1 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount > 1 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("MIPC", LbmClass.MIPC, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MIPC", LbmClass.MIPC, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek header + O ()
                Dim threshold = 0.1
                Dim diagnosticMz = 12 * 12 + OxygenMass * 14 + HydrogenMass * 23 + PhosphorusMass - Proton
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sphFragment = 12 * (sphCarbon - 2) + (2 * (sphCarbon - 2) - 2 * sphDouble + 1) * HydrogenMass + 2 * OxygenMass - 3 * HydrogenMass - Proton  ' [Sph-NCCO-3H]-

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 0.01
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideoxMoleculeObjAsLevel2("MIPC", LbmClass.MIPC, "t", sphCarbon, sphDouble, acylCarbon, acylDouble, 1, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("MIPC", LbmClass.MIPC, "t", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    'add 20200812
    Public Shared Function JudgeIfOxTriacylglycerol(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond

                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                If sn1Carbon = 18 AndAlso sn1Double = 5 OrElse sn2Carbon = 18 AndAlso sn2Double = 5 OrElse sn3Carbon = 18 AndAlso sn3Double = 5 Then Continue For

                                Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass - OxygenMass * totalOxidized
                                Dim nl_SN1andH2O = nl_SN1 - H2O
                                Dim nl_SN2andH2O = nl_SN2 - H2O

                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN3,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1andH2O,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2andH2O,
                                        .Intensity = 5
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount >= 3 Then ' 3 chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getOxTriacylglycerolMoleculeObjAsLevel2("TG", LbmClass.OxTG, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, totalOxidized, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG", LbmClass.OxTG, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 3)
            End If
        End If
        Return Nothing
    End Function

    'add 20200812 // TG 8:0_8:0_8:0;1O(FA 12:0)
    Public Shared Function JudgeIfFahfaTriacylglycerol(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal minSn3Carbon As Integer, ByVal maxSn3Carbon As Integer, ByVal minSn3DoubleBond As Integer, ByVal maxSn3DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 [M+H]+
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - (NitrogenMass + HydrogenMass * 3)
                'var isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold);

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit
                                Dim remainCarbon2 = totalCarbon - sn1Carbon - sn2Carbon
                                Dim remainDouble2 = totalDoubleBond - sn1Double - sn2Double
                                Dim carbonLimit2 = Math.Min(remainCarbon2, maxSn3Carbon)
                                Dim doubleLimit2 = Math.Min(remainDouble2, maxSn3DoubleBond)

                                For sn3Carbon = minSn3Carbon To carbonLimit2
                                    For sn3Double = minSn3DoubleBond To doubleLimit2
                                        Dim sn4Carbon = totalCarbon - sn1Carbon - sn2Carbon - sn3Carbon
                                        Dim sn4Double = totalDoubleBond - sn1Double - sn2Double - sn3Double

                                        If sn1Carbon = 18 AndAlso sn1Double = 5 OrElse sn2Carbon = 18 AndAlso sn2Double = 5 OrElse sn3Carbon = 18 AndAlso sn3Double = 5 Then Continue For

                                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                        Dim nl_SN4 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn4Carbon, sn4Double) - H2O + HydrogenMass
                                        Dim nl_SN3andSN4 = nl_SN4 - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass * 3
                                        Dim nl_SN1andSN4 = nl_SN4 - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                        Dim nl_SN2andSN4 = nl_SN4 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
    .Mass = nl_SN1,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN2,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN4,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN3andSN4,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN1andSN4,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN2andSN4,
    .Intensity = 5
}
}

                                        Dim foundCount = 0
                                        Dim averageIntensity = 0.0
                                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)


                                        If foundCount >= 3 Then ' 3 chains must be observed.
                                            Dim molecule = LipidMsmsCharacterizationUtility.getFahfaTriacylglycerolMoleculeObjAsLevel2("TG", LbmClass.TG_EST, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, sn4Carbon, sn4Double, 0, averageIntensity)
                                            candidates.Add(molecule)
                                        End If
                                    Next
                                Next
                            Next
                        Next
                    Next
                Next
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG", LbmClass.TG_EST, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 1, candidates, 4)
            End If
        End If
        Return Nothing
    End Function

    ' add20200818
    Public Shared Function JudgeIfNAcylGlySerOxFa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 145.06187(gly+ser-O) and 106.04987
                Dim threshold = 80.0
                Dim diagnosticMz = 145.06187
                'var diagnosticMz2 = 106.04987;

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                'var isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold);
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGlySer", LbmClass.NAGlySer, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M-H]-") Then
            '  seek 99.056(C4H8N2O1-H- GlySer-H2O-CO2-H) and 74.024(C2H5NO2-H- Gly)
            Dim threshold = 5
            Dim diagnosticMz = 99.056
            Dim diagnosticMz2 = 74.024

            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
            If isClassIonFound = False AndAlso isClassIonFound2 = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGlySer", LbmClass.NAGlySer, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfNAcylGlyOxFa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 76.039305(gly+)
                Dim threshold = 10.0
                Dim diagnosticMz = 76.039305
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                '  seek -CO2
                Dim threshold1 = 5.0
                Dim diagnosticMz1 = theoreticalMz - (12 + OxygenMass * 2 + HydrogenMass)
                Dim isClassIonFound1 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                If isClassIonFound = False OrElse isClassIonFound1 = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGly", LbmClass.NAGly, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M-H]-") Then
            '  74.024(C2H5NO2-H- Gly)
            Dim threshold = 10.0
            Dim diagnosticMz = 74.024752

            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            If isClassIonFound = False Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGly", LbmClass.NAGly, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfNAcylOrnOxFa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 76.039305 ([C4H7N+H]+ orn fragment)
                Dim threshold = 10.0
                Dim diagnosticMz = 70.06512

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAOrn", LbmClass.NAOrn, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function


    ' add 20211026
    Public Shared Function JudgeIfSteroidWithLpa(ByVal lipidname As String, ByVal lipidclass As LbmClass, ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        Dim LPHex = New Dictionary(Of String, String)() From {
{"BRSLPHex", "SG 28:2;O;Hex;LPA"},
{"CASLPHex", "SG 28:1;O;Hex;LPA"},
{"CSLPHex", "SG 27:1;O;Hex;LPA"},
{"SISLPHex", "SG 29:1;O;Hex;LPA"},
{"STSLPHex", "SG 29:2;O;Hex;LPA"}
}
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim candidates = New List(Of LipidMolecule)()

                '[MAG-H2O]+
                Dim diagnosticMz01 = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + Proton + (3 * 12 + HydrogenMass * 5 + OxygenMass * 2)
                Dim threshold01 = 50
                Dim frag01 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz01, threshold01)

                '[M-Cho-H2O+H]+
                Dim diagnosticMz02 = diagnosticMz01 + Sugar162 + PhosphorusMass + OxygenMass * 3 + HydrogenMass
                Dim threshold02 = 0.1
                Dim frag02 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz02, threshold02)


                If frag01 AndAlso frag02 Then
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult(LPHex(lipidclass.ToString()), lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
                End If
            End If
            Return Nothing
        Else
            Dim candidates = New List(Of LipidMolecule)()
            ' case [M-H]-
            Dim threshold = 0.5
            Dim faFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)
            Dim isFaFrag = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, faFragment, threshold)
            If isFaFrag = True Then
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(LPHex(lipidclass.ToString()), lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfSteroidWithPa(ByVal lipidname As String, ByVal lipidclass As LbmClass, ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        Dim PaHex = New Dictionary(Of String, String)() From {
{"BRSPHex", "SG 28:2;O;Hex;PA"},
{"CASPHex", "SG 28:1;O;Hex;PA"},
{"CSPHex", "SG 27:1;O;Hex;PA"},
{"SISPHex", "SG 29:1;O;Hex;PA"},
{"STSPHex", "SG 29:2;O;Hex;PA"}
}
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim candidates = New List(Of LipidMolecule)()

                '[DAG-H2O]+
                Dim diagnosticMz01 = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + Proton + (3 * 12 + HydrogenMass * 3 + OxygenMass * 3)
                Dim threshold01 = 50
                Dim frag01 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz01, threshold01)

                '[M-Cho-H2O+H]+
                Dim diagnosticMz02 = diagnosticMz01 + Sugar162 + PhosphorusMass + OxygenMass * 4 + HydrogenMass * 3
                Dim threshold02 = 0.1
                Dim frag02 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz02, threshold02)


                If frag01 AndAlso frag02 Then
                    Return LipidMsmsCharacterizationUtility.returnAnnotationResult(PaHex(lipidclass.ToString()), lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
                End If
            End If
            Return Nothing
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' case [M-H]-
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1Fa = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2Fa = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1Fa,
                                .Intensity = 0.1
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2Fa,
                                .Intensity = 0.1
                            }
                        }


                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 1 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2(PaHex(lipidclass.ToString()), lipidclass, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult(PaHex(lipidclass.ToString()), lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    ' add 20220201
    Public Shared Function JudgeIfSpeSpecies(ByVal lipidname As String, ByVal lipidclass As LbmClass, ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' C2H9NO4P+
                Dim diagnosticMz = 142.02636999999999
                Dim diagnosticCutoff = 10.0

                ''' precursor - C2H8NO4P
                'var diagnosticMz2 = theoreticalMz - 142.02637 + Proton;
                'var diagnosticCutoff2 = 0.1;

                Dim isDiagnosticFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, diagnosticCutoff)
                'var isDiagnosticFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, diagnosticCutoff2);
                If isDiagnosticFound Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
            Return Nothing
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' C2H7NO4P-
                Dim diagnosticMz = 140.011818
                Dim diagnosticCutoff = 10.0
                Dim isDiagnosticFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, diagnosticCutoff)
                If isDiagnosticFound Then
                    Dim candidates = New List(Of LipidMolecule)()
                    Return LipidMsmsCharacterizationUtility.returnAnnotationNoChainResult(lipidname, lipidclass, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 0)
                End If
            End If
        End If
        Return Nothing
    End Function
    '  add 20220322
    Public Shared Function JudgeIfNAcylTauFa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                '  seek 126.02 (Taurine+ fragment)
                Dim threshold = 50.0
                Dim diagnosticMz = 12 * 2 + HydrogenMass * 7 + NitrogenMass + SulfurMass + OxygenMass * 3 + Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NATau", LbmClass.NATau, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M-H]-") Then
            '  seek 124.01 (Taurine- fragment)
            Dim threshold = 1.0
            Dim diagnosticMz = 12 * 2 + HydrogenMass * 7 + NitrogenMass + SulfurMass + OxygenMass * 3 - Proton
            '  seek 79.96 (SO3- fragment)
            Dim threshold2 = 5.0
            Dim diagnosticMz2 = SulfurMass + OxygenMass * 3 + Electron

            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
            If Not isClassIonFound OrElse Not isClassIonFound2 Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NATau", LbmClass.NATau, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfNAcylPheFa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 166.086  (phenylalanine fragment)
                Dim threshold = 10.0
                Dim diagnosticMz = 12 * 9 + HydrogenMass * 11 + NitrogenMass + OxygenMass * 2 + Proton
                '  seek 120.08  (phenylalanine-H2CO2 fragment)
                Dim threshold2 = 50.0
                Dim diagnosticMz2 = diagnosticMz - 12 - OxygenMass * 2 - HydrogenMass * 2

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If Not isClassIonFound OrElse Not isClassIonFound2 Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAPhe", LbmClass.NAPhe, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        ElseIf Equals(adduct.AdductIonName, "[M-H]-") Then
            '  seek 164.07  (phenylalanine fragment)
            Dim threshold = 10.0
            Dim diagnosticMz = 12 * 9 + HydrogenMass * 11 + NitrogenMass + OxygenMass * 2 - Proton

            '  seek 147.04  (phenylalanine-NH3 fragment)
            Dim threshold2 = 10.0
            Dim diagnosticMz2 = diagnosticMz - NitrogenMass - HydrogenMass * 3

            Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
            Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
            If Not isClassIonFound OrElse Not isClassIonFound2 Then Return Nothing

            Dim candidates = New List(Of LipidMolecule)()

            Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAPhe", LbmClass.NAPhe, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
        End If
        Return Nothing
    End Function

    'add 20230407
    Public Shared Function JudgeIfPhosphatidylcholineD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = 184.07332
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' for eieio
                Dim PEHeaderLoss = theoreticalMz - 141.019094261
                Dim PEspecific = CarbonMass * 5 + HydrogenMass * 12 + NitrogenMass + OxygenMass * 4 + PhosphorusMass + Proton
                Dim PEHeader = 141.019094261 + Proton
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeaderLoss, 5.0)
                Dim isClassIonFound3 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEspecific, 1.0)
                Dim isClassIonFound4 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, PEHeader, 3.0)
                If isClassIonFound2 AndAlso isClassIonFound3 Then Return Nothing
                If isClassIonFound4 Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon < 10 OrElse sn2Carbon < 10 Then Continue For
                        If sn1Double > 6 OrElse sn2Double > 6 Then Continue For

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PC_d5", LbmClass.PC_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC_d5", LbmClass.PC_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
                'addMT
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 5.0
                Dim diagnosticMz = 184.07332
                ' seek [M+Na -C5H14NO4P]+
                Dim diagnosticMz2 = theoreticalMz - 183.06604
                ' seek [M+Na -C3H9N]+
                Dim diagnosticMz3 = theoreticalMz - 59.0735
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                        Dim nl_SN2 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PC_d5", LbmClass.PC_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC_d5", LbmClass.PC_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz2 = theoreticalMz - 60.021129369 ' in source check
                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                    If isClassIonFound2 Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PC_d5", LbmClass.PC_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PC_d5", LbmClass.PC_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPhosphatidylethanolamineD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -141.019094261 (C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094261
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.1
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.1
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PE_d5", LbmClass.PE_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE_d5", LbmClass.PE_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
                'addMT
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -141.019094261 (C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094261
                ' seek - 43.042199 (C2H5N)
                Dim diagnosticMz2 = theoreticalMz - 43.042199
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - Electron
                        Dim sn2 = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - Electron

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PE_d5", LbmClass.PE_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE_d5", LbmClass.PE_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C5H11NO5P-
                Dim threshold = 5.0
                Dim diagnosticMz = 196.03803
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                Dim threshold2 = 5.0
                Dim diagnosticMz2 = 152.995833871 ' seek C3H6O5P- (maybe LNAPE)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon2Found = True Then Return Nothing


                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PE_d5", LbmClass.PE_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next

                If isClassIonFound = False AndAlso candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PE_d5", LbmClass.PE_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function


    Public Shared Function JudgeIfPhosphatidylserineD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek -185.008927 (C3H8NO6P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 185.008927
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PS_d5", LbmClass.PS_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS_d5", LbmClass.PS_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -185.008927 (C3H8NO6P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 185.008927
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' acyl level may be not able to annotate.
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule = getLipidAnnotaionAsLevel1("PS_d5", LbmClass.PS_d5, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS_d5", LbmClass.PS_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H5NO2 loss
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 87.032029
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim threshold2 = 30
                Dim diagnosticMz2 = theoreticalMz - 63.008491 ' [M+C2H3N(ACN)+Na-2H]- adduct of PG [M-H]- 
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIonFound2 Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PS_d5", LbmClass.PS_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PS_d5", LbmClass.PS_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfPhosphatidylglycerolD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -189.040227 (C3H8O6P+NH4)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 189.040227
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double


                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 AndAlso averageIntensity < 30 Then ' average intensity < 30 is nessesarry to distinguish it from BMP
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PG_d5", LbmClass.PG_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG_d5", LbmClass.PG_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -171.005851 (C3H8O6P) - 22.9892207 (Na+)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 171.005851 - 22.9892207 ' + MassDiffDictionary.HydrogenMass;
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG_d5", LbmClass.PG_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-
                Dim threshold = 0.01
                Dim diagnosticMz = 152.995833871
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PG_d5", LbmClass.PG_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                'if (isClassIonFound == false && candidates.Count == 0) return null;
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PG_d5", LbmClass.PG_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfPhosphatidylinositolD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -277.056272 (C6H12O9P+NH4)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 277.056272
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
#Region ""
                'for (int sn1Carbon = minSnCarbon; sn1Carbon <= maxSnCarbon; sn1Carbon++) {
                '    for (int sn1Double = minSnDoubleBond; sn1Double <= maxSnDoubleBond; sn1Double++) {
                '        var sn2Carbon = totalCarbon - sn1Carbon;
                '        var sn2Double = totalDoubleBond - sn1Double;

                '        var nl_SN1 = diagnosticMz - acylCainMass(sn1Carbon, sn1Double);
                '        var nl_SN2 = diagnosticMz - acylCainMass(sn2Carbon, sn2Double);

                '        var query = new List<SpectrumPeak> {
                '            new SpectrumPeak() { Mz = nl_SN1, Intensity = 0.01 },
                '            new SpectrumPeak() { Mass = nl_SN2, Intensity = 0.01 }
                '        };

                '        var foundCount = 0;
                '        var averageIntensity = 0.0;
                '        countFragmentExistence(spectrum, query, ms2Tolerance, out foundCount, out averageIntensity);

                '        if (foundCount == 2) { // now I set 2 as the correct level
                '            var molecule = getPhospholipidMoleculeObjAsLevel2("PI_d5", LbmClass.PI_d5, sn1Carbon, sn1Double,
                '                sn2Carbon, sn2Double, averageIntensity);
                '            candidates.Add(molecule);
                '        }
                '    }
                '}
#End Region

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI_d5", LbmClass.PI_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' 
                Dim threshold = 10.0
                Dim diagnosticMz1 = theoreticalMz - (259.021895 + 22.9892207)  ' seek -(C6H12O9P +Na)
                Dim diagnosticMz2 = theoreticalMz - 260.02972                 ' seek -(C6H12O9P + H)
                Dim diagnosticMz3 = 260.02972 + 22.9892207                   ' seek (C6H13O9P +Na)

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If Not isClassIon1Found OrElse Not isClassIon2Found OrElse Not isClassIon3Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0;
                'var molecule = getLipidAnnotaionAsLevel1("PI_d5", LbmClass.PI_d5, totalCarbon, totalDoubleBond, score, "");
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI_d5", LbmClass.PI_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek 241.01188(C6H10O8P-) and 297.037548(C9H14O9P-)
                Dim threshold = 0.01
                Dim diagnosticMz1 = 241.01188 + Electron
                Dim diagnosticMz2 = 297.037548 + Electron
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If Not isClassIon1Found AndAlso Not isClassIon2Found Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("PI_d5", LbmClass.PI_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("PI_d5", LbmClass.PI_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfLysopcD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPC
                ' seek 184.07332 (C5H15NO4P)
                Dim threshold = 5.0
                Dim diagnosticMz = 184.07332
                Dim diagnosticMz2 = 104.10699
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found <> True Then Return Nothing
                '
                Dim candidates = New List(Of LipidMolecule)()
                Dim chainSuffix = ""
                Dim diagnosticMzExist = 0.0
                Dim diagnosticMzIntensity = 0.0
                Dim diagnosticMzExist2 = 0.0
                Dim diagnosticMzIntensity2 = 0.0

                For i = 0 To spectrum.Count - 1
                    Dim mz = spectrum(i).Mass
                    Dim intensity = spectrum(i).Intensity

                    If intensity > threshold AndAlso Math.Abs(mz - diagnosticMz) < ms2Tolerance Then
                        diagnosticMzExist = mz
                        diagnosticMzIntensity = intensity
                    ElseIf intensity > threshold AndAlso Math.Abs(mz - diagnosticMz2) < ms2Tolerance Then
                        diagnosticMzExist2 = mz
                        diagnosticMzIntensity2 = intensity
                    End If
                Next

                If diagnosticMzIntensity2 / diagnosticMzIntensity > 0.3 Then '
                    chainSuffix = "/0:0"
                End If

                Dim score = 0.0
                If totalCarbon < 30 Then score = score + 1.0
                Dim molecule = LipidMsmsCharacterizationUtility.getSingleacylchainwithsuffixMoleculeObjAsLevel2("LPC_d5", LbmClass.LPC_d5, totalCarbon, totalDoubleBond, score, chainSuffix)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC_d5", LbmClass.LPC_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPC
                ' seek PreCursor - 59 (C3H9N)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 59.072951
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                ' seek 104.1070 (C5H14NO) maybe not found
                'var threshold2 = 1.0;
                'var diagnosticMz2 = 104.1070;

                '
                Dim candidates = New List(Of LipidMolecule)()
                Dim score = 0.0
                If totalCarbon < 30 Then score = score + 1.0
                Dim molecule = LipidMsmsCharacterizationUtility.getSingleacylchainMoleculeObjAsLevel2("LPC_d5", LbmClass.LPC_d5, totalCarbon, totalDoubleBond, score)
                candidates.Add(molecule)

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC_d5", LbmClass.LPC_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPC

                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond)
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0.0;
                'if (totalCarbon < 30) score = score + 1.0;
                'var molecule = getSingleacylchainMoleculeObjAsLevel2("LPC_d5", LbmClass.LPC_d5, totalCarbon, totalDoubleBond,
                'score);
                'candidates.Add(molecule);

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPC_d5", LbmClass.LPC_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)

            End If
        End If
        Return Nothing
    End Function

    Public Shared Function JudgeIfLysopeD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' 
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPE

                ' seek PreCursor -141(C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIon1Found = False Then Return Nothing
                ' reject EtherPE 
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether)

                        Dim NL_sn1 = diagnosticMz - sn1alkyl + Proton
                        Dim sn1_rearrange = sn1alkyl + HydrogenMass * 2 + 139.0029 'sn1(ether) + C2H5NO4P + proton 

                        Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, NL_sn1, threshold)
                        Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, sn1_rearrange, threshold)
                        If isClassIon2Found = True OrElse isClassIon3Found = True Then Return Nothing
                    Next
                Next


                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE_d5", LbmClass.LPE_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek PreCursor -141(C2H8NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 141.019094
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' reject EtherPE 
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1alkyl = CarbonMass * sn1Carbon + HydrogenMass * (sn1Carbon * 2 - sn1Double * 2 + 1) 'sn1(ether)

                        Dim NL_sn1 = diagnosticMz - sn1alkyl + Proton
                        Dim sn1_rearrange = sn1alkyl + 139.0029 + HydrogenMass * 2 'sn1(ether) + C2H5NO4P + proton 

                        Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, NL_sn1, threshold)
                        Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, sn1_rearrange, threshold)
                        If isClassIon2Found = True OrElse isClassIon3Found = True Then Return Nothing
                    Next
                Next

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0.0;
                'if (totalCarbon < 30) score = score + 1.0;
                'var molecule = getSingleacylchainMoleculeObjAsLevel2("LPE_d5", LbmClass.LPE_d5, totalCarbon, totalDoubleBond,
                'score);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE_d5", LbmClass.LPE_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                If totalCarbon > 28 Then Return Nothing '  currently carbon > 28 is recognized as EtherPE
                ' seek PreCursor -197(C5H12NO5P)
                Dim threshold = 10.0
                Dim diagnosticMz = theoreticalMz - 197.04475958
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                '
                Dim candidates = New List(Of LipidMolecule)()
                'var score = 0.0;
                'if (totalCarbon < 30) score = score + 1.0;
                'var molecule = getSingleacylchainMoleculeObjAsLevel2("LPE_d5", LbmClass.LPE_d5, totalCarbon, totalDoubleBond,
                'score);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPE_d5", LbmClass.LPE_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfLysopgD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then '
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-

                Dim diagnosticMz1 = 152.99583  ' seek C3H6O5P-
                Dim threshold1 = 1.0
                Dim diagnosticMz2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) ' seek [FA-H]-
                Dim threshold2 = 10.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = getSingleacylchainMoleculeObjAsLevel2("LPG_d5", LbmClass.LPG_d5, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPG_d5", LbmClass.LPG_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek Header loss (MG+ + chain Acyl) 
                Dim threshold = 5.0
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + (12 * 3 + Hydrogen2Mass * 5 + OxygenMass * 2) + ProtonMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPG_d5", LbmClass.LPG_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If

        Return Nothing
    End Function

    Public Shared Function JudgeIfLysopiD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-

                Dim diagnosticMz1 = 241.0118806 + Electron  ' seek C3H6O5P-
                Dim threshold1 = 1.0
                Dim diagnosticMz2 = 315.048656 ' seek C9H16O10P-
                Dim threshold2 = 1.0
                Dim diagnosticMz3 = LipidMsmsCharacterizationUtility.fattyacidProductIon(totalCarbon, totalDoubleBond) ' seek [FA-H]-
                Dim threshold3 = 10.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True OrElse isClassIon3Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = getSingleacylchainMoleculeObjAsLevel2("LPI_d5", LbmClass.LPI_d5, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPI_d5", LbmClass.LPI_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek Header loss (MG+ + chain Acyl) 
                Dim threshold = 5.0
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + (12 * 3 + Hydrogen2Mass * 5 + OxygenMass * 2) + ProtonMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPI_d5", LbmClass.LPI_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfLysopsD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PE 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Negative Then 'negative ion mode only
            If Equals(adduct.AdductIonName, "[M-H]-") Then
                ' seek C3H6O5P-

                Dim diagnosticMz1 = 152.99583  ' seek C3H6O5P-
                Dim threshold1 = 10.0
                Dim diagnosticMz2 = theoreticalMz - 87.032029 ' seek -C3H6NO2-H
                Dim threshold2 = 5.0
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                '
                Dim candidates = New List(Of LipidMolecule)()
                'var averageIntensity = 0.0;

                'var molecule = getSingleacylchainMoleculeObjAsLevel2("LPS_d5", LbmClass.LPS_d5, totalCarbon, totalDoubleBond,
                'averageIntensity);
                'candidates.Add(molecule);
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPS_d5", LbmClass.LPS_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        ElseIf adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek Header loss (MG+ + chain Acyl) 
                Dim threshold = 5.0
                Dim diagnosticMz = LipidMsmsCharacterizationUtility.acylCainMass(totalCarbon, totalDoubleBond) + (12 * 3 + Hydrogen2Mass * 5 + OxygenMass * 2) + ProtonMass
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("LPS_d5", LbmClass.LPS_d5, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfDagD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If totalCarbon > 52 Then Return Nothing ' currently, very large DAG is excluded.
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn2Double >= 7 Then Continue For

                        Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                        Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                        'Console.WriteLine(sn1Carbon + ":" + sn1Double + "-" + sn2Carbon + ":" + sn2Double + 
                        '    " " + nl_SN1 + " " + nl_SN2);

                        Dim query = New List(Of SpectrumPeak) From {
New SpectrumPeak() With {
    .Mass = nl_SN1,
    .Intensity = 5
},
New SpectrumPeak() With {
    .Mass = nl_SN2,
    .Intensity = 5
}
}
                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                        If foundCount = 2 Then
                            Dim molecule = LipidMsmsCharacterizationUtility.getDiacylglycerolMoleculeObjAsLevel2("DG_d5", LbmClass.DG_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing


                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DG_d5", LbmClass.DG_d5, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                ''' DG[M+Na]+ is cannot determine acyl chain


                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("DG_d5", LbmClass.DG_d5, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)

            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfTriacylglycerolD5(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSn1Carbon As Integer, ByVal maxSn1Carbon As Integer, ByVal minSn1DoubleBond As Integer, ByVal maxSn1DoubleBond As Integer, ByVal minSn2Carbon As Integer, ByVal maxSn2Carbon As Integer, ByVal minSn2DoubleBond As Integer, ByVal maxSn2DoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PS 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSn1Carbon > totalCarbon Then maxSn1Carbon = totalCarbon
        If maxSn1DoubleBond > totalDoubleBond Then maxSn1DoubleBond = totalDoubleBond
        If maxSn2Carbon > totalCarbon Then maxSn2Carbon = totalCarbon
        If maxSn2DoubleBond > totalDoubleBond Then maxSn2DoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek -17.026549 (NH3)
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 17.026549
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond

                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                If sn1Carbon = 18 AndAlso sn1Double = 5 OrElse sn2Carbon = 18 AndAlso sn2Double = 5 OrElse sn3Carbon = 18 AndAlso sn3Double = 5 Then Continue For

                                Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2,
                                        .Intensity = 5
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN3,
                                        .Intensity = 5
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount = 3 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("TG_d5", LbmClass.TG_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG_d5", LbmClass.TG_d5, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then   'add MT
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSn1Carbon To maxSn1Carbon
                    For sn1Double = minSn1DoubleBond To maxSn1DoubleBond
                        Dim diagnosticMz = theoreticalMz ' - 22.9892207 + MassDiffDictionary.HydrogenMass; //if want to choose [M+H]+
                        Dim remainCarbon = totalCarbon - sn1Carbon
                        Dim remainDouble = totalDoubleBond - sn1Double
                        Dim carbonLimit = Math.Min(remainCarbon, maxSn2Carbon)
                        Dim doubleLimit = Math.Min(remainDouble, maxSn2DoubleBond)

                        For sn2Carbon = minSn2Carbon To carbonLimit
                            For sn2Double = minSn2DoubleBond To doubleLimit

                                Dim sn3Carbon = totalCarbon - sn1Carbon - sn2Carbon
                                Dim sn3Double = totalDoubleBond - sn1Double - sn2Double

                                Dim nl_SN1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                Dim nl_SN2 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                Dim nl_SN3 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                Dim query = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN1,
                                        .Intensity = 0.1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN2,
                                        .Intensity = 0.1
                                    },
                                    New SpectrumPeak() With {
                                        .Mass = nl_SN3,
                                        .Intensity = 0.1
                                    }
                                }

                                Dim foundCount = 0
                                Dim averageIntensity = 0.0
                                LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                                If foundCount < 3 Then
                                    Dim diagnosticMzH = theoreticalMz - 22.9892207 + HydrogenMass
                                    Dim nl_SN1_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                                    Dim nl_SN2_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass
                                    Dim nl_SN3_H = diagnosticMzH - LipidMsmsCharacterizationUtility.acylCainMass(sn3Carbon, sn3Double) - H2O + HydrogenMass
                                    Dim query2 = New List(Of SpectrumPeak) From {
                                    New SpectrumPeak() With {
                                            .Mass = nl_SN1_H,
                                            .Intensity = 0.1
                                        },
                                    New SpectrumPeak() With {
                                            .Mass = nl_SN2_H,
                                            .Intensity = 0.1
                                        },
                                    New SpectrumPeak() With {
                                            .Mass = nl_SN3_H,
                                            .Intensity = 0.1
                                        }
                                    }

                                    Dim foundCount2 = 0
                                    Dim averageIntensity2 = 0.0
                                    LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity2)


                                    If foundCount2 = 3 Then
                                        Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("TG_d5", LbmClass.TG_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity2)
                                        candidates.Add(molecule)
                                    End If
                                ElseIf foundCount = 3 Then ' these three chains must be observed.
                                    Dim molecule = LipidMsmsCharacterizationUtility.getTriacylglycerolMoleculeObjAsLevel2("TG_d5", LbmClass.TG_d5, sn1Carbon, sn1Double, sn2Carbon, sn2Double, sn3Carbon, sn3Double, averageIntensity)
                                    candidates.Add(molecule)
                                End If
                            Next
                        Next
                    Next
                Next
                If candidates Is Nothing OrElse candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("TG_d5", LbmClass.TG_d5, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 3)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfSphingomyelinD9(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 184.07332 (C5H15NO4P) D9
                Dim threshold = 30.0
                Dim diagnosticMz = 184.07332 + HydrogenMass * 9
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        If sphCarbon <= 13 Then Continue For
                        If sphCarbon = 16 AndAlso sphDouble >= 3 Then Continue For
                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If acylCarbon < 8 Then Continue For


                        Dim sph1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) - diagnosticMz - H2O + 2 * HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 0.01
                            }
                            }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("SM_d9", LbmClass.SM_d9, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM_d9", LbmClass.SM_d9, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek -59.0735 [M-C3H9N+Na]+
                Dim threshold = 20.0
                Dim diagnosticMz = theoreticalMz - (59.0735 + HydrogenMass * 9)
                ' seek -183.06604 [M-C5H14NO4P+Na]+
                Dim threshold2 = 30.0
                Dim diagnosticMz2 = theoreticalMz - (183.06604 + HydrogenMass * 9)
                ' seek -183.06604 [M-C5H16NO5P+H]+
                Dim threshold3 = 1
                Dim diagnosticMz3 = theoreticalMz - (183.06604 + HydrogenMass * 9) - 39.993064

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                'if (isClassIonFound == !true || isClassIon2Found == !true || isClassIon3Found == !true) return null;
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM_d9", LbmClass.SM_d9, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold1 = 50.0
                Dim threshold2 = 0.01
                Dim diagnosticMz1 = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim diagnosticMz2 = 168.042572 + Electron + HydrogenMass * 9
                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True OrElse isClassIon2Found <> True Then Return Nothing

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        Dim acylDouble = totalDoubleBond - sphDouble

                        If acylCarbon < 8 Then Continue For

                        Dim sphFragment = diagnosticMz1 - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim query = New List(Of SpectrumPeak) From {
                                New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 0.01
                            }
                            }
                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("SM_d9", LbmClass.SM_d9, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("SM_d9", LbmClass.SM_d9, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfCeramidensD7(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSphCarbon As Integer, ByVal maxSphCarbon As Integer, ByVal minSphDoubleBond As Integer, ByVal maxSphDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSphCarbon > totalCarbon Then maxSphCarbon = totalCarbon
        If maxSphDoubleBond > totalDoubleBond Then maxSphDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            Dim adductform = adduct.AdductIonName
            If Equals(adductform, "[M+H]+") OrElse Equals(adductform, "[M+H-H2O]+") Then
                ' seek -H2O
                Dim threshold = 5.0
                Dim diagnosticMz = If(Equals(adductform, "[M+H]+"), theoreticalMz - H2O, theoreticalMz)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond ' sphingo chain must have double bond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        ' if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If acylDouble >= 7 Then Continue For
                        Dim sph1 = diagnosticMz - LipidMsmsCharacterizationUtility.acylCainMass(acylCarbon, acylDouble) + HydrogenMass
                        Dim sph2 = sph1 - H2O
                        Dim sph3 = sph2 - 12 '[Sph-CH4O2+H]+
                        Dim acylamide = acylCarbon * 12 + (2 * acylCarbon - 2 * acylDouble + 2) * HydrogenMass + OxygenMass + NitrogenMass

                        ' must query
                        Dim queryMust = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph2,
                                .Intensity = 5
                            }
                        }
                        Dim foundCountMust = 0
                        Dim averageIntensityMust = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, queryMust, ms2Tolerance, foundCountMust, averageIntensityMust)
                        If foundCountMust = 0 Then Continue For

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph1,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)
                        Dim foundCountThresh = If(acylCarbon < 12, 2, 1) ' to exclude strange annotation

                        If foundCount >= foundCountThresh Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer_d7", LbmClass.Cer_NS_d7, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer_d7", LbmClass.Cer_NS_d7, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            ElseIf Equals(adductform, "[M+Na]+") Then
                ' reject HexCer
                Dim threshold = 1.0
                Dim diagnosticMz = theoreticalMz - 162.052833 - H2O
                If LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold) Then
                    Return Nothing
                End If
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond
                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble

                        Dim sph1 = LipidMsmsCharacterizationUtility.SphingoChainMass(sphCarbon, sphDouble) + HydrogenMass - OxygenMass + HydrogenMass * 7
                        Dim sph3 = sph1 - H2O + Proton

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sph3,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 1 Then ' 
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer_d7", LbmClass.Cer_NS_d7, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer_d7", LbmClass.Cer_NS_d7, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M-H]-") OrElse Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' calc [M-H]-
                'var threshold = 10.0;
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M-H]-"), theoreticalMz, If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - HydrogenMass - 59.013864, theoreticalMz - HydrogenMass - 44.998214))
                ' seek [M-CH2O-H]-
                Dim threshold1 = 1.0
                Dim diagnosticMz1 = diagnosticMz - 12 - H2O
                ' seek [M-CH2O-H2O-H]-
                Dim threshold2 = 1.0
                Dim diagnosticMz2 = diagnosticMz1 - H2O

                Dim isClassIon1Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold1)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold2)
                If isClassIon1Found <> True AndAlso isClassIon2Found <> True Then Return Nothing

                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz3 = theoreticalMz - HydrogenMass - 44.998214
                    Dim threshold3 = 50.0
                    Dim isClassIon3Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold3)
                    If isClassIon3Found Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sphCarbon = minSphCarbon To maxSphCarbon
                    For sphDouble = minSphDoubleBond To maxSphDoubleBond

                        Dim acylCarbon = totalCarbon - sphCarbon
                        'if (acylCarbon < minSphCarbon) { break; }
                        Dim acylDouble = totalDoubleBond - sphDouble
                        If acylDouble >= 7 Then Continue For

                        Dim sphChain_loss = diagnosticMz - (sphCarbon - 2) * 12 - HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2 + 1 + HydrogenMass * 7) - 2 * OxygenMass - HydrogenMass ' as [FA+NCCO-3H]- on Excel(may be not sure)
                        Dim sphFragment = (sphCarbon - 2) * 12 + (HydrogenMass * ((sphCarbon - 2) * 2 - sphDouble * 2) - 1) + OxygenMass + HydrogenMass * 7 ' [Sph-NCC-3H]-
                        Dim acylFragment = LipidMsmsCharacterizationUtility.fattyacidProductIon(acylCarbon, acylDouble) - OxygenMass - 2 * HydrogenMass ' 

                        'Console.WriteLine("d" + sphCarbon + ":" + sphDouble + "/" + acylCarbon + ":" + acylDouble + " " +
                        '    sphChain_loss + " " + sphFragment + " " + acylFragment);
                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = sphChain_loss,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = sphFragment,
                                .Intensity = 1
                            },
                            New SpectrumPeak() With {
                                .Mass = acylFragment,
                                .Intensity = 1
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' the diagnostic acyl ion must be observed for level 2 annotation
                            Dim molecule = LipidMsmsCharacterizationUtility.getCeramideMoleculeObjAsLevel2("Cer_d7", LbmClass.Cer_NS_d7, "d", sphCarbon, sphDouble, acylCarbon, acylDouble, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                If candidates.Count = 0 Then Return Nothing
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("Cer_d7", LbmClass.Cer_NS_d7, "d", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfCholesterylEsterD7(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Single, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                ' seek 369.3515778691 (C27H45+)+ MassDiffDictionary.HydrogenMass*7
                Dim threshold = 20.0
                Dim diagnosticMz = 369.3515778691 + HydrogenMass * 7
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                If totalCarbon >= 41 AndAlso totalDoubleBond >= 4 Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CE_d7", LbmClass.CE_d7, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' seek 369.3515778691 (C27H45+)+ MassDiffDictionary.HydrogenMass*7
                Dim threshold = 10.0
                Dim diagnosticMz = 369.3515778691 + HydrogenMass * 7
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                ' if (isClassIonFound == false) return null;

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("CE_d7", LbmClass.CE_d7, String.Empty, theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 1)
            End If

        End If
        Return Nothing
    End Function

    '20230424
    Public Shared Function JudgeIfBetaMethylPhosphatidylcholine(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule ' If the candidate PC 46:6, totalCarbon = 46 and totalDoubleBond = 6
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If maxSnCarbon > totalCarbon Then maxSnCarbon = totalCarbon
        If maxSnDoubleBond > totalDoubleBond Then maxSnDoubleBond = totalDoubleBond
        If adduct.IonMode = IonMode.Positive Then ' positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                ' seek 198 (C6H17NO4P)
                Dim threshold = 10.0
                Dim diagnosticMz = 12 * 6 + HydrogenMass * 16 + NitrogenMass + OxygenMass * 4 + PhosphorusMass + Proton
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double
                        If sn1Carbon < 10 OrElse sn2Carbon < 10 Then Continue For
                        If sn1Double > 6 OrElse sn2Double > 6 Then Continue For

                        Dim nl_SN1 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) + HydrogenMass
                        Dim nl_SN1_H2O = nl_SN1 - H2O

                        Dim nl_SN2 = theoreticalMz - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) + HydrogenMass
                        Dim nl_NS2_H2O = nl_SN2 - H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN1_H2O,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_NS2_H2O,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("bmPC", LbmClass.bmPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("bmPC", LbmClass.bmPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
                'addMT
            ElseIf Equals(adduct.AdductIonName, "[M+Na]+") Then
                ' 198.07332 (C6H16NO4P)
                Dim threshold = 5.0
                Dim diagnosticMz = 12 * 6 + HydrogenMass * 16 + NitrogenMass + OxygenMass * 4 + PhosphorusMass
                ' seek [M+Na -C6H16NO4P]+
                Dim diagnosticMz2 = theoreticalMz - diagnosticMz
                ' seek [M+Na -C3H9N]+
                Dim diagnosticMz3 = theoreticalMz - 59.0735
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                Dim isClassIon2Found = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz3, threshold)
                If isClassIonFound = False OrElse isClassIon2Found = False Then Return Nothing
                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond
                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim nl_SN1 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(sn1Carbon, sn1Double) - H2O + HydrogenMass
                        Dim nl_SN2 = diagnosticMz3 - LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - H2O + HydrogenMass

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = nl_SN1,
                                .Intensity = 0.01
                            },
                            New SpectrumPeak() With {
                                .Mass = nl_SN2,
                                .Intensity = 0.01
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount >= 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("bmPC", LbmClass.bmPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("bmPC", LbmClass.bmPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        Else
            If Equals(adduct.AdductIonName, "[M+FA-H]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") OrElse Equals(adduct.AdductIonName, "[M+HCOO]-") OrElse Equals(adduct.AdductIonName, "[M+CH3COO]-") Then
                ' seek [M-CH3]-
                Dim threshold = 10.0
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-"), theoreticalMz - 74.036779433, theoreticalMz - 60.021129369)
                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing
                If Equals(adduct.AdductIonName, "[M+CH3COO]-") OrElse Equals(adduct.AdductIonName, "[M+Hac-H]-") Then
                    Dim diagnosticMz2 = theoreticalMz - 60.021129369 ' in source check
                    Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                    If isClassIonFound2 Then Return Nothing
                End If

                ' from here, acyl level annotation is executed.
                Dim candidates = New List(Of LipidMolecule)()
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim sn1 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn1Carbon, sn1Double)
                        Dim sn2 = LipidMsmsCharacterizationUtility.fattyacidProductIon(sn2Carbon, sn2Double)

                        Dim query = New List(Of SpectrumPeak) From {
                        New SpectrumPeak() With {
                                .Mass = sn1,
                                .Intensity = 1.0
                            },
                        New SpectrumPeak() With {
                                .Mass = sn2,
                                .Intensity = 1.0
                            }
                    }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getPhospholipidMoleculeObjAsLevel2("bmPC", LbmClass.bmPC, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        End If
                    Next
                Next
                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("bmPC", LbmClass.bmPC, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, 0, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    '20230612
    Public Shared Function JudgeIfWaxEster(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal minSnCarbon As Integer, ByVal maxSnCarbon As Integer, ByVal minSnDoubleBond As Integer, ByVal maxSnDoubleBond As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim candidates = New List(Of LipidMolecule)()
                ' from here, acyl level annotation is executed.
                For sn1Carbon = minSnCarbon To maxSnCarbon
                    For sn1Double = minSnDoubleBond To maxSnDoubleBond

                        Dim sn2Carbon = totalCarbon - sn1Carbon
                        Dim sn2Double = totalDoubleBond - sn1Double

                        Dim adductMass = adduct.AdductIonAccurateMass

                        Dim Sn2Acyl = LipidMsmsCharacterizationUtility.acylCainMass(sn2Carbon, sn2Double) - HydrogenMass + adductMass
                        Dim Sn2FA = Sn2Acyl + H2O

                        Dim query = New List(Of SpectrumPeak) From {
                            New SpectrumPeak() With {
                                .Mass = Sn2Acyl,
                                .Intensity = 5
                            },
                            New SpectrumPeak() With {
                                .Mass = Sn2FA,
                                .Intensity = 5
                            }
                        }

                        Dim foundCount = 0
                        Dim averageIntensity = 0.0
                        LipidMsmsCharacterizationUtility.countFragmentExistence(spectrum, query, ms2Tolerance, foundCount, averageIntensity)

                        If foundCount = 2 Then ' now I set 2 as the correct level
                            Dim molecule = LipidMsmsCharacterizationUtility.getWaxEsterObjAsLevel2_0("WE", LbmClass.WE, sn1Carbon, sn1Double, sn2Carbon, sn2Double, averageIntensity)
                            candidates.Add(molecule)
                        Else
                            Return Nothing
                        End If
                    Next
                Next

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("WE", LbmClass.WE, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 2)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcylTryA(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 144.081 (indole + C2H3)
                Dim threshold = 20.0
                Dim diagnosticMz = 12 * 10 + HydrogenMass * 9 + NitrogenMass + ProtonMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NATryA", LbmClass.NATryA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcyl5HT(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 160.076 (5OH-indole + C2H3)
                Dim threshold = 20.0
                Dim diagnosticMz = 12 * 10 + HydrogenMass * 9 + NitrogenMass + OxygenMass + ProtonMass

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NA5HT", LbmClass.NA5HT, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcylAla(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 90.055 (Ala)
                Dim threshold = 20.0
                Dim diagnosticMz = 12 * 3 + HydrogenMass * 7 + OxygenMass * 2 + NitrogenMass + Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAAla", LbmClass.NAAla, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcylGln(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 130.05 (Gln-NH3)
                Dim threshold = 20.0
                Dim diagnosticMz = 12 * 5 + HydrogenMass * 7 + OxygenMass * 3 + NitrogenMass + Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAGln", LbmClass.NAGln, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcylLeu(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 132.10 (Leu)
                Dim threshold = 10.0
                Dim diagnosticMz = 12 * 6 + HydrogenMass * 13 + OxygenMass * 2 + NitrogenMass + Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NALeu", LbmClass.NALeu, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcylVal(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 118.09 (Val)
                Dim threshold = 20.0
                Dim diagnosticMz = 12 * 5 + HydrogenMass * 11 + OxygenMass * 2 + NitrogenMass * 1 + Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NAVal", LbmClass.NAVal, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfNAcylSer(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") Then
                '  seek 106.05 (Ser)
                Dim threshold = 20.0
                Dim diagnosticMz = 12 * 3 + HydrogenMass * 7 + OxygenMass * 3 + NitrogenMass + Proton

                Dim isClassIonFound = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz, threshold)
                If isClassIonFound = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("NASer", LbmClass.NASer, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
    Public Shared Function JudgeIfBismelpa(ByVal msScanProp As IMSScanProperty, ByVal ms2Tolerance As Double, ByVal theoreticalMz As Double, ByVal totalCarbon As Integer, ByVal totalDoubleBond As Integer, ByVal totalOxidized As Integer, ByVal adduct As AdductIon) As LipidMolecule
        Dim spectrum = msScanProp.Spectrum
        If spectrum Is Nothing OrElse spectrum.Count = 0 Then Return Nothing
        If adduct.IonMode = IonMode.Positive Then ' Positive ion mode 
            If Equals(adduct.AdductIonName, "[M+H]+") OrElse Equals(adduct.AdductIonName, "[M+NH4]+") Then
                Dim diagnosticMz = If(Equals(adduct.AdductIonName, "[M+NH4]+"), theoreticalMz - (NitrogenMass + HydrogenMass * 3), theoreticalMz)

                '  seek "[C5H12PO5]+"; // 183
                Dim threshold = 10.0
                Dim diagnosticMz1 = 12 * 5 + HydrogenMass * 11 + OxygenMass * 5 + PhosphorusMass + Proton
                '  C2H7PO4 Loss
                Dim diagnosticMz2 = diagnosticMz - (12 * 2 + HydrogenMass * 7 + OxygenMass * 4 + PhosphorusMass)

                Dim isClassIonFound1 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz1, threshold)
                Dim isClassIonFound2 = LipidMsmsCharacterizationUtility.isDiagnosticFragmentExist(spectrum, ms2Tolerance, diagnosticMz2, threshold)
                If isClassIonFound1 = False OrElse isClassIonFound2 = False Then Return Nothing

                Dim candidates = New List(Of LipidMolecule)()

                Return LipidMsmsCharacterizationUtility.returnAnnotationResult("BisMeLPA", LbmClass.BisMeLPA, "", theoreticalMz, adduct, totalCarbon, totalDoubleBond, totalOxidized, candidates, 1)
            End If
        End If
        Return Nothing
    End Function
End Class
