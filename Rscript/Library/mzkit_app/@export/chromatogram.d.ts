// export R# package module type define for javascript/typescript language
//
//    imports "chromatogram" from "mzkit";
//
// ref=mzkit.ChromatogramTools@mzkit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

/**
 * A chromatogram is the trace generated by the detector 
 *  signal and requires a carefully controlled flow rate
 *  of the carrier gas (mobile phase) and a carefully 
 *  controlled temperature of the column (stationary phase) 
 *  to yield repeatable results.
 * 
*/
declare namespace chromatogram {
   /**
    * Add a chromatogram data in the chromatogram overlap collection
    * 
    * 
     * @param overlaps A chromatogram overlap collection object to be add new layer to it
     * @param name usually be a sample name
     * @param data usually be a chromatogram data that extract from a sample data
   */
   function add(overlaps: object, name: string, data: object): object;
   module as {
      /**
       * convert dataset to chromatography dataset
       * 
       * 
        * @param scans can be a data sequence of ms1 scan object or rt 
        *  scan time vector if the signal data parameter 
        *  is assigned value.
        * @param args this optional parameter value could be a numeric vector
        *  for represents the intensity value if the scans parameter
        *  is a numeric vector for represents the RT value
        * 
        * + default value Is ``null``.
        * @param env -
        * 
        * + default value Is ``null``.
      */
      function chromatogram(scans: any, args?: object, env?: object): object|object;
   }
   /**
    * set new labels to the chromatogram overlap data
    * 
    * 
     * @param overlaps -
     * @param names -
     * @param env -
     * 
     * + default value Is ``null``.
   */
   function labels(overlaps: object, names: string, env?: object): object;
   /**
    * Create chromatogram overlaps from a set of chromatogram objects
    * 
    * 
     * @param TIC A set of the chromatogram data objects, it chould be a vector of the
     *  chromatogram data object or a list of the chromatogram objects.
     *  The chromatogram data object in this input collection source could be
     *  created via the ``toChromatogram`` function.
     * 
     * + default value Is ``null``.
     * @param env -
     * 
     * + default value Is ``null``.
   */
   function overlaps(TIC?: any, env?: object): object;
   /**
    * Convert the overlap list to the matrix
    * 
    * 
     * @param overlaps -
     * @param dt -
     * 
     * + default value Is ``0.3``.
   */
   function overlapsMatrix(overlaps: object, dt?: number): any;
   module read {
      /**
      */
      function pack(cdf: string): object;
   }
   /**
    * scale the RT into different time data unit
    * 
    * 
     * @param overlaps -
     * @param unit the time data unit could be ``minute`` or ``hour``.
     * 
     * + default value Is ``'minute'``.
   */
   function scale_time(overlaps: object, unit?: string): object;
   /**
    * get subset of the chromatogram data by names
    * 
    * 
     * @param overlaps -
     * @param names -
   */
   function subset(overlaps: object, names: string): object;
   /**
    * Convert chromatogram tick point data to a chromatogram object
    * 
    * 
     * @param ticks A vector of the @``T:BioNovoGene.Analytical.MassSpectrometry.Math.Chromatogram.ChromatogramTick`` object or a dataframe object.
     *  
     *  If the data input is a dataframe object, then the data fields is
     *  required for create the chromatogram object:
     *  
     *  1. rt,RT,retention_time: used for represents the retention time data, data should be in time data unit seconds
     *  2. basePeak,BPC: used for represents the base peak ion intensity value
     *  3. totalIon,TIC: used for represents the total ions intensity value
     *  4. into,intensity: used for represents the ion intensity value if the basePeak or total ion data is not specific
     * @param env 
     * + default value Is ``null``.
     * @return A chromatogram data object, which could be used for do 
     *  chromatogram overlaps or data plot visualization.
   */
   function toChromatogram(ticks: any, env?: object): object;
   /**
   */
   function topInto(overlaps: object, n: object): object;
   module write {
      /**
       * save the chrome overlaps data as the cdf data file
       * 
       * 
        * @param overlaps -
        * @param cdf -
      */
      function pack(overlaps: object, cdf: string): ;
   }
}
